{"meta":{"title":"Lant's Blog","subtitle":null,"description":null,"author":"Lant","url":"http://blog.renyimin.com"},"pages":[{"title":"标签","date":"2017-09-17T02:40:21.000Z","updated":"2017-09-18T09:08:03.000Z","comments":false,"path":"tags/index.html","permalink":"http://blog.renyimin.com/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2017-09-17T02:40:28.000Z","updated":"2017-09-18T09:08:09.000Z","comments":false,"path":"categories/index.html","permalink":"http://blog.renyimin.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Laravel-install-01","slug":"Laravel-install-01","date":"2016-04-15T08:34:13.000Z","updated":"2017-09-19T04:52:28.000Z","comments":true,"path":"2016/04/15/Laravel-install-01/","link":"","permalink":"http://blog.renyimin.com/2016/04/15/Laravel-install-01/","excerpt":"","text":"通过Composer下载安装可以在终端中通过Composer的==create-project==命令来创建一个新的Laravel项目:123composer create-project laravel/laravel [项目目录名] [项目版本号] --prefer-dist如果不写laravel下载下来后放置项目的目录名, 则默认为laravel; 1234567比如要下载Laravel的LTS版本(目前是Laravel5.1), 操作如下:composer create-project laravel/laravel vip 5.1.33 --prefer-dist或者composer create-project laravel/laravel vip 5.1.* --prefer-dist 应用Key的设置如果你是通过Composer或者Laravel安装器安装的话, 该key的值已经通过key:generate命令生成好了; (通常, 该字符串应该是32位长, 该key被配置在.env环境文件中(APP_KEY), 如果你还没有将.env.example文件重命名为.env, 现在立即这样做;如果应用key没有被设置, 用户sessions和其它加密数据将会有安全隐患!) 如果你不是通过composer安装的laravel, 生成key的方式如下:1先创建一个.env文件 12345然后生成应用key:bogon:laravel renyimin$ php artisan key:generateApplication key [7a7rsPOdMubimWYQRddpxEiTRuoQMScE] set successfully.bogon:laravel renyimin$ 你如果是使用Composer安装的话, 可以看到: image.png image.png nginx的设置:1$uri $uri/ /index.php?$query_string image.png 1项目根目录配置到: 项目目录的 public 目录下; 安装成功: image.png","categories":[{"name":"PHP框架","slug":"PHP框架","permalink":"http://blog.renyimin.com/categories/PHP框架/"}],"tags":[{"name":"Laravel","slug":"Laravel","permalink":"http://blog.renyimin.com/tags/Laravel/"}]},{"title":"OAuth 简介","slug":"OAuth","date":"2016-03-19T03:05:00.000Z","updated":"2017-09-19T07:00:20.000Z","comments":true,"path":"2016/03/19/OAuth/","link":"","permalink":"http://blog.renyimin.com/2016/03/19/OAuth/","excerpt":"","text":"该系列文章参考摘抄了很多网络上的资料, 结合自己的思路编写, 方便自己日后回顾, 也希望能给大家提供一定的帮助； 什么是OAuth (开放式授权 Open Authorization)1.OAuth是一个关于授权(authorization)的开放网络标准, 在全世界得到广泛应用, 目前的版本是2.0版; 2.与以往的授权方式不同之处是, OAuth的授权不会使第三方触及到用户的帐号信息(如用户名与密码), 即第三方无需使用用户的用户名与密码就可以申请获得该用户资源的授权, 因此 OAuth 是安全的, OAuth 是 Open Authorization(开放授权) 的简写; OAuth协议版本1.0: 2007.12 (有过安全漏洞, 比较复杂不易用) 2.0: 2010年初 OAuth的应用场景最常见的, 我们经常会看到很多网站除了可以使用网站的账号密码登录之外, 还可以使用其他一些如 QQ, 微信, GitHub, 人人, 豆瓣 等账户进行登录 作为第三方的网站, 要让用户使用自己的其他登录进行登录, 则必须要让用户进行授权, 也就是我们通常点击QQ登录之后腾讯为我们弹出的授权页,问我们同不同意使用自己的QQ账号登录这个第三方站点, 并且这个授权页上也有相应的授权范围给我们列出来; 腾讯其实用的就是OAuth2.0协议让我们对第三方站点进行的授权； 再比如, 有一个”云冲印”的网站, 可以将用户储存在其他大平台(比如Google)的一些照片冲印出来; 1.假设用户想在 “云冲印”平台上冲印自己Google账户上的照片, 首先”云冲印”平台得读取到用户储存在Google上的照片, 也就是说用户需要授权给”云冲印”; 2.这里所谓的”授权”其实就是给云冲印平台能够读取用户Google账户中照片的权限; 3.传统所谓”授权”做法, 最简单直接的就是用户直接将自己的Google账号和密码提供给”云冲印”平台, 这样后者就可以读取用户的照片了; 4.但这种做法有以下几个严重缺点:12345\"云冲印\"作为第三方品台, 为了后续的服务, 会保存用户的Google账号和密码, 这样很不安全, 如果第三方平台都这么让用户提供密码的话, 难免有些第三方平台会由于自己的安全问题导致用户Google账户密码泄露, 这样将导致所有被密码保护的用户大量信息泄露;\"云冲印\"拥有了获取用户储存在Google账户中的所有的资料的权力, 用户没法限制\"云冲印\"获得授权的范围和有效期;用户只有修改密码, 才能收回赋予\"云冲印\"的权力, 但是这样做, 会使得其他所有获得用户授权的第三方应用程序全部失效; OAuth就可以解决以上的问题; 名词定义在详细讲解OAuth 2.0之前, 需要了解几个专用名词: 1.Third-party application: 第三方应用程序, 本文中又称”客户端”, 即上一节例子中的”云冲印”; (之前愚蠢的我,一直给网站接入的 如 “QQ, 人人, 微信 等登录api” 叫第三方, 所以后来就和这里的”第三方”有点混淆了, 这里的第三方其实是针对”提供授权服务”的一方来说的, 之前说的第三方是针对你正在操作的网站来说的) 2.Owner: 资源所有者, 用户自己; 3.Authorization server: 认证服务器, 即服务提供商专门用来处理认证的服务器; (如QQ,google,人人, 微信提供给第三方平台的认证服务器) 4.Resource server: 资源服务器, 即服务提供商存放用户生成的资源的服务器(当然, 它与认证服务器, 可以是同一台服务器,也可以是不同的服务器) (如你的QQ, google, 人人, 微信 账户中的资料所存放的服务器) OAuth的思路 (授权码模式)使用OAuth授权标准, 其实就是”服务提供商”在 第三方客户端(也就是上面的云冲印网站或者你自己的网站) 与 “服务提供商”之间, 设置了一个授权层(authorization layer); “第三方客户端” 不能去直接登录 “服务提供商” , 而只能跳转到接入的服务提供商的授权层页面; 用户可以在授权曾页面指定授权给第三方客户端的权限范围和有效期 ; “第三方客户端” 在登录授权层以后, 授权服务器会根据用户之前授予第三方客户端的权限, 给第三方客户端生成一种叫令牌(token)的东东, 它与用户的密码不同; 然后第三方客户端就可以使用令牌去资源服务器中请求资源, 资源服务器就会根据令牌中的的权限范围和有效期, 向”第三方客户端”开放用户储存的部分资料; OAuth的具体运行流程 (授权码模式)1234567891011用户在第三方客户端网站点击 如QQ, 人人, 微信登录按钮 以后, 第三方客户端网站会跳转到相应的服务商(如QQ, 人人, 微信)提供的授权页面, 要求用户给予第三方客户端网站一定的授权;用户如果同意给予当前所在的第三方客户端网站授权;第三方客户端使用上一步获得的授权, 向(如QQ, 人人, 微信的)认证服务器申请令牌;认证服务器对第三方客户端进行认证以后, 确认无误, 同意发放令牌;第三方客户端使用令牌, 再去向(如QQ, 人人, 微信的)资源服务器申请获取资源;资源服务器确认令牌无误, 同意向第三方客户端开放资源; 不难看出来, 上面六个步骤之中, 第二步是关键,即用户怎样才能给于客户端授权, 有了这个授权以后, 进而凭令牌获取资源; 下面一一讲解客户端获取授权的四种模式:客户端必须得到用户的授权(authorization grant), 才能获得令牌(access token), OAuth 2.0定义了四种授权方式: 授权码模式（authorization code） 简化模式（implicit） 密码模式（resource owner password credentials） 客户端模式（client credentials） 参考: 阮一峰","categories":[{"name":"OAuth","slug":"OAuth","permalink":"http://blog.renyimin.com/categories/OAuth/"}],"tags":[{"name":"OAuth2.0","slug":"OAuth2-0","permalink":"http://blog.renyimin.com/tags/OAuth2-0/"}]},{"title":"PHP的Closure学习整理","slug":"clusore-introduction","date":"2016-03-10T06:30:15.000Z","updated":"2017-09-19T04:55:10.000Z","comments":true,"path":"2016/03/10/clusore-introduction/","link":"","permalink":"http://blog.renyimin.com/2016/03/10/clusore-introduction/","excerpt":"","text":"主要是对网上现存的一些资料做了一些简单地整理, 一方面让自己对基础知识加深印象, 一方面便于日后自己随时回顾! JavaScript中的闭包在了解PHP的闭包之前, 我们可以先简单了解一下JavaScript的闭包是怎样的? Js的作用域1.要理解闭包，首先必须理解Javascript的 变量作用域 ; 2.变量的作用域无非就是两种: 全局变量 和 局部变量 ; Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量:js12345var n=999;function f1()&#123; alert(n);&#125;f1(); // 999 另一方面, 在函数外部自然无法读取函数内的局部变量:js1234function f1()&#123; var n=999; //这里有一个地方需要注意，函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！&#125;alert(n); // error 如何从外部读取局部变量？出于种种原因, 我们有时候需要得到函数内的局部变量, 但是, 前面已经说过了, 正常情况下，这是办不到的, 只有通过变通方法才能实现; 于是, 我们可以在函数的内部, 再定义一个函数:js123456function f1()&#123; var n = 999; function f2()&#123; alert(n); // 999 &#125;&#125; 在上面的代码中, 函数f2就被包括在函数f1内部, 这时, f1内部的所有局部变量, 对f2都是可见的;但是反过来就不行, f2内部的局部变量, 对f1就是不可见的; 这就是Javascript语言特有的”链式作用域”结构(chain scope), 子对象会一级一级地向上寻找所有父对象的变量; 所以，父对象的所有变量，对子对象都是可见的，反之则不成立。 既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们不就可以在f1外部读取它的内部变量了吗！js123456789101112131415161718192021function f1(a)&#123; var n = &apos;局部变量&apos;; function f2(c)&#123; console.log(n); console.log(a); console.log(c); &#125; return f2;&#125;var result = f1(&apos;传递给函数的参数,也成了一个局部值&apos;);result(&apos;传递给闭包的参数1&apos;);console.log(&apos;&apos;);result(&apos;传递给闭包的参数2&apos;);//结果: 局部变量 //可以看到我们就从外部取到了函数内部的局部变量传递给函数的参数,也成了一个局部值传递给闭包的参数1局部变量 //可以看到我们就从外部取到了函数内部的局部变量传递给函数的参数,也成了一个局部值传递给闭包的参数2 闭包的概念上一节代码中的f2函数, 就是闭包; 各种专业文献上对 “闭包”（closure）定义非常抽象，很难看懂; 我的理解是，闭包就是能够读取其他函数内部变量的函数; 由于在Javascript语言中，只有函数内部的子函数才能读取局部变量, 因此可以把闭包简单理解成 “定义在一个函数内部的函数” ; 所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁; 闭包的用途1.闭包可以用在许多地方, 它的最大用处有两个:12一个是前面提到的可以读取函数内部的变量; 另一个就是让这些变量的值始终保持在内存中; 2.怎么来理解上面的话呢？ 之前的代码中, result 这个变量其实就是闭包函数f2, 它一共运行了两次; 而函数f1中的局部变量一直保存在内存中, 并没有在f1调用后被自动清除; 原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后被垃圾回收机制（garbage collection）回收; 使用闭包的注意点1.由于闭包会使得函数中的变量都被保存在内存中, 内存消耗很大, 所以不能滥用闭包, 否则会造成网页的性能问题, 在IE中可能导致内存泄露, 解决方法是, 在退出函数之前, 将不使用的局部变量全部删除; 2.闭包会在父函数外部改变父函数内部变量的值; 所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method）, 把内部变量当作它的私有属性（private value）, 这时一定要小心, 不要随便改变父函数内部变量的值; js12345678910var name = &quot;The Window&quot;;var object = &#123; name : &quot;My Object&quot;, getNameFunc : function()&#123; return function()&#123; return this.name; &#125;; &#125;&#125;;console.log(object.getNameFunc()()); // The Window js1234567891011var name = &quot;The Window&quot;;var object = &#123; name : &quot;My Object&quot;, getNameFunc : function()&#123; var that = this; return function()&#123; return that.name; &#125;; &#125;&#125;;console.log(object.getNameFunc()()); // My Object 以上参考阮一峰的博客, 阮一峰大哥真的写的很好了, 本人这里只是过一遍, 然后稍微简化了一点点, 修改了一点列子, 便于自己理解; PHP的闭包1.PHP的闭包 和 匿名函数 是在PHP5.3.0中引入, 这两个特性非常有用, 每个PHP开发者都应该掌握; 2.闭包是指在创建时, 封装周围状态的函数, 即便闭包所在的环境不存在了, 闭包中封装的状态依然存在, 这个概念如果你看了之前的JavaScript相关闭包的概念, 应该理解起来不是太难; 3.匿名函数是没有名称的的函数, 匿名函数可以赋值给变量, 还能像其他任何PHP变量那样传递, 不过匿名函数仍是函数, 因此可以调用, 还可以传入参数, 匿名函数特别适合作为函数或方法的回调; 4.理论上讲, 闭包和匿名函数是不同的概念, 不过, PHP将其视为相同的概念, 所以一般在PHP中说闭包就是匿名函数, 说匿名函数也是指闭包; 5.PHP闭包和匿名函数使用的句法虽然和普通函数相同, 但是需要注意的是, 闭包和匿名函数其实是伪装成函数的对象, 如果审查PHP闭包或匿名函数, 会发现阀门是Closure类的实例; 闭包和字符串或证书一样, 也是一等值类型 ; 创建闭包12345678&lt;?php$closure = function ($name) &#123; return sprintf('Hello %s', $name);&#125;;var_dump($closure); //object(Closure)#1 (1) &#123; [\"parameter\"]=&gt; array(1) &#123; [\"$name\"]=&gt; string(10) \"\" &#125; &#125;echo '&lt;br/&gt;';echo $closure('Josh'); //Hello Josh 闭包对象的创建就这么简单; 12建议: 之所以能调用$closure变量, 是因为这个变量的值是一个闭包, 而且闭包对象实现了__invoke()魔术方法;只要变量名后面有(), PHP就会查找并调用__invoke()方法; 通常情况下, 我们会把PHP的闭包对象当做函数和方法的回调来使用; 很多PHP的函数都会用到回调函数, 例如 array_map()和preg_replace_callback();这是使用PHP匿名函数的绝佳时机! 记住, 闭包和其他值一样, 可以作为参数出传入其他PHP函数; PHP中闭包的 附加状态1.之前我们说的 array_map()和preg_replace_callback() 对闭包的使用, 主要是把匿名函数当做回调来使用;下面我们讨论的是如何为PHP闭包附加并封装状态; 2.JavaScript开发者可能对PHP的闭包感到奇怪, 因为通过之前对JavaScript中闭包的了解, 它的闭包会自动封装应用的状态; 而PHP的闭包不会像真正的JS闭包那样自动封装应用的状态;在PHP中, 我们必须手动调用闭包对象的 use关键字 , 或者闭包对象的 bindTo()方法 来把状态附加到PHP闭包上; use关键字使用use关键字附加闭包状态比较常见, 我们先看这种方式; 使用use关键字把变量附加到闭包上时, 附加的变量会记住附加时赋给它的值:1234567891011&lt;?phpfunction enclosePerson($name)&#123; return function ($doCommand) use ($name) &#123; return sprintf('%s, %s', $name, $doCommand); &#125;;&#125;$clay = enclosePerson('Clay');echo $clay('get me sweet tea!'); 在例子中, 具名函数enclosePerson()有个名为$name参数, 这个函数返回一个闭包对象, 而且这个闭包对象封装了$name参数;即便返回的闭包对象已经跳出了enclosePerson()函数的作用域, 闭包对象也会记住$name参数的值, 因为$name变量仍在闭包中; 1使用use关键字可以把多个参数传入闭包, 此时要像php函数或方法的参数一样, 使用都好分割多个参数; Closure对象的bindTo()方法1.别忘了, php闭包是个对象(Closure对象), 与任何其他PHP对象类似, 每个闭包都可以使用$this关键字获取闭包的内部状态; 虽然闭包对象的默认状态没什么用, 只不过是有一个__invoke魔术方法和bindTo()方法而已; 但是bindTo()方法为闭包增加了一些有趣的潜力, 我们可以使用这个方法把closure对象内部的状态绑定到其他对象上; 2.bindTo()方法的第二个参数很重要, 其作用是指定绑定闭包的那个对象所属的PHP类; 因此, 闭包可以访问绑定闭包的对象中受保护和似有的成员变量; 3.其实如果经常看一些php框架源码, 你会发现, PHP框架经常使用bindTo()方法把 路由URL所映射的匿名回调函数 绑定到 应用对象上, 这么做可以在这个匿名函数中使用$this关键字引用重要的应用对象:12345678910111213141516171819202122232425262728293031323334353637&lt;?phpclass App&#123; protected $routes = []; protected $responseStatus = '200 OK'; protected $responseContentType = 'text/html'; protected $responseBody = 'Hello world'; public function addRoute($routePath, $routeCallback) &#123; $this-&gt;routes[$routePath] = $routeCallback-&gt;bindTo($this, __CLASS__); &#125; public function dispatch($currentPath) &#123; foreach($this-&gt;routes as $routePath =&gt; $callBack) &#123; if ($routePath === $currentPath) &#123; $callBack(); &#125; &#125; header('HTTP/1.1 ' . $this-&gt;responseStatus); header('Content-type: ' . $this-&gt;responseContentType); header('Content-length: ' . mb_strlen($this-&gt;responseBody)); echo $this-&gt;responseBody; &#125;&#125;$app = new App();$app-&gt;addRoute('/user/getName', function() &#123; $this-&gt;responseContentType = 'application/json;charset=utf8'; $this-&gt;responseBody = '&#123;\"name\": \"renyimin\"&#125;';&#125;);$app-&gt;dispatch('/user/getName');//结果返回: &#123;\"name\": \"renyimin\"&#125; 上面例子其实就是通过在App应用类中, 使用匿名函数的bindTo()方法将匿名函数绑定到了App对象上, 所以你就可以在绑定路由与其匿名函数的时候, 在匿名函数中来通过$this来调用App对象中的一些受保护的属性, 从而设定本路由的返回信息; 《Modern PHP》","categories":[{"name":"PHP New Features","slug":"PHP-New-Features","permalink":"http://blog.renyimin.com/categories/PHP-New-Features/"},{"name":"PHP","slug":"PHP-New-Features/PHP","permalink":"http://blog.renyimin.com/categories/PHP-New-Features/PHP/"}],"tags":[{"name":"Closure(闭包)","slug":"Closure-闭包","permalink":"http://blog.renyimin.com/tags/Closure-闭包/"}]}]}