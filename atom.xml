<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lant&#39;s</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.renyimin.com/"/>
  <updated>2018-11-09T03:46:17.000Z</updated>
  <id>http://blog.renyimin.com/</id>
  
  <author>
    <name>Lant</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>10. ES的写一致机制</title>
    <link href="http://blog.renyimin.com/2018/06/17/elasticsearch/2018-06-17-10/"/>
    <id>http://blog.renyimin.com/2018/06/17/elasticsearch/2018-06-17-10/</id>
    <published>2018-06-17T08:43:02.000Z</published>
    <updated>2018-11-09T03:46:17.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>当我们在发送任何一个增删改操作时, 比如 <code>put /index/type/id</code>, 都可以带上一个 <code>consistency</code> 参数, 指明我们想要的写一致性是什么</p></li><li><p>consistency 有如下几个值</p><ul><li>one : 要求这个写操作, 只要有一个 primary-shard 是active活跃可用的, 就可以执行</li><li>all : 要求这个写操作, 必须所有的 primary-shard 和 replica-shard 都是活跃可用的, 才可以执行</li><li>quorum : 默认的值, 要求所有的shard中, 必须是大部分的shard都是活跃可用的, 才可以执行</li></ul></li><li><p>quorum机制:写之前必须确保大多数shard都是可用的</p><ul><li>quorum的计算公式: <code>quorum = int(primary+number_of_replicas) / 2) + 1</code></li><li>如果节点数少于quorum的数量, 可能会导致quorum不齐全, 进而无法执行任何写操作<br>比如有一个index对应3个primary-shard, number_of_replica=1, 总共有 3+3*1=6 个shard<br>quorum=int((3+1)/2)+1=3, 所以要求6个shard中至少有3个shard是active状态, 对该文档的写操作才可以执行<br>假设此时只有2个node是active的, 则该document所在的分片, 最多也就只有2个shard是活跃的, 不满足quorum, 所以对该文档的写操作不能执行成功</li><li>quorum不齐全时, 会 wait(等待) 1分钟 (默认1分钟, 可以设置timeout手动去调, 默认单位毫秒)<br>等待期间, 期望活跃的shard数量可以增加, 最后实在不行就会timeout, 我们其实可以在写操作的时加一个timeout参数,比如说 <code>PUT /index/type/id?timeout=30s</code>, 自己去设定quorum不齐全的时候, ES的timeout时长<br>默认是毫秒, 加个s代表秒</li><li>另外, ES提供了一种特殊处理场景, 当number_of_replicas&gt;1时才生效, 假如就一个primary shard, replica=1,此时就2个shard, ((1 + 1) / 2) + 1 = 2<br>要求必须有2个shard是活跃的, 但如果此时只有1个node, 即只有1个shard是活跃的, 若你不特殊处理的话, 会导致单节点集群无法工作</li><li><code>put /index/type/id/consistency=quorun</code></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;当我们在发送任何一个增删改操作时, 比如 &lt;code&gt;put /index/type/id&lt;/code&gt;, 都可以带上一个 &lt;code&gt;consistency&lt;/code&gt; 参数, 指明我们想要的写一致性是什么&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;consi
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://blog.renyimin.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch(一)" scheme="http://blog.renyimin.com/tags/Elasticsearch-%E4%B8%80/"/>
    
  </entry>
  
  <entry>
    <title>09. 简单了解ES 分布式, 扩容, 分片, 数据路由</title>
    <link href="http://blog.renyimin.com/2018/06/16/elasticsearch/2018-06-16-09/"/>
    <id>http://blog.renyimin.com/2018/06/16/elasticsearch/2018-06-16-09/</id>
    <published>2018-06-16T06:01:19.000Z</published>
    <updated>2018-11-09T03:45:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li><p>通过之前的几篇文章应该大概了解了ES是什么, 它能做些什么, 并且简单尝试了一下它的几种查询方式, 聚合分析功能; 这些简单的尝试会让你提前对其语法有个大概认识;</p></li><li><p>在继续深入ES的相关用法前, 这里也准备先提前对ES的一些基础架构相关内容有个简单了解</p></li></ol><h2 id="复杂分布式的透明"><a href="#复杂分布式的透明" class="headerlink" title="复杂分布式的透明"></a>复杂分布式的透明</h2><ol><li>之前在使用ES索引的数据时, 我们并没有关心过数据是如何进行分片的, 也没有关心过数据是到哪个分片中去的;</li><li>另外, 之前在用ES做了很多实验之后, 如果留意的话, 你会发现<ul><li>ES集群状态仍然是 <code>yellow</code>:<br><img src="/img/es/yellow-01.png"></li><li>如果想让集群达到 <code>green</code> 状态, 之前在 <a href="">ES 一些基本概念</a>中也介绍过, 此处由于 product 索引默认是 5个primary shard,每个主节点各1个副本节点, 所以需要再启用 1个 ES节点, 集群状态即可变为 <code>GREEN</code>;<br><img src="/img/es/green-01.png"></li><li>而启动节点之后, 我们也并没有关心集群是如何发现该节点的</li><li>并且之前未被分配的 replica shard 也自动被<strong>均匀</strong>分配到了新的节点上, 这也不用我们去关心;</li></ul></li><li>ES的复杂分布式对使用它的开发人员来说,都是非常透明的</li></ol><h2 id="垂直扩容-与-水平扩容"><a href="#垂直扩容-与-水平扩容" class="headerlink" title="垂直扩容 与 水平扩容"></a>垂直扩容 与 水平扩容</h2><ol><li><p>垂直扩容: 一般是指 对服务器进行升配 或者 采购更强大的服务器; 这种方式会有瓶颈, 而且成本较高;</p></li><li><p><strong>水平扩容</strong>: 比较常用, 可以通过采购更多的普通服务器 来构成强大的计算和存储能力, 成本比较低(10台普通服务器的价钱 和 与其等性能的1台强大服务器相比, 成本相对还是比较低), 而且扩展比较方便, 对开发人员也是透明的;</p></li><li><p>一个扩容的案例: 假设有5台服务器, 每台可以容纳1T数据, 当数据量要涨到7T时</p><ul><li>如果采用垂直扩容: 比如重新替换两台容纳2T数据的服务器, 3+2*2 即可达到7T</li><li>如果采用水平扩容: 直接启两台容纳2T数据的服务器, 5+2*1 即可达到7T</li></ul></li><li><p><strong>水平扩容极限</strong>? 假设一个分片对应了3个主分片, 每个主分片对应1个副本分片, 总共6个分片</p><ul><li><p>此时, 只需要2个节点(<code>number_of_replicas+1</code>), 就可以保证集群是 green 状态, 但此时性能并不优, 每个点上节有3个shard, 也就是3个shard共享了节点的资源;<br>如果进行水平扩容的话, 极限就是最多启动6个ES节点, 此时, 每个分片都可以独占单台服务器, 性能最好;</p></li><li><p>要超出上面的极限, 可以通过<strong>动态修改</strong>索引对应的副本分片数, 比如修改每个主分片对应2个副本分片, 此时 3+3*2=9 个分片<br>虽然只用3个节点(<code>number_of_replicas+1</code>)就可以保证集群是green<br>但如果要达到极限扩容, 可以最多将ES节点增加到9个, 很显然, 9个节点相比集群刚好green时的3个节点, 吞吐量直接是其3倍</p></li></ul></li></ol><h2 id="容错性分析"><a href="#容错性分析" class="headerlink" title="容错性分析"></a>容错性分析</h2><ol><li><p><strong>容错性分析</strong>: 一个索引</p><ul><li><p>如果对应 3个 Primary-shard, 每个 Primary-shard 对应2个 replica-shard, 总共 3+3*2 = 9<br>首先要知道的是, 要保证集群是 green, 共需要启动3个节点(<code>number_of_replicas+1</code>)<br>如果启动3个节点(此时的shard分配类似 <code>[P1,R2,R3]</code>, <code>[P2,R1,R3]</code>, <code>[P3,R1,R2]</code>), 此时可以允许有2台机器宕机, 仍然可以提供完整数据<br>如果启动到性能最优的9个节点, 不仅性能会最优, 而且可以容许最多6台机器宕机;</p></li><li><p>如果对应 3个 Primary-shard, 每个 Primary-shard 对应1个 replica-shard, 总共 3+3*1 = 6<br>如果启动2个节点(此时的shard分配类似 <code>[P1,P2,P3]</code>, <code>[R1,R2,R3]</code>), 此时可以允许有1台机器宕机, 仍然可以提供完整数据<br>如果启动3个节点(此时的shard分配类似 <code>[P1,P2]</code>, <code>[R2,R3]</code>, <code>[P3,R1]</code>), 此时可以允许有1台机器宕机, 仍然可以提供完整数据, 2台则不行;<br>如果启动到性能最优的6个节点, 不仅性能会最优, 而且可以容许最多3台机器宕机;</p></li></ul></li><li><p>容错大致过程</p><ul><li>如果master节点宕机, es会自动选举一个新的节点作为master节点, 承担master节点的责任;</li><li>新master将丢失的 primary-shard 的某个 replica-shard 提升为 primary-shard, 此时 cluster status 会变为yellow, 因为节点宕机后, 自然有 shard 会处于未分配状态;</li><li>重启故障的 节点, 如果在重启后有新的 replica-shard, 这些shard会被copy到启动的节点上, 而对于宕机前该node已有的shard, 该node自然会使用之前已有的shard数据, 只是会同步一下宕机后发生过的修改; </li></ul></li></ol><h2 id="分片再次梳理"><a href="#分片再次梳理" class="headerlink" title="分片再次梳理"></a>分片再次梳理</h2><ol><li>ES中, 每个 index 默认会物理地对应5个shard; 每个shard都是一个lucene实例, 也是ES中最小的工作单元, 它承载了index中的部分数据; </li><li>ES集群增加节点时, shard会自动在节点中均匀分布</li><li>shard 可以分为 <code>primary shard</code> 和 <code>replica shard</code><ul><li>index中每个document只存在于一个 <code>primary shard</code>(及该主分片的所有 <code>replica shard</code>)中, 不可能存在于多个 <code>primary shard</code> 中;</li><li><code>replica shard</code> 是 <code>primary shard</code> 的副本, 负责<strong>容灾</strong>以及<strong>分担请求负载</strong></li><li><code>primary shard</code> 的数量是在创建索引时就固定的(默认为5个主分片,每个主分片有1个副本分片), 而 <code>replica shard</code> 的数量可以随时修改</li><li><strong><code>primary shard</code> 不会和自己的 <code>replica shard</code> 放在同一个节点上; 多个相同的<code>replica shard</code>也不能放在同一个节点上; (否则该节点宕机, 主分片和副本分片就都丢失, 起不到容错作用)</strong><br>不过 <code>primary shard</code> 可以和其他 index 的<code>primary shard</code> 或 <code>replica shard</code>放在同一节点上;</li></ul></li><li>两个具有相同内容的分片在同一个节点上是起不到容灾作用的, 因此:<ul><li>对于每个索引, 必须保证 <code>ES节点数 &gt;= number_of_replicas+1</code>, 才能保证该索引的所有包含相同内容的分片都能成功被分配到不同的节点中;</li><li>对于任何一个索引, 只要有任何具有相同内容的分片在同一个节点上(相同主分片的两个副本分片在同一节点, 或者主分片和其某个副本分片在同一节点), 集群状态就不可能是green而是yellow;    </li></ul></li></ol><h2 id="数据路由"><a href="#数据路由" class="headerlink" title="数据路由"></a>数据路由</h2><ol><li><p>数据路由: 之前已经了解到, 在ES中, 每个index会对应多个物理分片, 所以index中的document也都会分布在各个分片上, 一个document也只可能存在于一个shard中, 那么document分配到哪个分片是如何决定的?</p><ul><li>路由算法: <code>hash(routing)%number_of_primary_shards</code> 决定了文档会被放在哪个 primary-shard 上;</li><li>默认情况下, 每次增删改查一个document的时候, 都会带过来一个routing, 默认就是document的id(可以手动指定,也可以自动生成)</li><li>也可以手动指定 routing: <code>put /index/type/id?routing=user_id</code><br><strong>手动指定 routing 是很有用的, 这样可以保证某一类document一定被路由到一个shard上去, 在后续进行应用级别的负载均衡, 以及提升批量读取的性能的时候, 是很有帮助的</strong> </li></ul></li><li><p>primary-shard数量不可变的谜底<br> 上面已经了解到了 document 被分配到哪个 primary-shard 是由<code>hash(routing)%number_of_primary_shards</code>决定, 但是如果在后续查询该文档的时候, 你变更了该索引的主分片数, 即number_of_primary_shards, 那么自然就找不到该文档了</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;通过之前的几篇文章应该大概了解了ES是什么, 它能做些什么, 并且简单尝试了一下它的几种查询方式, 聚合分析功能; 这些简
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://blog.renyimin.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch(一)" scheme="http://blog.renyimin.com/tags/Elasticsearch-%E4%B8%80/"/>
    
  </entry>
  
  <entry>
    <title>08. ES 乐观锁并发控制</title>
    <link href="http://blog.renyimin.com/2018/06/16/elasticsearch/2018-06-16-08/"/>
    <id>http://blog.renyimin.com/2018/06/16/elasticsearch/2018-06-16-08/</id>
    <published>2018-06-16T05:21:07.000Z</published>
    <updated>2018-11-09T03:45:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li><p>悲观锁: </p><ul><li>优点: 方便, 直接, 对应用程序来说不需要做额外的操作(比如重试之类的操作)</li><li>缺点: 同一时间只有一个线程对数据做操作, 并发能力很低</li></ul></li><li><p>乐观锁: </p><ul><li>优点: 比悲观锁的并发能力要高</li><li>缺点: 应用程序在提交时需要对比版本号, 然后可能还需要做一些额外的重试工作;</li></ul></li><li><p>es是使用乐观锁进行并发控制的: 主要是为了防止<strong>写覆盖</strong>问题</p><ul><li>首先乐观锁是不会对数据进行加锁的, 因此可以允许多个线程同时对数据进行读写操作</li><li>当多个线程同时对es中的数据进行写操作时, es会对当前文档的version版本号进行检查, 看是否与你写操作时传递的version一致, 一致的话, 则可以写<br>如果写时发现version版本号不同, 则表示数据被其他线程修改过, 此时写操作就会失败;<br>(当然, 后续要看RD想做什么了, 如果类似减库存的操作的话, 如果操作失败, 可以重试 进行库存判断, 可以的话继续做递减操作)</li></ul></li></ol><h2 id="es内部版本号-并发控制"><a href="#es内部版本号-并发控制" class="headerlink" title="es内部版本号 并发控制"></a>es内部版本号 并发控制</h2><ol><li><p>es内部是基于 <code>_version</code>元数据 来进行乐观锁并发控制的</p><ul><li>模拟两个线程同时对一条 <code>version</code> 为1数据做修改</li><li><p>线程1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/1</span><br><span class="line"># 更改部分字段即可</span><br><span class="line">POST /products/computer/1/_update</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;: &#123;</span><br><span class="line">    &quot;name&quot; : &quot;线程1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 结果该文档的version已经变为2了</span><br></pre></td></tr></table></figure></li><li><p>线程2基于version=1去对文档做修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 更改部分字段即可</span><br><span class="line">POST /products/computer/1/_update?version=1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;: &#123;</span><br><span class="line">    &quot;name&quot; : &quot;线程2&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 结果发现更新失败, 因为当前传递的 version=1 和 文档中的version=2 不匹配</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="ES外部版本号-并发控制"><a href="#ES外部版本号-并发控制" class="headerlink" title="ES外部版本号 并发控制"></a>ES外部版本号 并发控制</h2><ol><li><p>另外, es还提供了一个功能, 就是你可以不用它内部提供的 _version 版本号来进行并发控制, 而是基于自己维护的一个版本号来进行并发控制</p><ul><li>比如你的数据之前是在mysql中的, 本身应用程序也在mysql中维护了一个版本号(使用已有的规则生成的), 此时进行乐观锁并发控制的时候, 你可以选择不去使用es内部的_version来进行控制, 而是用自己维护的version来进行并发控制</li><li>比如 <code>version=1&amp;version_type=external</code></li><li>注意: 外部版本号和内部版本号唯一的区别就是:<br>内部版本号_version只有当你提供的version和es中当前文档的version完全一样时, 才可以进行修改, 不一样就报错<br>而外部版本号则是只有当你提供的version比es中当前文档的version大的时候, 才能完成修改 </li></ul></li><li><p>模拟两个线程同时对一条 <code>version</code> 为1数据做修改</p><ul><li><p>线程1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/2</span><br><span class="line"># 更改部分字段即可</span><br><span class="line">POST /products/computer/2/_update</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;: &#123;</span><br><span class="line">    &quot;name&quot; : &quot;线程1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 结果该文档的version已经变为2了</span><br></pre></td></tr></table></figure></li><li><p>线程2基于version=1去对文档做修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 更改部分字段即可</span><br><span class="line">POST /products/computer/2/_update?version=1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;: &#123;</span><br><span class="line">    &quot;name&quot; : &quot;线程2&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结果发现更新失败, 提示说 <strong>update 操作不支持外部版本号!</strong></p></li><li>但是使用 <code>PUT</code> 尝试后发现生效, 当线程2基于版本1,2都不行, 不许大于2才行</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;悲观锁: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点: 方便, 直接, 对应用程序来说不需要做额外的操作(比如重试之类的操作)&lt;/l
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://blog.renyimin.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch(一)" scheme="http://blog.renyimin.com/tags/Elasticsearch-%E4%B8%80/"/>
    
  </entry>
  
  <entry>
    <title>07. ES 批量操作 mget, bulk</title>
    <link href="http://blog.renyimin.com/2018/06/10/elasticsearch/2018-06-10-07/"/>
    <id>http://blog.renyimin.com/2018/06/10/elasticsearch/2018-06-10-07/</id>
    <published>2018-06-10T12:09:13.000Z</published>
    <updated>2018-11-09T03:45:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mget-批量查询"><a href="#mget-批量查询" class="headerlink" title="mget 批量查询"></a>mget 批量查询</h2><ol><li>批量查询可以只发送一次网络请求, 返回多条查询结果, 能大大缩减网络请求的性能开销</li><li>练习 : <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /_mget</span><br><span class="line">&#123;</span><br><span class="line">  &quot;docs&quot; : [</span><br><span class="line">    &#123;&quot;_index&quot;:&quot;products&quot;,&quot;_type&quot;:&quot;computer&quot;,&quot;_id&quot;:1&#125;,</span><br><span class="line">    &#123;&quot;_index&quot;:&quot;products&quot;,&quot;_type&quot;:&quot;computer&quot;,&quot;_id&quot;:2&#125;,</span><br><span class="line">    &#123;&quot;_index&quot;:&quot;blogs&quot;,&quot;_type&quot;:&quot;php&quot;,&quot;_id&quot;:1&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="bulk"><a href="#bulk" class="headerlink" title="bulk"></a>bulk</h2><ol><li><p>语法: 每个操作要两个json串, 语法如下:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;action&quot;:&#123;&quot;metadata&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;data&quot;&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以执行的操作类型如:</p><ul><li>delete: 删除一个文档, 只要一个json串就可以了</li><li>create: <code>PUT /index/type/id/_create</code> 创建, 存在会报错</li><li>index: 即普通的 <code>put</code> 操作, 可以是创建也可以是全量替换文档</li><li>update: 执行部分字段更新</li></ul></li><li><p>练习:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">DELETE /products</span><br><span class="line">PUT /products/computer/1    # 先创建一个文档</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;lenovo&quot;,</span><br><span class="line">  &quot;desc&quot; : &quot;lianxiang diannao chaobao&quot;,</span><br><span class="line">  &quot;price&quot; : 4500,</span><br><span class="line">  &quot;tag&quot; : [&quot;jieneng&quot;, &quot;xuhang&quot;, &quot;chaobao&quot;] </span><br><span class="line">&#125;</span><br><span class="line">GET /products/computer/_search</span><br><span class="line">POST /products/_bulk</span><br><span class="line">&#123;&quot;delete&quot; : &#123;&quot;_type&quot; : &quot;computer&quot;, &quot;_id&quot; : 1&#125;&#125;  # 删除id为1的文档 (1行json即可)</span><br><span class="line">&#123;&quot;create&quot; : &#123;&quot;_type&quot; : &quot;computer&quot;, &quot;_id&quot; : 2&#125;&#125;  # 创建id为2的文档 (2行json)</span><br><span class="line">&#123;&quot;test_field&quot; : &quot;_bulk-create-test2&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot; : &#123;&quot;_type&quot; : &quot;computer&quot;&#125;&#125;              # 创建一个文档 (es生成id, 2行json)</span><br><span class="line">&#123;&quot;test_field&quot; : &quot;_bulk-index-test3&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot; : &#123;&quot;_type&quot; : &quot;computer&quot;, &quot;_id&quot; : 3&#125;&#125;   # 创建一个id为3的文档 (2行json)</span><br><span class="line">&#123;&quot;test_field&quot; : &quot;_bulk-index-test3&quot;, &quot;test_field2&quot; : &quot;_bulk-index-test3&quot;&#125;</span><br><span class="line">&#123;&quot;update&quot; : &#123;&quot;_type&quot; : &quot;computer&quot;, &quot;_id&quot; : 3, &quot;_retry_on_conflict&quot;: 3 &#125;&#125;    # 更改id为3的文档中的test_field字段</span><br><span class="line">&#123;&quot;doc&quot; : &#123;&quot;test_field&quot; : &quot;_bulk-index-update-test3&quot;&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>bulk操作中, 任何一个操作失败, 不会影响其他的操作, 但是在返回结果里会有异常日志</p></li><li><p>bulk的请求会被加载到内存中, 所以如果太大的话, 性能反而会下降, 因此需要通过反复测试来获取一个比较合理的bulk size, 一般从1000~5000条数据开始尝试增加数据; 如果看大小的话, 最好在5-15M之间;         </p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;mget-批量查询&quot;&gt;&lt;a href=&quot;#mget-批量查询&quot; class=&quot;headerlink&quot; title=&quot;mget 批量查询&quot;&gt;&lt;/a&gt;mget 批量查询&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;批量查询可以只发送一次网络请求, 返回多条查询结果, 能大大缩减网络请求
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://blog.renyimin.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch(一)" scheme="http://blog.renyimin.com/tags/Elasticsearch-%E4%B8%80/"/>
    
  </entry>
  
  <entry>
    <title>06. 提前了解查询相关知识点概要, 练习</title>
    <link href="http://blog.renyimin.com/2018/06/10/elasticsearch/2018-06-10-06/"/>
    <id>http://blog.renyimin.com/2018/06/10/elasticsearch/2018-06-10-06/</id>
    <published>2018-06-10T06:36:57.000Z</published>
    <updated>2018-11-09T03:45:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="提前接触ES的查询和过滤"><a href="#提前接触ES的查询和过滤" class="headerlink" title="提前接触ES的查询和过滤"></a>提前接触ES的查询和过滤</h2><ol><li><p>在es中检索文档时候, 对文档的筛选分为 查询和过滤, 这两种方式是不太一样的, 现在只用先简单了解到</p><ul><li>ES中的 <code>结构化检索</code>(精确类型字段的检索) 一般会被放到filter过滤语句中, 不会进行分词和相关度排名, 但会对过滤进行缓存</li><li>而 <code>全文检索</code>(全文类型字段的检索) 一般用查询语句进行筛选, 全文检索会进行分词和相关度排名</li></ul></li><li><p>练习, 搜索商品desc字段中包含 ‘diannao’, 并且售价大于5000的商品</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot; : &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;desc&quot;:&quot;diannao&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;range&quot;: &#123;</span><br><span class="line">          &quot;price&quot; : &#123;&quot;gt&quot;: 5000&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="full-text-检索"><a href="#full-text-检索" class="headerlink" title="full-text 检索"></a>full-text 检索</h2><ol><li><p>ES可以进行全文检索并可以进行相关度排名</p></li><li><p>重新准备数据</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">DELETE /products</span><br><span class="line">PUT /products/computer/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;lenovo&quot;,</span><br><span class="line">  &quot;desc&quot; : &quot;lianxiang diannao chaobao&quot;,</span><br><span class="line">  &quot;price&quot; : 4500,</span><br><span class="line">  &quot;tag&quot; : [&quot;jieneng&quot;, &quot;xuhang&quot;, &quot;chaobao&quot;] </span><br><span class="line">&#125;</span><br><span class="line">PUT /products/computer/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;acer&quot;,</span><br><span class="line">  &quot;desc&quot; : &quot;gaoqing hongji diannao&quot;,</span><br><span class="line">  &quot;price&quot; : 4870,</span><br><span class="line">  &quot;tag&quot; : [&quot;jieneng&quot;, &quot;chaobao&quot;, &quot;gaoqing&quot;] </span><br><span class="line">&#125;</span><br><span class="line">PUT /products/computer/3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;dell&quot;,</span><br><span class="line">  &quot;desc&quot; : &quot;daier chaoji diannao&quot;,</span><br><span class="line">  &quot;price&quot; : 5499,</span><br><span class="line">  &quot;tag&quot; : [&quot;shishang&quot;, &quot;gaoqing&quot;, &quot;gaoxingneng&quot;] </span><br><span class="line">&#125;</span><br><span class="line">POST /products/computer/</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;huawei&quot;,</span><br><span class="line">  &quot;desc&quot; : &quot;china best diannao gaoqing&quot;,</span><br><span class="line">  &quot;price&quot; : 6080,</span><br><span class="line">  &quot;tag&quot; : [&quot;gaoxingneng&quot;, &quot;gaoqing&quot;, &quot;jieneng&quot;] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>练习, 全文检索</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;desc&quot;:&quot;gaoqing diannao&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>练习 全文高亮检索</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123;</span><br><span class="line">    &quot;match&quot; : &#123;</span><br><span class="line">      &quot;desc&quot;:&quot;gaoqing diannao&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;highlight&quot;: &#123;</span><br><span class="line">    &quot;fields&quot; : &#123;</span><br><span class="line">      &quot;desc&quot; : &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 2,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 4,</span><br><span class="line">    &quot;max_score&quot;: 0.5753642,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;products&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;computer&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;AWbE6HmlWC0s-aachNUv&quot;,</span><br><span class="line">        &quot;_score&quot;: 0.5753642,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;huawei&quot;,</span><br><span class="line">          &quot;desc&quot;: &quot;china best diannao gaoqing&quot;,</span><br><span class="line">          &quot;price&quot;: 6080,</span><br><span class="line">          &quot;tag&quot;: [</span><br><span class="line">            &quot;gaoxingneng&quot;,</span><br><span class="line">            &quot;gaoqing&quot;,</span><br><span class="line">            &quot;jieneng&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;highlight&quot;: &#123;</span><br><span class="line">          &quot;desc&quot;: [</span><br><span class="line">            &quot;china best &lt;em&gt;diannao&lt;/em&gt; &lt;em&gt;gaoqing&lt;/em&gt;&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="结构化精确检索"><a href="#结构化精确检索" class="headerlink" title="结构化精确检索"></a>结构化精确检索</h2><h2 id="phrase-search-短语搜索"><a href="#phrase-search-短语搜索" class="headerlink" title="phrase search(短语搜索)"></a>phrase search(短语搜索)</h2><ol><li><p>与全文索引不同, 全文索引会对你发送的 查询串 进行拆分(做分词处理), 然后去倒排索引中与之前在存储文档时分好的词项进行匹配, 只要你发送的查询内容拆分后, 有一个词能匹配到倒排索引中的词项, 该词项所对应的文档就可以返回;  </p></li><li><p>phrase search(短语搜索)则不会对你发送的 查询串 进行分词, 而是要求在指定查询的字段中必须包含和你发送的查询串一模一样的内容 才算是匹配, 否则该文档不能作为结果返回; </p></li><li><p><strong>短语搜索 和 结构化搜索还是不一样</strong></p><ul><li>结构化搜索是 你的查询串 和 指定的文档字段内容 是完全一致的, 查询串和字段本身都不会做分词, 一般该字段也是精确类型的字段类型;</li><li>而 短语搜索 则是, 你的 查询串 不会做分词, 但是你查询的字段可能会做分词, 你的查询串需要包含在 指定字段中;</li></ul></li><li><p>搜索商品desc字段中包含 ‘gaoqing diannao’短语 的文档</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 短语检索</span><br><span class="line">GET /products/computer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123;</span><br><span class="line">    &quot;match_phrase&quot; : &#123;</span><br><span class="line">      &quot;desc&quot;: &quot;diannao gaoqing&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果发现, 虽然还是查询的全文字段desc, 但是结果却只有一个</li></ul></li></ol><h2 id="提前了解ES统计语法"><a href="#提前了解ES统计语法" class="headerlink" title="提前了解ES统计语法"></a>提前了解ES统计语法</h2><ol><li><p>统计商品 每个tag下的商品数量, 即, 根据商品的tag进行分组</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;aggs&quot; : &#123;</span><br><span class="line">    &quot;group_by_tag&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;&quot;field&quot;:&quot;tag&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>初次运行报错</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;error&quot;: &#123;</span><br><span class="line">    &quot;root_cause&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;illegal_argument_exception&quot;,</span><br><span class="line">        &quot;reason&quot;: &quot;Fielddata is disabled on text fields by default. Set fielddata=true on [tag] in order to load fielddata in memory by uninverting the inverted index. Note that this can however use significant memory. Alternatively use a keyword field instead.&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;type&quot;: &quot;search_phase_execution_exception&quot;,</span><br><span class="line">    &quot;reason&quot;: &quot;all shards failed&quot;,</span><br><span class="line">    &quot;phase&quot;: &quot;query&quot;,</span><br><span class="line">    &quot;grouped&quot;: true,</span><br><span class="line">    &quot;failed_shards&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;shard&quot;: 0,</span><br><span class="line">        &quot;index&quot;: &quot;products&quot;,</span><br><span class="line">        &quot;node&quot;: &quot;eCgKpl8JRbqwL3QY0Vuz3A&quot;,</span><br><span class="line">        &quot;reason&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;illegal_argument_exception&quot;,</span><br><span class="line">          &quot;reason&quot;: &quot;Fielddata is disabled on text fields by default. Set fielddata=true on [tag] in order to load fielddata in memory by uninverting the inverted index. Note that this can however use significant memory. Alternatively use a keyword field instead.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot;: 400</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解决方案: 将文本field的 filedata 属性设置为true (现在不用知道这玩意儿, 先尽快解决, 看到聚合分析的预发和效果, 后面讲在详聊该问题)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT /products/_mapping/computer</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;tag&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">      &quot;fielddata&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重新执行统计语句, 发现返回中除了分析的结果, 还包含了查询的文档内容; 如果只想显示聚合分析的结果, 可以如下设置size为0:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot; : &#123;</span><br><span class="line">    &quot;group_by_tag&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;&quot;field&quot;:&quot;tag&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>练习, 针对名称中包含”china”的商品, 计算每个tag下的商品数</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot; : &#123;</span><br><span class="line">      &quot;desc&quot; : &quot;gaoqing&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_tag&quot; : &#123;</span><br><span class="line">      &quot;terms&quot; : &#123;&quot;field&quot;: &quot;tag&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>练习, 计算每个tag下商品的平均价格 (先分组, 再计算每组的平均值)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_tag&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;&quot;field&quot;: &quot;tag&quot;&#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;avg_by_price&quot; : &#123;</span><br><span class="line">          &quot;avg&quot; : &#123;&quot;field&quot;:&quot;price&quot;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 结果:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 5,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 16,</span><br><span class="line">    &quot;max_score&quot;: 0,</span><br><span class="line">    &quot;hits&quot;: []</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggregations&quot;: &#123;</span><br><span class="line">    &quot;group_by_tag&quot;: &#123;</span><br><span class="line">      &quot;doc_count_error_upper_bound&quot;: 0,</span><br><span class="line">      &quot;sum_other_doc_count&quot;: 0,</span><br><span class="line">      &quot;buckets&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;gaoqing&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 3,</span><br><span class="line">          &quot;avg_by_price&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 5483</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;jieneng&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 3,</span><br><span class="line">          &quot;avg_by_price&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 5150</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;chaobao&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 2,</span><br><span class="line">          &quot;avg_by_price&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 4685</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;gaoxingneng&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 2,</span><br><span class="line">          &quot;avg_by_price&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 5789.5</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;shishang&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 1,</span><br><span class="line">          &quot;avg_by_price&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 5499</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;xuhang&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 1,</span><br><span class="line">          &quot;avg_by_price&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 4500</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>练习, 计算每个tag下商品的平均价格, 并且按照平均价格进行排序 </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;:0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_tag&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;&quot;field&quot;:&quot;tag&quot;, &quot;order&quot;: &#123;&quot;avg_by_price&quot;:&quot;desc&quot;&#125;&#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;avg_by_price&quot;: &#123;</span><br><span class="line">          &quot;avg&quot;: &#123;&quot;field&quot;: &quot;price&quot;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 结果:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 3,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 16,</span><br><span class="line">    &quot;max_score&quot;: 0,</span><br><span class="line">    &quot;hits&quot;: []</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggregations&quot;: &#123;</span><br><span class="line">    &quot;group_by_tag&quot;: &#123;</span><br><span class="line">      &quot;doc_count_error_upper_bound&quot;: 0,</span><br><span class="line">      &quot;sum_other_doc_count&quot;: 0,</span><br><span class="line">      &quot;buckets&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;gaoxingneng&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 2,</span><br><span class="line">          &quot;avg_by_price&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 5789.5</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;shishang&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 1,</span><br><span class="line">          &quot;avg_by_price&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 5499</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;gaoqing&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 3,</span><br><span class="line">          &quot;avg_by_price&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 5483</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;jieneng&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 3,</span><br><span class="line">          &quot;avg_by_price&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 5150</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;chaobao&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 2,</span><br><span class="line">          &quot;avg_by_price&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 4685</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;xuhang&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 1,</span><br><span class="line">          &quot;avg_by_price&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 4500</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>练习, 按照指定的价格范围区间进行分组, 然后再每个分组内再按照tag进行分组, 最后在计算每组的平均价格</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;:0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_price_range&quot;: &#123;</span><br><span class="line">      &quot;range&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;price&quot;,</span><br><span class="line">        &quot;ranges&quot;: [</span><br><span class="line">          &#123;&quot;from&quot;:4500, &quot;to&quot;:5000&#125;,</span><br><span class="line">          &#123;&quot;from&quot;:5000, &quot;to&quot;:5500&#125;,</span><br><span class="line">          &#123;&quot;from&quot;:5500, &quot;to&quot;:6100&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;group_by_tags&quot;: &#123;</span><br><span class="line">          &quot;terms&quot;: &#123;&quot;field&quot;: &quot;tag&quot;&#125;,</span><br><span class="line">          &quot;aggs&quot;:&#123;</span><br><span class="line">            &quot;avg_by_price&quot;: &#123;</span><br><span class="line">              &quot;avg&quot;: &#123;&quot;field&quot;:&quot;price&quot;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 结果: </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 1,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 16,</span><br><span class="line">    &quot;max_score&quot;: 0,</span><br><span class="line">    &quot;hits&quot;: []</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggregations&quot;: &#123;</span><br><span class="line">    &quot;group_by_price_range&quot;: &#123;</span><br><span class="line">      &quot;buckets&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;4500.0-5000.0&quot;,</span><br><span class="line">          &quot;from&quot;: 4500,</span><br><span class="line">          &quot;to&quot;: 5000,</span><br><span class="line">          &quot;doc_count&quot;: 2,</span><br><span class="line">          &quot;group_by_tags&quot;: &#123;</span><br><span class="line">            &quot;doc_count_error_upper_bound&quot;: 0,</span><br><span class="line">            &quot;sum_other_doc_count&quot;: 0,</span><br><span class="line">            &quot;buckets&quot;: [</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;key&quot;: &quot;chaobao&quot;,</span><br><span class="line">                &quot;doc_count&quot;: 2,</span><br><span class="line">                &quot;avg_by_price&quot;: &#123;</span><br><span class="line">                  &quot;value&quot;: 4685</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;key&quot;: &quot;jieneng&quot;,</span><br><span class="line">                &quot;doc_count&quot;: 2,</span><br><span class="line">                &quot;avg_by_price&quot;: &#123;</span><br><span class="line">                  &quot;value&quot;: 4685</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;key&quot;: &quot;gaoqing&quot;,</span><br><span class="line">                &quot;doc_count&quot;: 1,</span><br><span class="line">                &quot;avg_by_price&quot;: &#123;</span><br><span class="line">                  &quot;value&quot;: 4870</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;key&quot;: &quot;xuhang&quot;,</span><br><span class="line">                &quot;doc_count&quot;: 1,</span><br><span class="line">                &quot;avg_by_price&quot;: &#123;</span><br><span class="line">                  &quot;value&quot;: 4500</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;5000.0-5500.0&quot;,</span><br><span class="line">          &quot;from&quot;: 5000,</span><br><span class="line">          &quot;to&quot;: 5500,</span><br><span class="line">          &quot;doc_count&quot;: 1,</span><br><span class="line">          &quot;group_by_tags&quot;: &#123;</span><br><span class="line">            &quot;doc_count_error_upper_bound&quot;: 0,</span><br><span class="line">            &quot;sum_other_doc_count&quot;: 0,</span><br><span class="line">            &quot;buckets&quot;: [</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;key&quot;: &quot;gaoqing&quot;,</span><br><span class="line">                &quot;doc_count&quot;: 1,</span><br><span class="line">                &quot;avg_by_price&quot;: &#123;</span><br><span class="line">                  &quot;value&quot;: 5499</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;key&quot;: &quot;gaoxingneng&quot;,</span><br><span class="line">                &quot;doc_count&quot;: 1,</span><br><span class="line">                &quot;avg_by_price&quot;: &#123;</span><br><span class="line">                  &quot;value&quot;: 5499</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;key&quot;: &quot;shishang&quot;,</span><br><span class="line">                &quot;doc_count&quot;: 1,</span><br><span class="line">                &quot;avg_by_price&quot;: &#123;</span><br><span class="line">                  &quot;value&quot;: 5499</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;5500.0-6100.0&quot;,</span><br><span class="line">          &quot;from&quot;: 5500,</span><br><span class="line">          &quot;to&quot;: 6100,</span><br><span class="line">          &quot;doc_count&quot;: 1,</span><br><span class="line">          &quot;group_by_tags&quot;: &#123;</span><br><span class="line">            &quot;doc_count_error_upper_bound&quot;: 0,</span><br><span class="line">            &quot;sum_other_doc_count&quot;: 0,</span><br><span class="line">            &quot;buckets&quot;: [</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;key&quot;: &quot;gaoqing&quot;,</span><br><span class="line">                &quot;doc_count&quot;: 1,</span><br><span class="line">                &quot;avg_by_price&quot;: &#123;</span><br><span class="line">                  &quot;value&quot;: 6080</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;key&quot;: &quot;gaoxingneng&quot;,</span><br><span class="line">                &quot;doc_count&quot;: 1,</span><br><span class="line">                &quot;avg_by_price&quot;: &#123;</span><br><span class="line">                  &quot;value&quot;: 6080</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;key&quot;: &quot;jieneng&quot;,</span><br><span class="line">                &quot;doc_count&quot;: 1,</span><br><span class="line">                &quot;avg_by_price&quot;: &#123;</span><br><span class="line">                  &quot;value&quot;: 6080</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;提前接触ES的查询和过滤&quot;&gt;&lt;a href=&quot;#提前接触ES的查询和过滤&quot; class=&quot;headerlink&quot; title=&quot;提前接触ES的查询和过滤&quot;&gt;&lt;/a&gt;提前接触ES的查询和过滤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在es中检索文档时候, 对文档的筛选分为 
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://blog.renyimin.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch(一)" scheme="http://blog.renyimin.com/tags/Elasticsearch-%E4%B8%80/"/>
    
  </entry>
  
  <entry>
    <title>05. ES的搜索方式 Query-string 与 query DSL</title>
    <link href="http://blog.renyimin.com/2018/06/10/elasticsearch/2018-06-10-05/"/>
    <id>http://blog.renyimin.com/2018/06/10/elasticsearch/2018-06-10-05/</id>
    <published>2018-06-10T03:05:39.000Z</published>
    <updated>2018-11-09T03:45:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Query-string-搜索"><a href="#Query-string-搜索" class="headerlink" title="Query-string 搜索"></a>Query-string 搜索</h2><ol><li><p>之所以叫 query-string, 是因为search的参数都是以http请求的 query-string 来传递的</p></li><li><p>练习, 搜索全部商品 <code>GET /products/computer/_search</code></p></li><li><p>练习, 搜索商品desc字段中包含 ‘diannao’, 并按照售价排序 <code>GET /products/computer/_search?q=desc:diannao&amp;sort=price:desc</code></p></li><li><p>query-string这种搜索比较适合在命令行使用curl快速地发一个请求来检索信息, 如果查询比较复杂, 一般不太适用, 正式开发中比较少用; </p></li></ol><h2 id="query-DSL"><a href="#query-DSL" class="headerlink" title="query DSL"></a>query DSL</h2><ol><li><p>DSL(Domain Specified Language): 领域特定语言 (这里即 ES的领域特定语言), 是在HTTP的请求体中通过json构建查询语法, 比较方便, 可以构建各种复杂语法;</p></li><li><p>练习, 查询所有商品</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>练习, 搜索商品desc字段中包含 ‘diannao’, 并按照售价排序</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;desc&quot;:&quot;diannao&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot; : [</span><br><span class="line">    &#123;&quot;price&quot; : &quot;desc&quot;&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>练习, 分页查询商品</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;from&quot; : 0,</span><br><span class="line">  &quot;size&quot; : 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>练习, 指定需要返回的字段 (使用<code>_source</code>元数据: 可以指定返回哪些field)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/1?_source=name,price</span><br></pre></td></tr></table></figure></li></ol><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot; : [&quot;name&quot;, &quot;desc&quot;, &quot;tag&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><ol><li>query DSL 可以在HTTP请求体中构建非常复杂的查询语句, 所以比较常用; 更多复杂用法后面会聊到;</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Query-string-搜索&quot;&gt;&lt;a href=&quot;#Query-string-搜索&quot; class=&quot;headerlink&quot; title=&quot;Query-string 搜索&quot;&gt;&lt;/a&gt;Query-string 搜索&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;之所以叫 quer
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://blog.renyimin.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch(一)" scheme="http://blog.renyimin.com/tags/Elasticsearch-%E4%B8%80/"/>
    
  </entry>
  
  <entry>
    <title>04. 简单尝试 CURD</title>
    <link href="http://blog.renyimin.com/2018/06/08/elasticsearch/2018-06-08-04/"/>
    <id>http://blog.renyimin.com/2018/06/08/elasticsearch/2018-06-08-04/</id>
    <published>2018-06-08T13:33:46.000Z</published>
    <updated>2018-11-09T03:45:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cat-Api"><a href="#Cat-Api" class="headerlink" title="Cat Api"></a>Cat Api</h2><ol><li><p>ES提供的 <code>Cat Api</code> 可以用来查看 集群当前状态, 涉及到 <code>shard</code>/<code>node</code>/<code>cluster</code> 几个层次</p></li><li><p>尝试使用 <code>GET /_cat/health?v</code> 查看 <code>时间戳</code>、<code>集群名称</code>、<code>集群状态</code>、<code>集群中节点的数量</code> 等等</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">epoch      timestamp cluster       status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent</span><br><span class="line">1540815645 20:20:45  elasticsearch yellow          1         1      6   6    0    0        6             0                  -                 50.0%</span><br></pre></td></tr></table></figure><p> 返回信息 和 集群健康API(<code>GET _cluster/health</code>) 返回都一样</p></li></ol><h2 id="索引文档"><a href="#索引文档" class="headerlink" title="索引文档"></a>索引文档</h2><p>ES 中可以使用 <strong>POST</strong> 或 <strong>PUT</strong> 来索引一个新文档, 熟悉HTTP协议的话, 应该知道 PUT是幂等的, 而POST是非幂等的, ES也遵循了这一点</p><h3 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h3><ol><li><strong>PUT</strong> 创建文档的时候需要手动设定文档ID (类似已知id, 进行修改) </li><li>如果文档不存在, 则会创建新文档; 如果文档存在, 则会覆盖整个文档 (所以需要留意)</li><li>虽然使用PUT可以防止POST非幂等引起的多次创建, 但也要留意使用PUT带来的文档覆盖问题</li><li><p>练习:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 此处创建一个 索引为 products , 类型为 computer, 文档ID为1的商品 </span><br><span class="line">PUT /products/computer/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;lenovo&quot;,</span><br><span class="line">  &quot;desc&quot; : &quot;lianxiang diannao chaobao&quot;,</span><br><span class="line">  &quot;price&quot; : 4500,</span><br><span class="line">  &quot;tag&quot; : [&quot;jieneng&quot;, &quot;xuhang&quot;, &quot;chaobao&quot;] </span><br><span class="line">&#125;</span><br><span class="line"># 返回</span><br><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot;: &quot;products&quot;, </span><br><span class="line">  &quot;_type&quot;: &quot;computer&quot;,</span><br><span class="line">  &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">  &quot;_version&quot;: 1,</span><br><span class="line">  &quot;result&quot;: &quot;created&quot;,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 2, # 表示应该写入的有两个分片(1个主分片和1个副本分片, 但注意: 这里代表的可不是总分片数, 显然es的索引默认对应5个主分片, 每个主分片又对应一个副本分片, 总共会有10个分片)  </span><br><span class="line">    &quot;successful&quot;: 1, # 表示成功写入一个分片, 即写入了主分片, 但是副本分片并未写入, 因为目前只启了一个节点</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;created&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src="/img/es/products-computer.png"></p></li><li>另外, 注意: 使用<code>PUT</code>创建文档时, 如果不指定ID, 则会报错</li></ol><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><ol><li><p><strong>POST</strong> 创建文档时不需要手动传递文档ID, es会自动生成全局唯一的文档ID</p></li><li><p>练习</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">POST /products/computer/</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;huawei&quot;,</span><br><span class="line">  &quot;desc&quot; : &quot;china best diannao gaoqing&quot;,</span><br><span class="line">  &quot;price&quot; : 6080,</span><br><span class="line">  &quot;tag&quot; : [&quot;gaoxingneng&quot;, &quot;gaoqing&quot;, &quot;jieneng&quot;] </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 返回, 可以看到文档ID是自动生成的, 其他字段和使用`PUT`时返回的信息相同</span><br><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot;: &quot;products&quot;,</span><br><span class="line">  &quot;_type&quot;: &quot;computer&quot;,</span><br><span class="line">  &quot;_id&quot;: &quot;AWa_MgAhWC0s-aachNUS&quot;,</span><br><span class="line">  &quot;_version&quot;: 1,</span><br><span class="line">  &quot;result&quot;: &quot;created&quot;,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 2,</span><br><span class="line">    &quot;successful&quot;: 1,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;created&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="检索文档"><a href="#检索文档" class="headerlink" title="检索文档"></a>检索文档</h2><p>先尝试最简单的一种 query-string 查询方式: <code>GET /products/computer/_search</code> : 查询/products/computer/下的所有文档</p><h2 id="更新文档-PUT、POST"><a href="#更新文档-PUT、POST" class="headerlink" title="更新文档 PUT、POST"></a>更新文档 PUT、POST</h2><ol><li><p><strong>PUT</strong> 对整个文档进行覆盖更新</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT /products/computer/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;acer-hongji&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>partial update: 如果只是想更新文档的部分指定字段, 可以使用 <code>POST</code> 结合 <code>_update</code>  :  (<strong>partial update内置乐观锁并发控制</strong>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /products/computer/2/_update?retry_on_conflict=5</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;: &#123;</span><br><span class="line">    &quot;name&quot; : &quot;acer-hongji-鸿基&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里注意一下_update的内部机制其实是: es先获取整个文档, 然后更新部分字段, 最后老文档标记为deleted, 然后创建新文档<br>此时在标记老文档为deleted时就可能会出现并发问题, 如果线程1抢先一步将老文档标注为deleted, 那么线程2在将新文档标注为deleted时就会失败(version内部乐观锁机制)<br>此时在es内部会做处理, 他内部完成了对乐观锁的实现, 如果失败后, 其实也是进行重试, 你可以手动传递 <code>retry_on_conflict</code>参数来决定其内部的重试次数</p></li><li><p><strong>PUT如何只创建不替换</strong>: 由于创建文档与全量替换文档的语法是一样的, 都是 <code>PUT</code>, 而有时我们只是想新建文档, 不想替换文档</p><ul><li>可以使用 <code>op_type=create</code> 来说明此命令只是用来执行创建操作的<br><code>PUT /index/type/id?op_type=create</code> 或 <code>PUT /index/type/id/_create</code></li><li>可以看到, 此时, 如果文档已经存在, 会进行报错提示冲突, 而不会帮你直接替换<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT /products/computer/1?op_type=create</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;huawei create&quot;,</span><br><span class="line">  &quot;desc&quot; : &quot;china best diannao gaoqing create&quot;,</span><br><span class="line">  &quot;price&quot; : 6080,</span><br><span class="line">  &quot;tag&quot; : [&quot;gaoxingneng&quot;, &quot;gaoqing&quot;, &quot;jieneng&quot;, &quot;create&quot;] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h2><ol><li><p><strong>ES的文档替换</strong>: 上面已经了解过, 其实就是<code>PUT</code>创建文档, 如果传递的文档id不存在, 就是创建, 如果文档id已经存在, 则是替换操作;<br> 注意: es在做文档的替换操作时, 会将老的document标记为deleted, 然后新增我们给定的那个document, 当后续创建越来越多的document时, es会在适当的时机在后台自动删除标记为delete的document;</p></li><li><p><strong>ES的删除</strong>: 不会直接进行物理删除, 而是在数据越来越多的时候, es在合适的时候在后台进行删除</p></li><li><p>练习:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DELETE /products/computer/2</span><br><span class="line"># 返回</span><br><span class="line">&#123;</span><br><span class="line">  &quot;found&quot;: true,</span><br><span class="line">  &quot;_index&quot;: &quot;products&quot;,</span><br><span class="line">  &quot;_type&quot;: &quot;computer&quot;,</span><br><span class="line">  &quot;_id&quot;: &quot;2&quot;,</span><br><span class="line">  &quot;_version&quot;: 6,    </span><br><span class="line">  &quot;result&quot;: &quot;deleted&quot;,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 2,</span><br><span class="line">    &quot;successful&quot;: 1,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Cat-Api&quot;&gt;&lt;a href=&quot;#Cat-Api&quot; class=&quot;headerlink&quot; title=&quot;Cat Api&quot;&gt;&lt;/a&gt;Cat Api&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ES提供的 &lt;code&gt;Cat Api&lt;/code&gt; 可以用来查看 集群当前状态,
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://blog.renyimin.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch(一)" scheme="http://blog.renyimin.com/tags/Elasticsearch-%E4%B8%80/"/>
    
  </entry>
  
  <entry>
    <title>03. ES 一些基本概念</title>
    <link href="http://blog.renyimin.com/2018/06/08/elasticsearch/2018-06-08-03/"/>
    <id>http://blog.renyimin.com/2018/06/08/elasticsearch/2018-06-08-03/</id>
    <published>2018-06-08T10:23:07.000Z</published>
    <updated>2018-11-09T03:45:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="近实时"><a href="#近实时" class="headerlink" title="近实时"></a>近实时</h2><ol><li>从文档被索引到可以被检索会有轻微延时, 约1s</li></ol><h2 id="Index-索引-n"><a href="#Index-索引-n" class="headerlink" title="Index(索引 n)"></a>Index(索引 n)</h2><ol><li>这里的Index是个名词, 类似于传统RDS的一个数据库, 是存储document的地方</li><li>一个Index可以包含多个 type (索引的复数词为 indices 或 indexes) </li><li>index 名称必须是小写, 不能用下划线开头, 不能包含逗号</li><li>一般将不同的项目数据放到不同的index中 </li><li><p>每个index会物理地对应多个分片, 这样, 每个项目都有自己的分片, 互相物理地独立开, 如果有项目是做复杂运算的, 也不会影响其他项目的分片</p></li><li><p>索引(v) : ES中的还会提到 <strong>索引一个文档</strong>, 这里的 索引 是动词, 存储文档并建立倒排索引的意思;</p></li></ol><h2 id="Type-类型"><a href="#Type-类型" class="headerlink" title="Type(类型)"></a>Type(类型)</h2><ol><li>一个Index中可以有多个type</li><li>代表document属于index中的哪个类别(type 可以对同一个index中不同类型的document进行逻辑上的划分,可以粗略地理解成传统数据库中的数据表?)</li><li><p>名称可以是大小写, 不能用下划线开头, 不能包含逗号</p></li><li><p>注意: <strong>type是对index做的逻辑划分, 而shard是对index做的物理划分</strong></p></li></ol><h2 id="Document-文档"><a href="#Document-文档" class="headerlink" title="Document(文档)"></a>Document(文档)</h2><ol><li><p>ES中的最小数据单元, ES使用 JSON 作为文档的序列化格式 (ES中的文档可以通俗地理解成传统数据库表中的一条记录)</p></li><li><p><code>_id</code>: 文档id 可以手动指定, 也可以由es为我们生成;</p><ul><li><p>手动指定id: 根据应用情况来判断是否符合手动指定 document id, 一般如果是从某些其他的系统中导入数据到es, 就会采用这种方式, 就是使用系统中已有的数据的唯一标识作为es中的document的id;<br>比如从数据库中迁移数据到es中, 就比较适合采用数据在数据库中已有的primary key;<br><code>put /index/type/id</code></p></li><li><p>自动生成id: 如果说我们目前要做的系统主要就是将数据存储到es中, 数据产生出来以后直接就会存放到es, 所以不需要手动指定document id的形式, 可以直接让es自动生成id即可;<br><code>post /index/type</code><br>es自动生成的id长度为20个字符, URL安全, base64编码, <strong>GUID</strong>, <strong>分布式并行生成时, es会通过全局id来保证不会发生冲突</strong>;</p></li></ul></li></ol><h2 id="Cluster-集群"><a href="#Cluster-集群" class="headerlink" title="Cluster(集群)"></a>Cluster(集群)</h2><ol><li>集群是由一个或者多个拥有相同 <code>cluster.name</code> 配置项的节点组成, 一个ES节点属于哪个集群, 是由其配置中的 <code>cluster.name</code> 决定的; <ul><li>节点启动后, 其默认name是<code>elasticsearch</code>, 因此如果在一个机器中启动一堆节点, 那它们会自动组成一个es集群(因为它们的<code>cluster.name</code>都是<code>elasticsearch</code>)</li><li>这些节点共同承担数据和负载的压力; 当有节点加入集群中或者从集群中移除节点时, 集群将会重新平均分布所有的数据;</li></ul></li></ol><h2 id="Shard-分片"><a href="#Shard-分片" class="headerlink" title="Shard(分片):"></a>Shard(分片):</h2><ol><li><p><strong>type是对index做的逻辑划分, 而shard是对index做的物理划分</strong></p></li><li><p>一个分片就是一个 Lucene 的实例, 它是一个底层的工作单元, 其本身就是一个完整的搜索引擎; </p></li><li><p>分片是数据的容器, 文档其实是保存在分片中的: 当我们将很多条document数据添加到索引中时, 索引实际上是指向一个或者多个<strong>物理分片</strong>; 因此, 你要存储到索引中的数据其实会被分发到不同的分片中, 而每个分片也仅保存了整个索引中的一部分文档;</p></li><li><p>当你的集群规模扩大或者缩小时(即增加或减少节点时), ES 会自动的在各节点中迁移分片, 而数据是存放在shard中的, 所以最终会使得数据仍然均匀分布在集群里</p></li><li><p>shard 可以分为 <code>primary shard</code>(主分片), <code>replica shard</code>(副本分片)</p><ul><li><code>replica shard</code> 可以容灾, 水平扩容节点时, 还可以自动分配来提高系统负载</li><li>默认情况下, 每个index有5个<code>parimary shard</code>, 而每个<code>parimary shard</code>都有1个<code>replica shard</code>, 即每个index默认会对应10个shard</li><li>另外, ES规定了, 每个index的 <code>parimary shard</code> 和 <code>replica shard</code> 不能在全部都在同一个节点上, 相同内容的 <code>replica shard</code> 也不能在同一节点上, 不然起不到容灾作用;</li></ul></li></ol><h2 id="集群状态-yellow"><a href="#集群状态-yellow" class="headerlink" title="集群状态 yellow"></a>集群状态 yellow</h2><ol><li><p>在ES中, 每个索引可能对应多个主分片, 每个主分片也都可能对应多个副本分片</p></li><li><p><strong>对于每个索引, 要保证不会导致es集群为 yellow, 需要注意</strong>: <code>es节点数 &gt;= number_of_replicas+1</code></p><pre><code> 当索引的 `number_of_replicas=1` 时, 无论 `number_of_shards` 为多少, 2个节点 (`es节点数 = number_of_replicas+1`) 就可以保证集群是 green; 当索引的 `number_of_replicas&gt;1` 时, 只有当 `es节点数 = number_of_replicas+1` 时, 集群才会变为green;</code></pre></li><li>对于任何一个索引, 由于任何具有相同内容的分片(相同主分片的两个副本分片, 或者主分片和其某个副本分片)不会被放在同一个节点上, 所以如果节点数量不够的话, 有些replica-shard分片会处于未分配状态, 集群状态就不可能是green而是yellow;<br> 比如索引 test 有 3个主分片, 每个主分片对应3个副本分片(该索引总共 3+3*3=12 个分片), 那么至少得4(<code>number_of_replicas+1</code>)个节点, 才能保证每个节点上都不会出现具有相同内容的分片, 即可以保证集群是green;</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;近实时&quot;&gt;&lt;a href=&quot;#近实时&quot; class=&quot;headerlink&quot; title=&quot;近实时&quot;&gt;&lt;/a&gt;近实时&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;从文档被索引到可以被检索会有轻微延时, 约1s&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Index-索引-n&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://blog.renyimin.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch(一)" scheme="http://blog.renyimin.com/tags/Elasticsearch-%E4%B8%80/"/>
    
  </entry>
  
  <entry>
    <title>02. ES 版本选择及简单安装</title>
    <link href="http://blog.renyimin.com/2018/06/08/elasticsearch/2018-06-08-02/"/>
    <id>http://blog.renyimin.com/2018/06/08/elasticsearch/2018-06-08-02/</id>
    <published>2018-06-08T06:25:01.000Z</published>
    <updated>2018-11-09T03:45:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h2><ol><li><p>ES 的版本迭代比较快, 目前(06/2018)为止, 已经到6.X了, 可参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/index.html" target="_blank" rel="noopener">官网文档</a>, 可能很多公司还在用2.X, 或者刚切到5.X; </p></li><li><p>此处之所以选用5.5.3来学习调研, 主要是因为公司选用的阿里云服务提供的是 ES 5.5.3版本 (所以你在选择版本时, 也可以根据 自建、购买云服务 来决定)  </p></li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>安装Java, 推荐使用Java 8 : <code>yum install java-1.8.0-openjdk* -y</code></p></li><li><p>ES <a href="https://www.elastic.co/downloads/past-releases" target="_blank" rel="noopener">下载</a></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/local/src</span><br><span class="line">$ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.3.tar.gz</span><br><span class="line">$ tar -zxvf elasticsearch-5.5.3.tar.gz</span><br><span class="line">$ cd elasticsearch-5.5.3</span><br><span class="line">$ ls</span><br><span class="line">bin  config  lib  LICENSE.txt  modules  NOTICE.txt  plugins  README.textile</span><br></pre></td></tr></table></figure></li><li><p>启动 ES: es不能使用root权限启动, 所以需要创建新用户</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ adduser es</span><br><span class="line">$ passwd es</span><br><span class="line">$ chown -R es /usr/local/src/elasticsearch-5.5.3/</span><br><span class="line">$ cd /usr/local/src/elasticsearch-5.5.3/bin</span><br><span class="line">$ su es</span><br><span class="line">$ ./elasticsearch</span><br></pre></td></tr></table></figure></li><li><p>验证es是否安装成功</p><ul><li>可以在浏览器中打开 127.0.0.1:9200 (此处使用的是vagrant设定了虚拟主机的ip, 所以访问 <a href="http://192.168.3.200:9200/" target="_blank" rel="noopener">http://192.168.3.200:9200/</a>, 不过有些<strong>小坑</strong>下面会介绍 )</li><li>或者可以 <code>curl -X GET http://192.168.3.200:9200</code> </li></ul></li></ol><h2 id="启动坑点"><a href="#启动坑点" class="headerlink" title="启动坑点"></a>启动坑点</h2><p>启动可能会报一些错(调研使用的是 centos7-minimal 版)</p><ol><li><p>每个进程最大同时打开文件数太小</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]</span><br><span class="line">[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br><span class="line">```    </span><br><span class="line">解决方案: 切换到root, 可通过下面2个命令查看当前数量</span><br><span class="line">```     </span><br><span class="line">$ ulimit -Hn</span><br><span class="line">4096</span><br><span class="line">$ ulimit -Sn</span><br><span class="line">1024</span><br><span class="line"></span><br><span class="line">// 编辑如下文件</span><br><span class="line">vi /etc/security/limits.conf</span><br><span class="line">// 增加如下两行配置</span><br><span class="line">*               soft    nofile          65536</span><br><span class="line">*               hard    nofile          65536</span><br></pre></td></tr></table></figure></li><li><p>elasticsearch用户拥有的内存权限太小, 至少需要262144</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR: [1] bootstrap checks failed</span><br><span class="line">[1]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br></pre></td></tr></table></figure><p> 解决方案, 切换到root</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysctl.conf </span><br><span class="line">添加 vm.max_map_count=262144</span><br><span class="line">执行 sysctl -p</span><br></pre></td></tr></table></figure></li><li><p>默认9200端口是给本机访问的, 因此es在成功启动后, 如果使用 192.168.3.200:9200 来访问, 可能失败, 因此需要在es配置文件elasticsearch.yml中增加 <strong>network.bind_host: 0.0.0.0</strong>, 重启后则可以正常访问</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;rjAFeY9&quot;,   # node 节点名称</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;, # 节点默认的集群名称 (可以在es节点的配置文件elasticsearch.yml中进行配置)</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;zaJApkNPRryFohhEMEVH5w&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;     # es 版本号</span><br><span class="line">    &quot;number&quot; : &quot;5.5.3&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;9305a5e&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2017-09-07T15:56:59.599Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;6.6.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 上面未解释的信息暂时先不用了解</p></li><li><p>如果想启动多个结点, 还可能会报如下几个错</p><ul><li><p>尝试启动第二个节点, 报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000080000000, 174456832, 0) failed; error=&apos;Cannot allocate memory&apos; (errno=12)</span><br><span class="line">#</span><br><span class="line"># There is insufficient memory for the Java Runtime Environment to continue.</span><br><span class="line"># Native memory allocation (mmap) failed to map 174456832 bytes for committing reserved memory.</span><br><span class="line"># An error report file with more information is saved as:</span><br><span class="line"># /usr/local/src/elasticsearch-5.5.3/bin/hs_err_pid8651.log</span><br></pre></td></tr></table></figure><p>解决方案: 其实这是因为我给虚拟机分配了2G的内存, 而elasticsearch5.X默认分配给jvm的空间大小就是2g, 所以jvm空间不够, 修改jvm空间分配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/src/elasticsearch-5.5.3/config/jvm.options</span><br><span class="line">将:</span><br><span class="line">-Xms2g</span><br><span class="line">-Xmx2g</span><br><span class="line">修改为:</span><br><span class="line">-Xms512m</span><br><span class="line">-Xmx512m</span><br></pre></td></tr></table></figure></li><li><p>再次启动又报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">maybe these locations are not writable or multiple nodes were started without increasing [node.max_local_storage_nodes] (was [1])</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>解决方案: 在 elasticsearch.yml 配置文件最后添加 <code>node.max_local_storage_nodes: 256</code>, 然后重新添加第二个节点</p></li></ul></li></ol><h2 id="Elasticsearch-Head-安装"><a href="#Elasticsearch-Head-安装" class="headerlink" title="Elasticsearch Head 安装"></a><a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">Elasticsearch Head 安装</a></h2><p>es 启动后, 访问 127.0.0.1:9200 可以查看版本和集群相关的信息, 但如果能有一个可视化的环境来操作它可能会更直观一些, 可以通过安装 Elasticsearch Head 这个插件来进行管理;<br>Elasticsearch Head 是集群管理、数据可视化、增删改查、查询语句可视化工具, 在最新的ES5中安装方式和ES2以上的版本有很大的不同, 在ES2中可以直接在bin目录下执行 <code>plugin install xxxx</code> 来进行安装, 但是在ES5中这种安装方式变了, 要想在ES5中安装则必须要安装NodeJs, 然后通过NodeJS来启动Head, 具体过程如下:</p><ol><li><p>nodejs 安装</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 更新node.js各版本yum源(Node.js v8.x)</span><br><span class="line">curl --silent --location https://rpm.nodesource.com/setup_8.x | bash -</span><br><span class="line">yum install -y nodejs</span><br></pre></td></tr></table></figure></li><li><p><a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">github下载</a> Elasticsearch Head 源码</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src</span><br><span class="line">git clone git://github.com/mobz/elasticsearch-head.git</span><br><span class="line">cd elasticsearch-head</span><br><span class="line">npm install // (可能会有一些警告)</span><br></pre></td></tr></table></figure></li><li><p>修改Elasticsearch配置文件, 编辑 elasticsearch-5.5.3/config/elasticsearch.yml, 加入以下内容:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.cors.enabled: true // 注意冒号后面要有空格</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure></li><li><p>编辑elasticsearch-head-master文件下的Gruntfile.js, 修改服务器监听地址, 增加hostname属性, 将其值设置为 * :</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vi elasticsearch-head/Gruntfile.js</span><br><span class="line"></span><br><span class="line">connect: &#123;</span><br><span class="line">    hostname: &quot;*&quot;,  // 此处</span><br><span class="line">    server: &#123;</span><br><span class="line">        options: &#123;</span><br><span class="line">            port: 9100,</span><br><span class="line">            base: &apos;.&apos;,</span><br><span class="line">            keepalive: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编辑elasticsearch-head-master/_site/app.js, 修改head连接es的地址，将localhost修改为es的IP地址 (注意:如果ES是在本地,就不要修改,默认就是localhost)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.base_uri = this.config.base_uri || this.prefs.get(&quot;app-base_uri&quot;) || &quot;http://localhost:9200&quot;;</span><br></pre></td></tr></table></figure></li><li><p>在启动elasticsearch-head之前要先启动elasticsearch, 然后在elasticsearch-head-master/目录下运行启动命令</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure></li><li><p>最后验证 <a href="http://192.168.3.200:9100/" target="_blank" rel="noopener">http://192.168.3.200:9100/</a><br> <img src="/img/est/est-9100.png"></p></li></ol><h2 id="Kibana安装"><a href="#Kibana安装" class="headerlink" title="Kibana安装"></a><a href="https://www.elastic.co/cn/products/kibana" target="_blank" rel="noopener">Kibana</a>安装</h2><p>Kibana 是一个开源的分析和可视化平台, 属于 Elastic stack 技术栈中的一部分, Kibana 主要提供搜索、查看和与存储在 Elasticsearch 索引中的数据进行交互的功能, 开发者或运维人员可以轻松地执行高级数据分析, 并在各种图表、表格和地图中可视化数据;<br>接下来主要就是使用Kibana的DevTools提供的控制台进行ES的学习</p><ol><li><p><a href="https://www.elastic.co/downloads/past-releases" target="_blank" rel="noopener">下载</a>, 此处选择了5.5.3</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/kibana/kibana-5.5.3-linux-x86_64.tar.gz</span><br><span class="line">tar -zxvf kibana-5.5.3-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>修改config/kibana.yml文件, 加入以下内容:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.port: 5601  </span><br><span class="line">server.name: &quot;kibana&quot;  </span><br><span class="line">server.host: &quot;0.0.0.0&quot;  </span><br><span class="line">elasticsearch.url: &quot;http://127.0.0.1:9200&quot;</span><br></pre></td></tr></table></figure></li><li><p>然后启动kibana服务:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> cd /usr/local/src/kibana-5.5.3-linux-x86_64/bin</span><br><span class="line">./kibana</span><br></pre></td></tr></table></figure><ul><li>浏览器访问地址:<a href="http://192.168.3.200:5601/" target="_blank" rel="noopener">http://192.168.3.200:5601/</a></li></ul></li><li><p>DevTools 与 5.x之前版本的Sense</p><ul><li>Sense 是一个 Kibana 应用它提供交互式的控制台, 通过你的浏览器直接向 Elasticsearch 提交请求, 操作es中的数据</li><li>现在不用安装了, 可以直接使用Kibana提供的 <strong>DevTools</strong><br><img src="/img/est/kibana-devtools.png" width="450/"></li></ul></li><li><p>注意此时, 之前的es集群变成yellow状态了 (因为kibana有个副本分片并没有处于正常状态, 因为当前只有一个节点, 副本分片无法被分配到其他节点, 具体细节先不用着急, 后面会进行分析)<br> <img src="/img/est/est-9100-yellow.png"></p></li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>到此为止, 应该对ES有了最基础的了解, 且基本环境已经安装完毕, 对于后续的练习暂时就够了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;版本选择&quot;&gt;&lt;a href=&quot;#版本选择&quot; class=&quot;headerlink&quot; title=&quot;版本选择&quot;&gt;&lt;/a&gt;版本选择&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ES 的版本迭代比较快, 目前(06/2018)为止, 已经到6.X了, 可参考&lt;a href=&quot;http
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://blog.renyimin.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch(一)" scheme="http://blog.renyimin.com/tags/Elasticsearch-%E4%B8%80/"/>
    
  </entry>
  
  <entry>
    <title>01. 初识 Elasticsearch</title>
    <link href="http://blog.renyimin.com/2018/06/08/elasticsearch/2018-06-08-01/"/>
    <id>http://blog.renyimin.com/2018/06/08/elasticsearch/2018-06-08-01/</id>
    <published>2018-06-08T06:24:25.000Z</published>
    <updated>2018-11-09T03:44:49.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>可以通过如下几个特点来认识ES:</p><ul><li><p>开源</p></li><li><p>基于 Lucene, 提供比较简单的Restful API<br>Lucene 可以说是当下最先进、高性能、全功能的搜索引擎库, 由Apache软件基金会支持和提供(更多细节自行了解)<br>但Lucene非常复杂, ES的目的是使全文检索变得简单, 通过隐藏 Lucene 的复杂性, 取而代之的提供一套简单一致的 RESTful API</p></li><li><p><strong>高性能全文检索和分析引擎, 并可根据相关度对结果进行排序</strong></p></li><li><p>可以快速且 <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/near-real-time.html" target="_blank" rel="noopener">近实时</a> 地存储,检索(从文档被索引到可以被检索只有轻微延时, 约1s)以及分析</p></li><li><p>海量数据检索及分析: 可以扩展到上百台服务器, 处理PB级 <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/structured-search.html" target="_blank" rel="noopener">结构化</a> 或 非结构化 数据 </p></li><li><p>面向文档型数据库, 存储的是整个对象或者文档, 它不但会存储它们, 还会为它们建立索引</p></li></ul></li><li><p>应用场景</p><ul><li><p>当你的应用数据量很大, 数据结构灵活多变, 数据之间的结构比较复杂, 如果用传统数据库, 可能不仅需要面对大量的表设计及数据库的性能问题, 此时可以考虑使用ES, 它不仅可以处理非结构化数据, 而且可以帮你快速进行扩容, 承载大量数据;</p></li><li><p>具体比如多数据源聚合大列表页: 微服务架构是目前很多公司都采用的架构, 所以经常会面对 多数据源聚合的 大列表页, 一个列表中的筛选字段,展示字段可能会来自多个服务, 同时涉及到分页, 所以传统方案可能比较吃力, 而且也得不到比较好的效果; (RRC这边目前是使用 ES 做 <strong>数据视图服务</strong>, 对这种大列表页所用到的数据源字段做统一配置和聚合)</p></li><li><p>日志数据分析, RRC 使用 ElasticStack 技术栈来很方便地对各服务的日志进行查询,分析,统计;</p></li><li><p>站内搜索(电商, 招聘, 门户 等等)都可以使用 ES 来做全文检索并根据相关性进行排名, 高亮展示关键词等;</p></li></ul></li></ol><h2 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h2><ol><li><p>ES 的版本变更比较快, 目前(06/2018)为止, 已经到6.X了, 可参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/index.html" target="_blank" rel="noopener">官网文档</a>, 可能很多公司还在用2.X, 或者刚切到5.X; </p></li><li><p>我之所以使用5.5.3来学习调研, 主要也是因为公司选用的阿里云服务提供的是 ES 5.5.3版本 (所以你在选择版本时, 也可以根据 自建、购买云服务 来决定)  </p></li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>安装Java, 推荐使用Java 8 : <code>yum install java-1.8.0-openjdk* -y</code></p></li><li><p>ES <a href="https://www.elastic.co/downloads/past-releases" target="_blank" rel="noopener">下载</a></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/local/src</span><br><span class="line">$ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.3.tar.gz</span><br><span class="line">$ tar -zxvf elasticsearch-5.5.3.tar.gz</span><br><span class="line">$ cd elasticsearch-5.5.3</span><br><span class="line">$ ls</span><br><span class="line">bin  config  lib  LICENSE.txt  modules  NOTICE.txt  plugins  README.textile</span><br></pre></td></tr></table></figure></li><li><p>启动 ES: es不能使用root权限启动, 所以需要创建新用户</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ adduser es</span><br><span class="line">$ passwd es</span><br><span class="line">$ chown -R es /usr/local/src/elasticsearch-5.5.3/</span><br><span class="line">$ cd /usr/local/src/elasticsearch-5.5.3/bin</span><br><span class="line">$ su es</span><br><span class="line">$ ./elasticsearch</span><br></pre></td></tr></table></figure></li><li><p>验证es是否安装成功</p><ul><li>可以在浏览器中打开 127.0.0.1:9200 (此处使用的是vagrant设定了虚拟主机的ip, 所以访问 <a href="http://192.168.3.200:9200/" target="_blank" rel="noopener">http://192.168.3.200:9200/</a>, 不过有些<strong>小坑</strong>下面会介绍 )</li><li>或者可以 <code>curl -X GET http://192.168.3.200:9200</code> </li></ul></li></ol><h2 id="启动坑点"><a href="#启动坑点" class="headerlink" title="启动坑点"></a>启动坑点</h2><p>启动可能会报一些错(调研使用的是 centos7-minimal 版)</p><ol><li><p>每个进程最大同时打开文件数太小</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]</span><br><span class="line">[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br><span class="line">```    </span><br><span class="line">解决方案: 切换到root, 可通过下面2个命令查看当前数量</span><br><span class="line">```     </span><br><span class="line">$ ulimit -Hn</span><br><span class="line">4096</span><br><span class="line">$ ulimit -Sn</span><br><span class="line">1024</span><br><span class="line"></span><br><span class="line">// 编辑如下文件</span><br><span class="line">vi /etc/security/limits.conf</span><br><span class="line">// 增加如下两行配置</span><br><span class="line">*               soft    nofile          65536</span><br><span class="line">*               hard    nofile          65536</span><br></pre></td></tr></table></figure></li><li><p>elasticsearch用户拥有的内存权限太小, 至少需要262144</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR: [1] bootstrap checks failed</span><br><span class="line">[1]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br></pre></td></tr></table></figure><p> 解决方案, 切换到root</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysctl.conf </span><br><span class="line">添加 vm.max_map_count=262144</span><br><span class="line">执行 sysctl -p</span><br></pre></td></tr></table></figure></li><li><p>默认9200端口是给本机访问的, 因此es在成功启动后, 如果使用 192.168.3.200:9200 来访问, 可能失败, 因此需要在es配置文件elasticsearch.yml中增加 <strong>network.bind_host: 0.0.0.0</strong>, 重启后则可以正常访问</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;rjAFeY9&quot;,   # node 节点名称</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;, # 节点默认的集群名称 (可以在es节点的配置文件elasticsearch.yml中进行配置)</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;zaJApkNPRryFohhEMEVH5w&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;     # es 版本号</span><br><span class="line">    &quot;number&quot; : &quot;5.5.3&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;9305a5e&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2017-09-07T15:56:59.599Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;6.6.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 上面未解释的信息暂时先不用了解</p></li><li><p>如果想启动多个结点, 还可能会报如下几个错</p><ul><li><p>尝试启动第二个节点, 报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000080000000, 174456832, 0) failed; error=&apos;Cannot allocate memory&apos; (errno=12)</span><br><span class="line">#</span><br><span class="line"># There is insufficient memory for the Java Runtime Environment to continue.</span><br><span class="line"># Native memory allocation (mmap) failed to map 174456832 bytes for committing reserved memory.</span><br><span class="line"># An error report file with more information is saved as:</span><br><span class="line"># /usr/local/src/elasticsearch-5.5.3/bin/hs_err_pid8651.log</span><br></pre></td></tr></table></figure><p>解决方案: 其实这是因为我给虚拟机分配了2G的内存, 而elasticsearch5.X默认分配给jvm的空间大小就是2g, 所以jvm空间不够, 修改jvm空间分配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/src/elasticsearch-5.5.3/config/jvm.options</span><br><span class="line">将:</span><br><span class="line">-Xms2g</span><br><span class="line">-Xmx2g</span><br><span class="line">修改为:</span><br><span class="line">-Xms512m</span><br><span class="line">-Xmx512m</span><br></pre></td></tr></table></figure></li><li><p>再次启动又报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">maybe these locations are not writable or multiple nodes were started without increasing [node.max_local_storage_nodes] (was [1])</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>解决方案: 在 elasticsearch.yml 配置文件最后添加 <code>node.max_local_storage_nodes: 256</code>, 然后重新添加第二个节点</p></li></ul></li></ol><h2 id="Elasticsearch-Head-安装"><a href="#Elasticsearch-Head-安装" class="headerlink" title="Elasticsearch Head 安装"></a><a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">Elasticsearch Head 安装</a></h2><p>es 启动后, 访问 127.0.0.1:9200 可以查看版本和集群相关的信息, 但如果能有一个可视化的环境来操作它可能会更直观一些, 可以通过安装 Elasticsearch Head 这个插件来进行管理;<br>Elasticsearch Head 是集群管理、数据可视化、增删改查、查询语句可视化工具, 在最新的ES5中安装方式和ES2以上的版本有很大的不同, 在ES2中可以直接在bin目录下执行 <code>plugin install xxxx</code> 来进行安装, 但是在ES5中这种安装方式变了, 要想在ES5中安装则必须要安装NodeJs, 然后通过NodeJS来启动Head, 具体过程如下:</p><ol><li><p>nodejs 安装</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 更新node.js各版本yum源(Node.js v8.x)</span><br><span class="line">curl --silent --location https://rpm.nodesource.com/setup_8.x | bash -</span><br><span class="line">yum install -y nodejs</span><br></pre></td></tr></table></figure></li><li><p><a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">github下载</a> Elasticsearch Head 源码</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src</span><br><span class="line">git clone git://github.com/mobz/elasticsearch-head.git</span><br><span class="line">cd elasticsearch-head</span><br><span class="line">npm install // (可能会有一些警告)</span><br></pre></td></tr></table></figure></li><li><p>修改Elasticsearch配置文件, 编辑 elasticsearch-5.5.3/config/elasticsearch.yml, 加入以下内容:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.cors.enabled: true // 注意冒号后面要有空格</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure></li><li><p>编辑elasticsearch-head-master文件下的Gruntfile.js, 修改服务器监听地址, 增加hostname属性, 将其值设置为 * :</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vi elasticsearch-head/Gruntfile.js</span><br><span class="line"></span><br><span class="line">connect: &#123;</span><br><span class="line">    hostname: &quot;*&quot;,  // 此处</span><br><span class="line">    server: &#123;</span><br><span class="line">        options: &#123;</span><br><span class="line">            port: 9100,</span><br><span class="line">            base: &apos;.&apos;,</span><br><span class="line">            keepalive: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编辑elasticsearch-head-master/_site/app.js, 修改head连接es的地址，将localhost修改为es的IP地址 (注意:如果ES是在本地,就不要修改,默认就是localhost)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.base_uri = this.config.base_uri || this.prefs.get(&quot;app-base_uri&quot;) || &quot;http://localhost:9200&quot;;</span><br></pre></td></tr></table></figure></li><li><p>在启动elasticsearch-head之前要先启动elasticsearch, 然后在elasticsearch-head-master/目录下运行启动命令</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure></li><li><p>最后验证 <a href="http://192.168.3.200:9100/" target="_blank" rel="noopener">http://192.168.3.200:9100/</a><br> <img src="/img/est/est-9100.png"></p></li></ol><h2 id="Kibana安装"><a href="#Kibana安装" class="headerlink" title="Kibana安装"></a><a href="https://www.elastic.co/cn/products/kibana" target="_blank" rel="noopener">Kibana</a>安装</h2><p>Kibana 是一个开源的分析和可视化平台, 属于 Elastic stack 技术栈中的一部分, Kibana 主要提供搜索、查看和与存储在 Elasticsearch 索引中的数据进行交互的功能, 开发者或运维人员可以轻松地执行高级数据分析, 并在各种图表、表格和地图中可视化数据;<br>接下来主要就是使用Kibana的DevTools提供的控制台进行ES的学习</p><ol><li><p><a href="https://www.elastic.co/downloads/past-releases" target="_blank" rel="noopener">下载</a>, 此处选择了5.5.3</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/kibana/kibana-5.5.3-linux-x86_64.tar.gz</span><br><span class="line">tar -zxvf kibana-5.5.3-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>修改config/kibana.yml文件, 加入以下内容:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.port: 5601  </span><br><span class="line">server.name: &quot;kibana&quot;  </span><br><span class="line">server.host: &quot;0.0.0.0&quot;  </span><br><span class="line">elasticsearch.url: &quot;http://127.0.0.1:9200&quot;</span><br></pre></td></tr></table></figure></li><li><p>然后启动kibana服务:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> cd /usr/local/src/kibana-5.5.3-linux-x86_64/bin</span><br><span class="line">./kibana</span><br></pre></td></tr></table></figure><ul><li>浏览器访问地址:<a href="http://192.168.3.200:5601/" target="_blank" rel="noopener">http://192.168.3.200:5601/</a></li></ul></li><li><p>DevTools 与 5.x之前版本的Sense</p><ul><li>Sense 是一个 Kibana 应用它提供交互式的控制台, 通过你的浏览器直接向 Elasticsearch 提交请求, 操作es中的数据</li><li>现在不用安装了, 可以直接使用Kibana提供的 <strong>DevTools</strong><br><img src="/img/est/kibana-devtools.png" width="450/"></li></ul></li><li><p>注意此时, 之前的es集群变成yellow状态了 (因为kibana有个副本分片并没有处于正常状态, 因为当前只有一个节点, 副本分片无法被分配到其他节点, 具体细节先不用着急, 后面会进行分析)<br> <img src="/img/est/est-9100-yellow.png"></p></li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>到此为止, 应该对ES有了最基础的了解, 且基本环境已经安装完毕, 暂时就够</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;可以通过如下几个特点来认识ES:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;开源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基于 Lucene, 提供比较简单的Restful API&lt;br&gt;Lucene 可以说是当下最先进、高性能、全功能的搜索引擎库, 由Apache软件基
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://blog.renyimin.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch(一)" scheme="http://blog.renyimin.com/tags/Elasticsearch-%E4%B8%80/"/>
    
  </entry>
  
</feed>
