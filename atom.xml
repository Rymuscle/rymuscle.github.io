<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lant&#39;s</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.renyimin.com/"/>
  <updated>2018-11-22T04:36:35.000Z</updated>
  <id>http://blog.renyimin.com/</id>
  
  <author>
    <name>Lant</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>01. 认识Elastic-Job</title>
    <link href="http://blog.renyimin.com/2018/09/15/Elastic-Job/2018-09-15-01/"/>
    <id>http://blog.renyimin.com/2018/09/15/Elastic-Job/2018-09-15-01/</id>
    <published>2018-09-15T06:07:21.000Z</published>
    <updated>2018-11-22T04:36:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引出Elastic-Job"><a href="#引出Elastic-Job" class="headerlink" title="引出Elastic-Job"></a>引出Elastic-Job</h2><ol><li>在项目中使用定时任务是避免不了的, 而在部署定时任务时, 由于部署多台机器会导致同一个任务会执行多次, 因此通常只部署一台机器<ul><li>比如给用户发送邮件的定时任务, 每天定时的给用户下发邮件, 如果部署了多台, 同一个用户将发送多份邮件;</li><li>但是只部署一台机器, 可用性又无法保证</li></ul></li><li>Elastic-Job 就可以帮助解决定时任务在集群部署情况下的协调调度问题, 保证任务不重复不遗漏的执行;</li></ol><h2 id="Elastic-Job简介"><a href="#Elastic-Job简介" class="headerlink" title="Elastic-Job简介"></a>Elastic-Job简介</h2><ol><li><p>Elastic-Job 是当当开源的一款非常好用的分布式调度框架, 有两个互相独立的子项目组成</p><ul><li>Elastic-Job-Cloud: 以私有云平台的方式提供集资源、调度以及分片为一体的全量级解决方案, 依赖Mesos和Zookeeper</li><li>Elastic-Job-Lite: 定位为轻量级无中心化解决方案, 使用jar包的形式提供分布式任务的协调服务</li><li>Elastic-Job-Lite 和 Elastic-Job-Cloud 提供同一套API开发作业, 开发者仅需一次开发, 然后可根据需要以Lite或Cloud的方式部署</li></ul></li><li><p>这里主要以Elastic-Job-Lite进行调研学习</p></li></ol><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><ol><li>定时任务: 基于成熟的定时任务作业框架Quartz cron表达式执行定时任务</li><li>作业注册中心: 基于Zookeeper和其客户端Curator实现的全局作业注册控制中心, 用于注册, 控制和协调分布式作业执行</li><li>作业分片: 将一个任务分片成为多个小任务项在多服务器上同时执行</li><li>弹性扩容缩容: 运行中的作业服务器崩溃或新增加n台作业服务器, 作业框架将在下次作业执行前重新分片, 不影响当前作业执行</li><li>支持多种作业执行模式: 支持OneOff, Perpetual和SequencePerpetual三种作业模式</li><li>失效转移: 运行中的作业服务器崩溃不会导致重新分片, 只会在下次作业启动时分片, 启用失效转移功能可以在本次作业执行过程中监测其他作业服务器空闲, 抓取未完成的孤儿分片项执行</li><li>运行时状态收集: 监控作业运行时状态, 统计最近一段时间处理的数据成功和失败数量, 记录作业上次运行开始时间, 结束时间和下次运行时间</li><li>作业停止, 恢复和禁用: 用于操作作业启停, 并可以禁止某作业运行(上线时常用)</li><li>被错过执行的作业重触发: 自动记录错过执行的作业, 并在上次作业完成后自动触发, 可参考Quartz的misfire</li><li>多线程快速处理数据: 使用多线程处理抓取到的数据, 提升吞吐量</li><li>幂等性: 重复作业任务项判定, 不重复执行已运行的作业任务项, 由于开启幂等性需要监听作业运行状态, 对瞬时反复运行的作业对性能有较大影响</li><li>容错处理: 作业服务器与Zookeeper服务器通信失败则立即停止作业运行, 防止作业注册中心将失效的分片分项配给其他作业服务器, 而当前作业服务器仍在执行任务, 导致重复执行</li><li>Spring支持: 支持spring容器, 自定义命名空间, 支持占位符</li><li>运维平台: 提供运维界面, 可以管理作业和注册中心</li></ol><p><a href="https://blog.csdn.net/adi851270440/article/details/80493367" target="_blank" rel="noopener">https://blog.csdn.net/adi851270440/article/details/80493367</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引出Elastic-Job&quot;&gt;&lt;a href=&quot;#引出Elastic-Job&quot; class=&quot;headerlink&quot; title=&quot;引出Elastic-Job&quot;&gt;&lt;/a&gt;引出Elastic-Job&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在项目中使用定时任务是避免不了的, 而在
      
    
    </summary>
    
      <category term="ElasticJob" scheme="http://blog.renyimin.com/categories/ElasticJob/"/>
    
    
      <category term="ElasticJob" scheme="http://blog.renyimin.com/tags/ElasticJob/"/>
    
  </entry>
  
  <entry>
    <title>14. 建立双索引--- text分词 + 排序</title>
    <link href="http://blog.renyimin.com/2018/06/21/elasticsearch/2018-06-21-14/"/>
    <id>http://blog.renyimin.com/2018/06/21/elasticsearch/2018-06-21-14/</id>
    <published>2018-06-21T11:30:52.000Z</published>
    <updated>2018-11-22T03:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>如果对一个 <code>text</code> 类型的字段进行排序, 由于该字段会进行分词处理, 这样的话, 排序的结果就可能不是我们想要的结果; 通常的解决方案是在建立 <code>mapping</code> 时, 同时为该字段建立两个索引:</p><ul><li>一个进行分词用来进行全文检索</li><li>一个不进行分词, 用来进行排序</li><li>注意使用 <code>&quot;fielddata&quot;: true</code></li></ul></li><li><p>练习:</p><ul><li><p>创建mapping, 构造数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">DELETE /mywebsite</span><br><span class="line">PUT /mywebsite</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;article&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;title&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">          &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;raw&quot;: &#123;</span><br><span class="line">              &quot;type&quot; : &quot;keyword&quot;</span><br><span class="line">              # &quot;index&quot;: false</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;fielddata&quot;: true</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;contennt&quot;: &#123;</span><br><span class="line">          &quot;type&quot;:&quot;text&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;post_date&quot;: &#123;</span><br><span class="line">          &quot;type&quot;:&quot;date&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;author_id&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;long&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">PUT /mywebsite/article/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &quot;PHP Language&quot;,</span><br><span class="line">  &quot;content&quot;: &quot;Php LANGUAGE is the best Language&quot;,</span><br><span class="line">  &quot;post_date&quot;: &quot;2018-06-10&quot;,</span><br><span class="line">  &quot;author_id&quot;: 57</span><br><span class="line">&#125;</span><br><span class="line">PUT /mywebsite/article/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &quot;JAVA Language&quot;,</span><br><span class="line">  &quot;content&quot;: &quot;Java LANGUAGE is the best Language&quot;,</span><br><span class="line">  &quot;post_date&quot;: &quot;2018-06-12&quot;,</span><br><span class="line">  &quot;author_id&quot;: 32</span><br><span class="line">&#125;</span><br><span class="line">PUT /mywebsite/article/3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &quot;C Language&quot;,</span><br><span class="line">  &quot;content&quot;: &quot;c LANGUAGE is the best Language&quot;,</span><br><span class="line">  &quot;post_date&quot;: &quot;2018-06-09&quot;,</span><br><span class="line">  &quot;author_id&quot;: 86</span><br><span class="line">&#125;</span><br><span class="line">GET /mywebsite/_mapping/article</span><br><span class="line">``` </span><br><span class="line">- 测试, 如果使用**title字段的不分词索引进行检索**, 会发现结果使用的是title的全部内容进行的排序</span><br></pre></td></tr></table></figure><p>GET /mywebsite/article/_search<br>{<br>“query”: {<br>  “match_all”: {}<br>},<br>“sort”: {<br>  “title.raw”: {</p><pre><code>&quot;order&quot;: &quot;desc&quot;</code></pre><p>  }<br>}<br>}</p><h1 id="结果-注意看sort的内容"><a href="#结果-注意看sort的内容" class="headerlink" title="结果, 注意看sort的内容"></a>结果, 注意看sort的内容</h1><p>{<br>“took”: 9,<br>“timed_out”: false,<br>“_shards”: {<br>  “total”: 5,<br>  “successful”: 5,<br>  “failed”: 0<br>},<br>“hits”: {<br>  “total”: 3,<br>  “max_score”: null,<br>  “hits”: [</p><pre><code>{  &quot;_index&quot;: &quot;mywebsite&quot;,  &quot;_type&quot;: &quot;article&quot;,  &quot;_id&quot;: &quot;1&quot;,  &quot;_score&quot;: null,  &quot;_source&quot;: {    &quot;title&quot;: &quot;PHP Language&quot;,    &quot;content&quot;: &quot;Php LANGUAGE is the best Language&quot;,    &quot;post_date&quot;: &quot;2018-06-10&quot;,    &quot;author_id&quot;: 57  },  &quot;sort&quot;: [    &quot;PHP Language&quot;  ]},{  ......,  &quot;sort&quot;: [    &quot;JAVA Language&quot;  ]},{  ......,  &quot;sort&quot;: [    &quot;C Language&quot;  ]}</code></pre><p>  ]<br>}<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 测试, 如果使用title默认的分词索引进行检索, 会发现结果使用的是title的全部内容进行的排序</span><br></pre></td></tr></table></figure><p>GET /mywebsite/article/_search<br>{<br>“query”: {<br>  “match_all”: {}<br>},<br>“sort”: {<br>  “title”: {</p><pre><code>&quot;order&quot;: &quot;desc&quot;</code></pre><p>  }<br>}<br>}</p><h1 id="结果-注意看sort的内容-是title字段分词后的内容"><a href="#结果-注意看sort的内容-是title字段分词后的内容" class="headerlink" title="结果, 注意看sort的内容, 是title字段分词后的内容"></a>结果, 注意看sort的内容, 是title字段分词后的内容</h1><p>{<br>“took”: 8,<br>“timed_out”: false,<br>“_shards”: {<br>  “total”: 5,<br>  “successful”: 5,<br>  “failed”: 0<br>},<br>“hits”: {<br>  “total”: 3,<br>  “max_score”: null,<br>  “hits”: [</p><pre><code>{  &quot;_index&quot;: &quot;mywebsite&quot;,  &quot;_type&quot;: &quot;article&quot;,  &quot;_id&quot;: &quot;1&quot;,  &quot;_score&quot;: null,  &quot;_source&quot;: {    &quot;title&quot;: &quot;PHP Language&quot;,    &quot;content&quot;: &quot;Php LANGUAGE is the best Language&quot;,    &quot;post_date&quot;: &quot;2018-06-10&quot;,    &quot;author_id&quot;: 57  },  &quot;sort&quot;: [    &quot;php&quot;  ]},{  ......  &quot;sort&quot;: [    &quot;language&quot;  ]},{  ......,  &quot;sort&quot;: [    &quot;language&quot;  ]}</code></pre><p>  ]<br>}<br>}<br>```</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;如果对一个 &lt;code&gt;text&lt;/code&gt; 类型的字段进行排序, 由于该字段会进行分词处理, 这样的话, 排序的结果就可能不是我们想要的结果; 通常的解决方案是在建立 &lt;code&gt;mapping&lt;/code&gt; 时, 同时为该字段建立两个索引:&lt;/p&gt;

      
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://blog.renyimin.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch基础" scheme="http://blog.renyimin.com/tags/Elasticsearch%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>13. mapping</title>
    <link href="http://blog.renyimin.com/2018/06/19/elasticsearch/2018-06-19-13/"/>
    <id>http://blog.renyimin.com/2018/06/19/elasticsearch/2018-06-19-13/</id>
    <published>2018-06-19T11:21:52.000Z</published>
    <updated>2018-11-22T03:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mapping核心数据类型"><a href="#mapping核心数据类型" class="headerlink" title="mapping核心数据类型"></a>mapping核心数据类型</h2><ol><li><p>es的文档中, 每个字段都有一个数据类型, 可以是:</p><ul><li>一个简单的类型, 如 <code>text</code>, <code>keyword</code>, <code>date</code>, <code>long</code>, <code>double</code>, <code>boolean</code> 或 <code>ip</code><br>-支持JSON的分层特性的类型,如对象或嵌套</li><li>或者像 <code>geo_point</code>, <code>geo_shape</code> 或 <code>completion</code> 这样的特殊类型</li></ul></li><li><p>为不同目的以不同方式索引相同字段通常很有用, 例如, 字符串字段可以被索引为用于全文搜索的文本字段, 并且可以被索引为用于排序或聚合的关键字字段, 或者, 可以使用标准分析器, 英语分析器和法语分析器索引字符串字段;</p></li><li><p>之前已经了解过: </p><blockquote><p>在ES中, 当我们手动去创建一个文档到索引中的时候, ES其实默认会自动为每个文档的<strong>type</strong>创建一个mapping, 这种创建mapping的方式称为 <strong>dynamic mapping</strong>;<br>为了更准确方便地让es理解我们的意图, 一般我们会对index的type手动来创建mapping</p></blockquote></li></ol><h2 id="mapping操作"><a href="#mapping操作" class="headerlink" title="mapping操作"></a>mapping操作</h2><ol><li><p><code>GET /products/_mapping/computer</code></p></li><li><p>只能在创建index时手动创建mapping, 或者新增field mapping, 但是不能 update filed mapping;</p><ul><li><p>手动创建index并设置mapping </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">PUT /website</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;:&#123;</span><br><span class="line">    &quot;article&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;author_id&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;long&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;title&quot;: &#123;</span><br><span class="line">          &quot;type&quot;:&quot;text&quot;,</span><br><span class="line">          &quot;analyzer&quot;: &quot;standard&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;content&quot;: &#123;</span><br><span class="line">          &quot;type&quot; : &quot;text&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;post_date&quot;: &#123;</span><br><span class="line">          &quot;type&quot; : &quot;date&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        # 如果不想进行分词, 就设置为 keyword</span><br><span class="line">        &quot;publisher_id&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>尝试修改某个字段的mapping, 会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">PUT /website</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;:&#123;</span><br><span class="line">    &quot;article&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;title&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">          &quot;analyzer&quot;: &quot;english&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 结果报错</span><br><span class="line">&#123;</span><br><span class="line">  &quot;error&quot;: &#123;</span><br><span class="line">    &quot;root_cause&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;index_already_exists_exception&quot;,</span><br><span class="line">        &quot;reason&quot;: &quot;index [website/RwXzLP7UTOGUQ_BYMInedw] already exists&quot;,</span><br><span class="line">        &quot;index_uuid&quot;: &quot;RwXzLP7UTOGUQ_BYMInedw&quot;,</span><br><span class="line">        &quot;index&quot;: &quot;website&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;type&quot;: &quot;index_already_exists_exception&quot;,</span><br><span class="line">    &quot;reason&quot;: &quot;index [website/RwXzLP7UTOGUQ_BYMInedw] already exists&quot;,</span><br><span class="line">    &quot;index_uuid&quot;: &quot;RwXzLP7UTOGUQ_BYMInedw&quot;,</span><br><span class="line">    &quot;index&quot;: &quot;website&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot;: 400</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="测试mapping"><a href="#测试mapping" class="headerlink" title="测试mapping"></a>测试mapping</h2><ol><li>测试1 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">GET website/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;field&quot;: &quot;content&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;my-dogs&quot;</span><br><span class="line">&#125;</span><br><span class="line"># 结果</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot;: &quot;my&quot;,</span><br><span class="line">      &quot;start_offset&quot;: 0,</span><br><span class="line">      &quot;end_offset&quot;: 2,</span><br><span class="line">      &quot;type&quot;: &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot;: &quot;dogs&quot;,</span><br><span class="line">      &quot;start_offset&quot;: 3,</span><br><span class="line">      &quot;end_offset&quot;: 7,</span><br><span class="line">      &quot;type&quot;: &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot;: 1</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>只能在不同的索引中对相同的字段设定不同的datatype, 即便是在同一个index中的不同type, 也不能对相同的field设置不同的datatype;</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;mapping核心数据类型&quot;&gt;&lt;a href=&quot;#mapping核心数据类型&quot; class=&quot;headerlink&quot; title=&quot;mapping核心数据类型&quot;&gt;&lt;/a&gt;mapping核心数据类型&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;es的文档中, 每个字段都有一个数
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://blog.renyimin.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch基础" scheme="http://blog.renyimin.com/tags/Elasticsearch%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>12. 分词器</title>
    <link href="http://blog.renyimin.com/2018/06/17/elasticsearch/2018-06-17-12/"/>
    <id>http://blog.renyimin.com/2018/06/17/elasticsearch/2018-06-17-12/</id>
    <published>2018-06-17T09:05:52.000Z</published>
    <updated>2018-11-22T03:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li>之前在介绍mapping时, 已经了解到, ES会根据文档的字段类型, 来决定该字段是否需要进行分词和倒排索引, 而分词器的主要工作就是对字段内容进行分词, 通过分词器处理好的结果才会拿去建立倒排索引;</li><li>ES内置的分词器:<ul><li>standard analyzer</li><li>simple analyzer</li><li>whitespace analyzer</li><li>language analyzer</li></ul></li><li>测试分词器: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">GET /_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;standard&quot;,   # 切换进行测试</span><br><span class="line">  &quot;text&quot; : &quot;Test to analyze&quot;</span><br><span class="line">&#125;</span><br><span class="line"># 结果</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot;: &quot;test&quot;,</span><br><span class="line">      &quot;start_offset&quot;: 0,</span><br><span class="line">      &quot;end_offset&quot;: 4,</span><br><span class="line">      &quot;type&quot;: &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot;: &quot;to&quot;,</span><br><span class="line">      &quot;start_offset&quot;: 5,</span><br><span class="line">      &quot;end_offset&quot;: 7,</span><br><span class="line">      &quot;type&quot;: &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot;: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot;: &quot;analyze&quot;,</span><br><span class="line">      &quot;start_offset&quot;: 8,</span><br><span class="line">      &quot;end_offset&quot;: 15,</span><br><span class="line">      &quot;type&quot;: &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot;: 2</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;之前在介绍mapping时, 已经了解到, ES会根据文档的字段类型, 来决定该字段是否需要进行分词和倒排索引, 而分词器的主要工作就是对字段内容进行分词, 通过分词器处理好的结果才会拿去建立倒排索引;&lt;/li&gt;
&lt;li&gt;ES内置的分词器:&lt;ul&gt;
&lt;li&gt;st
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://blog.renyimin.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch基础" scheme="http://blog.renyimin.com/tags/Elasticsearch%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>11. 诡异的搜索结果 引出 mapping</title>
    <link href="http://blog.renyimin.com/2018/06/16/elasticsearch/2018-06-16-11/"/>
    <id>http://blog.renyimin.com/2018/06/16/elasticsearch/2018-06-16-11/</id>
    <published>2018-06-16T11:23:16.000Z</published>
    <updated>2018-11-22T03:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="诡异的搜索结果"><a href="#诡异的搜索结果" class="headerlink" title="诡异的搜索结果"></a>诡异的搜索结果</h2><ol><li><p>构造数据</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">DELETE /website</span><br><span class="line">GET /website/_mapping</span><br><span class="line">PUT /website/article/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;post_date&quot;: &quot;2018-06-20&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;php&quot;,</span><br><span class="line">  &quot;content&quot;: &quot;php is the best language&quot;</span><br><span class="line">&#125;</span><br><span class="line">PUT /website/article/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;post_date&quot;: &quot;2018-06-21&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;java&quot;,</span><br><span class="line">  &quot;content&quot;: &quot;java is the second&quot;</span><br><span class="line">&#125;</span><br><span class="line">PUT /website/article/3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;post_date&quot;: &quot;2018-06-22&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;php&quot;,</span><br><span class="line">  &quot;content&quot;: &quot;C++ is third&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>诡异的搜索结果</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /website/article/_search?q=2018     # 3条查询结果</span><br><span class="line">GET /website/article/_search?q=2018-06-21   # 3条查询结果</span><br><span class="line">GET /website/article/_search?q=post_date:2018-06-22     # 1条查询结果</span><br><span class="line">GET /website/article/_search?q=post_date:2018   # 0条查询结果</span><br></pre></td></tr></table></figure></li><li><p>结果分析</p><ul><li>前两个查询之所以能匹配到所有文档, 是因为查询时并没有指定字段进行匹配, 所以默认查询的是<code>_all</code>字段, 而<code>_all</code>是经过分词的并且有倒排索引<br>对于第一个查询来说, 2018 这个值进行分词后还是2018, 自然是可以匹配到所有文档的<br>而对于第二个查询来说, q=2018-06-21 进行分词后也包含2018, 所以也可以匹配到所有文档</li><li>对于第三个查询, 由于 q参数 指定了字段, 所以不会去查询<code>_all</code>字段, 而是去查指定的post_data字段, 可以匹配到是比较正常的情况</li><li>而对于第四个查询, 由于 q参数 指定了字段, 所以不会去查询<code>_all</code>字段, 而是去查指定的post_data字段, 但却没有结果</li></ul></li><li><p>这就要引出 ES 的mapping机制了</p></li></ol><h2 id="Mapping映射"><a href="#Mapping映射" class="headerlink" title="Mapping映射"></a><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/cn/mapping-intro.html" target="_blank" rel="noopener">Mapping映射</a></h2><ol><li><p>在ES中, 当我们手动去创建一个文档到索引中的时候, ES其实默认会自动为每个文档的<strong>type</strong>创建一个mapping, 这种创建mapping的方式称为 <strong>dynamic mapping</strong>;</p></li><li><p>mapping就是index的type的元数据, 每个type都有一个自己的mapping, 决定了该type下文档中每个field的数据类型, 分词及建立倒排索引的行为 以及 进行搜索的行为;</p></li><li><p>ES在自动创建mapping时, <strong>会根据字段值去自行猜测字段的类型</strong>, 不同类型的field, 有的是full-text, 有的就是exact-value</p><ul><li>对于 full-text型的field, es会对该filed内容进行分词, 时态转换, 大小写转换, 同义词转换等一系列操作后, 建立倒排索引;</li><li>对于 exact-value型的field, es则不会进行分词等处理工作</li></ul></li><li><p>full-text型 和 exact-value型 的不同, 也决定了当你进行搜索时, 其处理行为也是不同的</p><ul><li>如果指明要搜索的field, ES也会根据你要搜索的<strong>字段的类型</strong>, 来决定你发送的搜索内容是否先需要进行全文分析…等一些列操作</li><li>当然, 如果你搜索时不指定你具体字段, 则搜索的是 <code>_all</code>, 是会先对你的发送的搜索内容进行分词等操作的</li></ul></li><li><p>之前诡异的例子中, 其实就是因为在创建文档时, 由于 post_date 字段的值被ES自认为是<code>date</code>类型(exact-value精确值), 所以es不会对这种类型做分词及倒排索引, 所以 <code>GET /website/article/_search?q=post_date:2018</code> 在搜索时候, 其实是去精准匹配post_date字段了, 所以匹配不到;</p></li><li><p>查看你索引type的默认mapping:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">GET /website/_mapping</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;website&quot;: &#123;</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">      &quot;article&quot;: &#123;</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">          &quot;content&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">            &quot;fields&quot;: &#123;</span><br><span class="line">              &quot;keyword&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">                &quot;ignore_above&quot;: 256</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;post_date&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;date&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;title&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">            &quot;fields&quot;: &#123;</span><br><span class="line">              &quot;keyword&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">                &quot;ignore_above&quot;: 256</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="引出手动创建mapping"><a href="#引出手动创建mapping" class="headerlink" title="引出手动创建mapping"></a>引出手动创建mapping</h2><ol><li><p>除了让es自动为我们创建mapping, <strong>一般我们都是在创建文档前, 先手动去创建index和type, 以及type对应的mapping</strong></p><ul><li>为了能够将时间域视为时间, 数字域视为数字, 字符串域视为全文或精确值字符串, ES 需要知道每个域中数据的类型</li><li>而很显然我们比ES更了解我们的字段类型, ES根据值去判断的话, 很容易出现误判</li><li>比如你如果字段是个日期, 可能形式为 2018-06-20 12:13:15 但ES可能不会认为这是个date类型, 如果是 2018-06-20 它又认为是date类型, 所以还是自己手动设置比较好</li></ul></li><li><p>虽然映射是index的type的, 但事实上, 如果在相同的index中, 即使在不同的type, 你也不能对相同字段做不同的类型指定, 可参考<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/cn/mapping.html" target="_blank" rel="noopener">类型和映射</a><br> 只能在不同的索引中对相同的字段设定不同的类型</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;诡异的搜索结果&quot;&gt;&lt;a href=&quot;#诡异的搜索结果&quot; class=&quot;headerlink&quot; title=&quot;诡异的搜索结果&quot;&gt;&lt;/a&gt;诡异的搜索结果&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;构造数据&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://blog.renyimin.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch基础" scheme="http://blog.renyimin.com/tags/Elasticsearch%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>10. 了解 `_all` field</title>
    <link href="http://blog.renyimin.com/2018/06/16/elasticsearch/2018-06-16-10/"/>
    <id>http://blog.renyimin.com/2018/06/16/elasticsearch/2018-06-16-10/</id>
    <published>2018-06-16T06:29:39.000Z</published>
    <updated>2018-11-22T03:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="all"><a href="#all" class="headerlink" title="_all"></a><code>_all</code></h2><ol><li><p>对于在学习 query-string 搜索时, 一般这样来用 <code>GET /products/computer/_search?q=desc:diannao&amp;sort=price:desc</code> 这种查指定字段进行筛选的方式;<br> 其实ES还可以直接 <code>GET /products/computer/_search?q=diaonao</code> 来进行检索, 这种检索方式会对文档中的所有字段进行匹配;</p></li><li><p>之所以可以对文档中的所有字段进行匹配, 是 <code>_all</code> 元数据的作用</p></li><li><p>当你在ES中索引一个document时, es会自动将该文档的多个field的值全部用字符串的方式连接起来, 变成一个长的字符串, 作为 <code>_all</code> field值, 同时对_all分词并建立索引;<br> 之后在搜索时, 如果没有指定对某个field进行搜索, 默认就会搜索 <code>_all</code> field, 而你传递的内容也会进行分词后去匹配 <code>_all</code> 的倒排索引</p></li><li><p>练习</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DELETE /products</span><br><span class="line">PUT /products/computer/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;lenovo&quot;,</span><br><span class="line">  &quot;desc&quot; : &quot;lianxiang diannao chaobao&quot;,</span><br><span class="line">  &quot;price&quot; : 4500,</span><br><span class="line">  &quot;tag&quot; : [&quot;jieneng&quot;, &quot;xuhang&quot;, &quot;chaobao&quot;] </span><br><span class="line">&#125;</span><br><span class="line"># 下面的检索都可以搜索到上面的文档</span><br><span class="line">GET /products/computer/_search?q=4500</span><br><span class="line">GET /products/computer/_search?q=xuhang</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;all&quot;&gt;&lt;a href=&quot;#all&quot; class=&quot;headerlink&quot; title=&quot;_all&quot;&gt;&lt;/a&gt;&lt;code&gt;_all&lt;/code&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;对于在学习 query-string 搜索时, 一般这样来用 &lt;code&gt;GET /
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://blog.renyimin.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch基础" scheme="http://blog.renyimin.com/tags/Elasticsearch%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>09. 组合多条件搜索</title>
    <link href="http://blog.renyimin.com/2018/06/16/elasticsearch/2018-06-16-09/"/>
    <id>http://blog.renyimin.com/2018/06/16/elasticsearch/2018-06-16-09/</id>
    <published>2018-06-16T02:07:26.000Z</published>
    <updated>2018-11-22T03:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/cn/_most_important_queries.html#_match_all_查询" target="_blank" rel="noopener">查询</a></h2><ol><li><p>虽然 Elasticsearch 自带了很多的查询, 但经常用到的也就那么几个 </p><ul><li><code>match_all</code> : 简单的匹配所有文档, 在没有指定查询方式时(即查询体为空时), 它是默认的查询</li><li><code>match</code> : 无论你在任何字段上进行的是全文搜索还是精确查询, match 查询都是你可用的标准查询<br>如果你在一个全文字段上使用 match 查询，在执行查询前，它将用正确的分析器去分析查询字符串<br>如果在一个精确值的字段上使用它， 例如数字、日期、布尔或者一个 keyword 字符串字段，那么它将会精确匹配给定的值</li><li>不过, 对于精确值的查询，你可能需要使用 <code>filter</code> 过滤语句来取代查询语句，因为 filter 将会被缓存</li><li><p><code>multi_match</code> 查询可以在多个字段上执行相同的 match 查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">DELETE /test/article/1,2,3</span><br><span class="line">PUT /test/article/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &quot;php is the best language&quot;,</span><br><span class="line">  &quot;content&quot;: &quot;this language is very easy to learn&quot;</span><br><span class="line">&#125;</span><br><span class="line">PUT /test/article/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &quot;java is the second language&quot;,</span><br><span class="line">  &quot;content&quot;: &quot;i want to learn java&quot;</span><br><span class="line">&#125;</span><br><span class="line">PUT /test/article/3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &quot;C# is very popular&quot;,</span><br><span class="line">  &quot;content&quot;: &quot;if you want to know something of this language, you can start from C#&quot;</span><br><span class="line">&#125;</span><br><span class="line">GET /test/article/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;:&#123;</span><br><span class="line">    &quot;multi_match&quot; : &#123;</span><br><span class="line">      &quot;query&quot;: &quot;language&quot;,</span><br><span class="line">      &quot;fields&quot;:[&quot;content&quot;, &quot;title&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>range</code> 查询找出那些落在指定区间内的数字或者时间</p></li><li><p><code>term</code> 查询被用于精确值 匹配，这些精确值可能是数字、时间、布尔或者 keyword字符串<br>term 查询对于输入的文本<strong>不分析</strong>, 所以它将给定的值进行精确查询</p></li><li><code>terms</code> 查询和 <code>term</code> 查询一样, 但它允许你指定多值进行匹配, 如果这个字段包含了指定值中的任何一个值，那么这个文档满足条件</li><li><p>需要注意的是: term 和 terms 是不会对输入文本进行分析, 如果你的搜索如下<br>虽然索引中存在 first_name 为 John 的文档, 但是由于该字段是全文域, 分词后可能就是 john, 而使用 terms 或者 term 的话, 由于不会对查询语句中的’John’进行分词, 所以它去匹配分词后的’John’的话, 实际上就是去匹配’john’, 由于大小写不匹配, 所以查询不到结果; 如果查询改为john反而却能匹配到<br>更多term查询的奇葩例子可以查看<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/cn/_finding_exact_values.html#_term_查询文本" target="_blank" rel="noopener">term 查询文本</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">DELETE /test</span><br><span class="line">GET /test/_mapping/language</span><br><span class="line">PUT /test/language/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;first_name&quot;: &quot;jhon&quot;,</span><br><span class="line">  &quot;last_name&quot;: &quot;ren&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET /test/language/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;terms&quot; : &#123;</span><br><span class="line">     &quot;first_name&quot; : [&quot;Jhon&quot;]  </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>exists 查询和 missing 查询被用于查找某个字段是否存在, 与SQL中的 IS_NULL (missing) 和 NOT IS_NULL (exists) 在本质上具有共性;<br>注意: 字段存在和字段值为””不是一个概念, 在ES中貌似无法匹配一个空字符串的字段; 可以参考 <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/cn/_dealing_with_null_values.html" target="_blank" rel="noopener">https://www.elastic.co/guide/cn/elasticsearch/guide/cn/_dealing_with_null_values.html</a></p></li></ul></li><li><p>这些查询方法都是在 HTTP请求体中作为 <strong>query参数</strong> 来使用的;</p></li><li><p><strong>constant_score</strong> : 可以使用它来取代只有 filter 语句的 bool 查询, 在性能上是完全相同的，但对于提高查询简洁性和清晰度有很大帮助;<br> 当你的查询子句只有精确查询时, 可以将 term 查询被放置在 constant_score 中，转成不评分的 filter, 这种方式可以用来取代只有 filter 语句的 bool 查询</p></li></ol><h2 id="组合多查询"><a href="#组合多查询" class="headerlink" title="组合多查询"></a><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/cn/combining-queries-together.html" target="_blank" rel="noopener">组合多查询</a></h2><ol><li><p>现实的查询需求通常需要在多个字段上查询多种多样的文本, 并且根据一系列的标准来过滤; 为了构建类似的高级查询, 你需要一种能够将多查询组合成单一查询的查询方法; 可以用 <strong>bool查询</strong> 来实现需求; bool查询将多查询组合在一起, 成为用户自己想要的布尔查询, 它接收以下参数:</p><ul><li>must : 文档 必须 匹配这些条件才能被包含进来</li><li>must_not : 文档 必须不 匹配这些条件才能被包含进来</li><li>should : 如果满足这些语句中的任意语句，将增加 _score ，否则，无任何影响。它们主要用于修正每个文档的相关性得分</li><li><p>上面的每一个子查询都独自地计算文档的相关性得分。一旦他们的得分被计算出来， bool 查询就将这些得分进行合并并且返回一个代表整个布尔操作的得分。</p></li><li><p>filter(带过滤器的查询) : 必须 匹配，但它以不评分、过滤模式来进行。这些语句对评分没有贡献，只是根据过滤标准来排除或包含文档</p></li></ul></li><li><p>例子1: <strong>should只是针对结果进行加分, 并不会决定是否有匹配结果</strong> (不过, 这只是当<strong>should不在must或should下的时候</strong>)</p><ul><li>只有 <code>must</code> 和 <code>must_not</code> 中的子句是决定了是否能查询出数据</li><li>而 <code>should</code> 只是在针对查询出的数据, 如果对还能满足should子句的文档增加额外的评分 (如果should之外的其他语句不能查询出结果, 即便should可以匹配到文档, 整体查询最终也不会有匹配结果)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">DELETE /test/</span><br><span class="line">PUT /test/cardealer/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;record_type&quot; : &quot;c2b_car_action&quot;,</span><br><span class="line">  &quot;action_point&quot; : &quot;affirm_deal_tinspection&quot;,</span><br><span class="line">  &quot;action_time&quot; : &quot;2018-09-27 10:13:40&quot;,</span><br><span class="line">  &quot;action_operator&quot; : 91,</span><br><span class="line">  &quot;action_operator_name&quot; : &quot;王玥91&quot;,</span><br><span class="line">  &quot;action_target&quot; : 206425533,</span><br><span class="line">  &quot;action_note&quot; : &quot;确认成交：竞拍成功，车辆状态：待验车&quot;</span><br><span class="line">&#125;</span><br><span class="line">PUT /test/cardealer/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;record_type&quot; : &quot;c2b_car_action&quot;,</span><br><span class="line">  &quot;action_point&quot; : &quot;affirm_deal_tinspection&quot;,</span><br><span class="line">  &quot;action_time&quot; : &quot;2018-09-27 10:13:40&quot;,</span><br><span class="line">  &quot;action_operator&quot; : 91,</span><br><span class="line">  &quot;action_operator_name&quot; : &quot;王玥91&quot;,</span><br><span class="line">  &quot;action_target&quot; : 200,</span><br><span class="line">  &quot;action_note&quot; : &quot;确认成交：竞拍成功，车辆状态：待验车&quot;</span><br><span class="line">&#125;</span><br><span class="line">PUT /test/cardealer/3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;record_type&quot; : &quot;c2b_car_action&quot;,</span><br><span class="line">  &quot;action_point&quot; : &quot;affirm_deal_tinspection&quot;,</span><br><span class="line">  &quot;action_time&quot; : &quot;2018-09-27 10:13:40&quot;,</span><br><span class="line">  &quot;action_operator&quot; : 42,</span><br><span class="line">  &quot;action_operator_name&quot; : &quot;王玥42&quot;,</span><br><span class="line">  &quot;action_target&quot; : 301,</span><br><span class="line">  &quot;action_note&quot; : &quot;确认成交：竞拍成功，车辆状态：待验车&quot;</span><br><span class="line">&#125;</span><br><span class="line">PUT /test/cardealer/4</span><br><span class="line">&#123;</span><br><span class="line">  &quot;record_type&quot; : &quot;c2b_car_action&quot;,</span><br><span class="line">  &quot;action_point&quot; : &quot;affirm_deal_tinspection&quot;,</span><br><span class="line">  &quot;action_time&quot; : &quot;2018-09-27 10:13:40&quot;,</span><br><span class="line">  &quot;action_operator&quot; : 42,</span><br><span class="line">  &quot;action_operator_name&quot; : &quot;王玥42&quot;,</span><br><span class="line">  &quot;action_target&quot; : 200,</span><br><span class="line">  &quot;action_note&quot; : &quot;确认成交：竞拍成功，车辆状态：待验车&quot;</span><br><span class="line">&#125;</span><br><span class="line">PUT /test/cardealer/5</span><br><span class="line">&#123;</span><br><span class="line">  &quot;record_type&quot; : &quot;c2b_car_action&quot;,</span><br><span class="line">  &quot;action_point&quot; : &quot;abortive_married_deal&quot;,</span><br><span class="line">  &quot;action_time&quot; : &quot;2018-08-22 17:11:53&quot;,</span><br><span class="line">  &quot;action_note&quot; : &quot;撮合失败，系统自动流拍，车辆状态：销售失败&quot;,</span><br><span class="line">  &quot;action_target&quot; : 600,</span><br><span class="line">  &quot;action_operator&quot; : 83,</span><br><span class="line">  &quot;action_operator_name&quot; : &quot;王玥83&quot;</span><br><span class="line">&#125;</span><br><span class="line">GET /test/cardealer/_search</span><br><span class="line">GET /test/cardealer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123;</span><br><span class="line">    &quot;bool&quot; : &#123;</span><br><span class="line">      &quot;must&quot; : &#123; </span><br><span class="line">        &quot;match&quot; : &#123;&quot;record_type&quot; : &quot;c2b_car_action&quot;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;must_not&quot; : &#123; </span><br><span class="line">        &quot;match&quot; : &#123;&quot;action_point&quot; : &quot;abortive_married_deal&quot;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      # 增加评分</span><br><span class="line">      &quot;should&quot; : [</span><br><span class="line">        &#123;&quot;match&quot; : &#123;&quot;action_operator&quot; : 42&#125;&#125;,</span><br><span class="line">        &#123;&quot;match&quot; : &#123;&quot;action_target&quot; : 200&#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>例2: 如果不想因为某个字段的匹配而增加评分, 可以将该匹配放在 filter 过滤语句中; </p><ul><li>当然, filter 子句 和 查询子句 都决定了是否有匹配结果, 这是它两 和 上面那种 should 用法的不同之处</li><li><p>如下可以看到 filter 过滤子句 和 查询子句的 区别, 虽然结果一样, 但是结果的评分有差异</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 查询语句</span><br><span class="line">GET /test/cardealer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123;</span><br><span class="line">    &quot;bool&quot; : &#123;</span><br><span class="line">      &quot;must&quot; : [ </span><br><span class="line">        &#123;&quot;match&quot; : &#123;&quot;record_type&quot; : &quot;c2b_car_action&quot;&#125;&#125;,</span><br><span class="line">        &#123;&quot;match&quot; : &#123; &quot;action_operator&quot; : 42 &#125; &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;must_not&quot; : [ </span><br><span class="line">        &#123;&quot;match&quot; : &#123;&quot;action_point&quot; : &quot;abortive_married_deal&quot;&#125;&#125;,</span><br><span class="line">        &#123;&quot;match&quot; : &#123;&quot;action_target&quot; : 200&#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 过滤语句</span><br><span class="line">GET /test/cardealer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123;</span><br><span class="line">    &quot;bool&quot; : &#123;</span><br><span class="line">      &quot;must&quot; : &#123; </span><br><span class="line">        &quot;match&quot; : &#123;&quot;record_type&quot; : &quot;c2b_car_action&quot;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;must_not&quot; : &#123; </span><br><span class="line">        &quot;match&quot; : &#123;&quot;action_point&quot; : &quot;abortive_married_deal&quot;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;filter&quot; : [</span><br><span class="line">        &#123;&quot;match&quot; : &#123;&quot;action_operator&quot; : 42&#125;&#125;,</span><br><span class="line">        &#123;&quot;match&quot; : &#123;&quot;action_target&quot; : 200&#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将 bool 查询包裹在 filter 语句中, 还可以在过滤标准中增加布尔逻辑</p></li></ul></li><li><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/cn/combining-queries-together.html#constant_score-query" target="_blank" rel="noopener">constant_score 查询</a>   </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">DELETE /test/article/1,2,3</span><br><span class="line">PUT /test/article/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &quot;php is the best language&quot;,</span><br><span class="line">  &quot;content&quot;: &quot;this language is very easy to learn&quot;,</span><br><span class="line">  &quot;author_id&quot;: 71</span><br><span class="line">&#125;</span><br><span class="line">PUT /test/article/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &quot;java is the second language&quot;,</span><br><span class="line">  &quot;content&quot;: &quot;i want to learn java&quot;,</span><br><span class="line">  &quot;author_id&quot;: 32</span><br><span class="line">&#125;</span><br><span class="line">PUT /test/article/3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &quot;C# is very popular&quot;,</span><br><span class="line">  &quot;content&quot;: &quot;if you want to know something of this language, you can start from C#&quot;,</span><br><span class="line">  &quot;author_id&quot;: 56</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 下面顺带演示了sort定制排序, 而不是使用默认的相关度排序</span><br><span class="line">GET /test/article/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;:&#123;</span><br><span class="line">    &quot;constant_score&quot;: &#123;</span><br><span class="line">      &quot;filter&quot; : &#123;</span><br><span class="line">        &quot;term&quot;: &#123;&quot;content&quot;: &quot;language&quot;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: &#123;&quot;author_id&quot;: &#123;&quot;order&quot;:&quot;desc&quot;&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET /test/article/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;:&#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot; : &#123;</span><br><span class="line">        &quot;term&quot;: &#123;&quot;content&quot;: &quot;language&quot;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: &#123;&quot;author_id&quot;: &#123;&quot;order&quot;:&quot;desc&quot;&#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="a-AND-b-OR-c-型"><a href="#a-AND-b-OR-c-型" class="headerlink" title="a AND (b OR c) 型"></a>a AND (b OR c) 型</h2><ol><li><p>传统SQL经常会有如下形式的查询条件组合</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT ...</span><br><span class="line">FROM   ...</span><br><span class="line">WHERE  ...      = &quot;...&quot;</span><br><span class="line">  AND (     ... = &quot;...&quot;</span><br><span class="line">       OR ... = &quot;...&quot; )</span><br></pre></td></tr></table></figure></li><li><p>es 中写法如下 (下面展示了用 查询语句 和 过滤语句两种写法)</p><ul><li><p>可以看到, <strong>在这种写法下, should子句此时的用法和一开始那种不同, 它不仅仅是提升结果评分, 而是直接决定了结果是否匹配</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET /test/cardealer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123;</span><br><span class="line">    &quot;bool&quot; : &#123;</span><br><span class="line">      &quot;must&quot; : [</span><br><span class="line">        &#123; &quot;match&quot; : &#123;&quot;record_type&quot; : &quot;c2b_car_action&quot;&#125;&#125;, </span><br><span class="line">        &#123; &quot;bool&quot; : &#123; </span><br><span class="line">          &quot;should&quot; : [</span><br><span class="line">            &#123; &quot;match&quot; : &#123;&quot;action_point&quot; : &quot;abortive_married_deal&quot;&#125;&#125;, </span><br><span class="line">            &#123; &quot;term&quot; : &#123;&quot;action_target&quot; : 600&#125;&#125; </span><br><span class="line">          ]</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET /test/cardealer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123;</span><br><span class="line">    # 过滤可以使用 constant_score</span><br><span class="line">    &quot;constant_score&quot; : &#123;</span><br><span class="line">      &quot;filter&quot; : &#123;</span><br><span class="line">        &quot;bool&quot; : &#123;</span><br><span class="line">          &quot;must&quot; : [</span><br><span class="line">            &#123; &quot;match&quot; : &#123;&quot;record_type&quot; : &quot;c2b_car_action&quot;&#125;&#125;, </span><br><span class="line">            &#123; &quot;bool&quot; : &#123; </span><br><span class="line">              &quot;should&quot; : [</span><br><span class="line">                &#123; &quot;match&quot; : &#123;&quot;action_point&quot; : &quot;abortive_married_deal&quot;&#125;&#125;, </span><br><span class="line">                &#123; &quot;term&quot; : &#123;&quot;action_target&quot; : 600&#125;&#125; </span><br><span class="line">              ]</span><br><span class="line">            &#125;&#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="a-OR-b-AND-c-型"><a href="#a-OR-b-AND-c-型" class="headerlink" title="a OR (b AND c) 型"></a>a OR (b AND c) 型</h2><ol><li><p>传统SQL经常会有如下形式的查询条件组合</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT ...</span><br><span class="line">    FROM   ...</span><br><span class="line">    WHERE  ... = &quot;...&quot;</span><br><span class="line">      OR (     ... = &quot;...&quot;</span><br><span class="line">           AND ... = &quot;...&quot; )</span><br></pre></td></tr></table></figure></li><li><p>es 中写法如下</p><ul><li>可以看到, <strong>在这种写法下, should子句不仅仅是提升结果评分, 而是直接决定了结果是否匹配</strong>; 可参考<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/cn/bool-query.html#_控制精度" target="_blank" rel="noopener">组合查询—控制精度</a>中的介绍<blockquote><p>所有 must 语句必须匹配，所有 must_not 语句都必须不匹配，但有多少 should 语句应该匹配呢？ 默认情况下，没有 should 语句是必须匹配的，只有一个例外：那就是当没有 must 语句的时候，至少有一个 should 语句必须匹配。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GET /test/cardealer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123;</span><br><span class="line">    &quot;bool&quot; : &#123;      # 不带评分的过滤查询写法只用把这里换成 constant_score</span><br><span class="line">       &quot;must&quot; : &#123;   # 不带评分的过滤查询写法只用把这里换成 filter</span><br><span class="line">          &quot;bool&quot; : &#123;</span><br><span class="line">            &quot;should&quot; : [</span><br><span class="line">              &#123; &quot;match&quot; : &#123;&quot;record_type&quot; : &quot;c2b_car_action&quot;&#125;&#125;, </span><br><span class="line">              &#123; &quot;bool&quot; : &#123; </span><br><span class="line">                &quot;must&quot; : [</span><br><span class="line">                  &#123; &quot;match&quot; : &#123;&quot;action_point&quot; : &quot;abortive_married_deal&quot;&#125;&#125;, </span><br><span class="line">                  &#123; &quot;term&quot; : &#123;&quot;action_target&quot; : 200&#125;&#125; </span><br><span class="line">                ]</span><br><span class="line">              &#125;&#125;</span><br><span class="line">            ]</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul></li></ol><h2 id="组合过滤"><a href="#组合过滤" class="headerlink" title="组合过滤"></a><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/cn/combining-filters.html" target="_blank" rel="noopener">组合过滤</a></h2><ol><li><p>和组合查询类似, 主要是对组合查询子句的搭配, 基本上都是如下构造, 然后就是放进 filter 或者 must 的区别, 之前例子已经给过了</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;bool&quot; : &#123;</span><br><span class="line">      &quot;must&quot; :     [],</span><br><span class="line">      &quot;should&quot; :   [],</span><br><span class="line">      &quot;must_not&quot; : [],</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组合查询可参考 <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/cn/bool-query.html" target="_blank" rel="noopener">https://www.elastic.co/guide/cn/elasticsearch/guide/cn/bool-query.html</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;查询&quot;&gt;&lt;a href=&quot;#查询&quot; class=&quot;headerlink&quot; title=&quot;查询&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.elastic.co/guide/cn/elasticsearch/guide/cn/_most_important_
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://blog.renyimin.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch基础" scheme="http://blog.renyimin.com/tags/Elasticsearch%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>08. 全文检索,结构化精确检索,短语检索,统计 预习</title>
    <link href="http://blog.renyimin.com/2018/06/15/elasticsearch/2018-06-15-08/"/>
    <id>http://blog.renyimin.com/2018/06/15/elasticsearch/2018-06-15-08/</id>
    <published>2018-06-15T10:56:31.000Z</published>
    <updated>2018-11-22T03:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查询和过滤"><a href="#查询和过滤" class="headerlink" title="查询和过滤"></a>查询和过滤</h2><ol><li><p>在es中检索文档时候, 对文档的筛选分为 <strong>查询</strong> 和 <strong>过滤</strong>, 这两种方式是不太一样的</p></li><li><p>练习, 搜索商品desc字段中包含 ‘diannao’, 并且售价大于5000的商品</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot; : &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;desc&quot;:&quot;diannao&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;range&quot;: &#123;</span><br><span class="line">          &quot;price&quot; : &#123;&quot;gt&quot;: 5000&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意:</p><ul><li><code>结构化检索</code>(精确类型字段的检索) 一般会被放到filter过滤语句中, 不会进行分词和相关度排名, 但会对过滤进行缓存</li><li><code>全文检索</code>(全文类型字段的检索) 一般用查询语句进行筛选, 会进行分词和相关度排名</li></ul></li></ol><h2 id="full-text-检索"><a href="#full-text-检索" class="headerlink" title="full-text 检索"></a>full-text 检索</h2><ol><li><p>ES可以进行全文检索并可以进行相关度排名</p></li><li><p>重新准备数据</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">DELETE /products</span><br><span class="line">PUT /products/computer/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;lenovo&quot;,</span><br><span class="line">  &quot;desc&quot; : &quot;lianxiang diannao chaobao&quot;,</span><br><span class="line">  &quot;price&quot; : 4500,</span><br><span class="line">  &quot;tag&quot; : [&quot;jieneng&quot;, &quot;xuhang&quot;, &quot;chaobao&quot;] </span><br><span class="line">&#125;</span><br><span class="line">PUT /products/computer/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;acer&quot;,</span><br><span class="line">  &quot;desc&quot; : &quot;gaoqing hongji diannao&quot;,</span><br><span class="line">  &quot;price&quot; : 4870,</span><br><span class="line">  &quot;tag&quot; : [&quot;jieneng&quot;, &quot;chaobao&quot;, &quot;gaoqing&quot;] </span><br><span class="line">&#125;</span><br><span class="line">PUT /products/computer/3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;dell&quot;,</span><br><span class="line">  &quot;desc&quot; : &quot;daier chaoji diannao&quot;,</span><br><span class="line">  &quot;price&quot; : 5499,</span><br><span class="line">  &quot;tag&quot; : [&quot;shishang&quot;, &quot;gaoqing&quot;, &quot;gaoxingneng&quot;] </span><br><span class="line">&#125;</span><br><span class="line">POST /products/computer/</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;huawei&quot;,</span><br><span class="line">  &quot;desc&quot; : &quot;china best diannao gaoqing&quot;,</span><br><span class="line">  &quot;price&quot; : 6080,</span><br><span class="line">  &quot;tag&quot; : [&quot;gaoxingneng&quot;, &quot;gaoqing&quot;, &quot;jieneng&quot;] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>练习, 全文检索</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;desc&quot;:&quot;gaoqing diannao&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>练习 全文高亮检索</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123;</span><br><span class="line">    &quot;match&quot; : &#123;</span><br><span class="line">      &quot;desc&quot;:&quot;gaoqing diannao&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;highlight&quot;: &#123;</span><br><span class="line">    &quot;fields&quot; : &#123;</span><br><span class="line">      &quot;desc&quot; : &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 结果:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 2,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 4,</span><br><span class="line">    &quot;max_score&quot;: 0.5753642,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;products&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;computer&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;AWbE6HmlWC0s-aachNUv&quot;,</span><br><span class="line">        &quot;_score&quot;: 0.5753642,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;huawei&quot;,</span><br><span class="line">          &quot;desc&quot;: &quot;china best diannao gaoqing&quot;,</span><br><span class="line">          &quot;price&quot;: 6080,</span><br><span class="line">          &quot;tag&quot;: [</span><br><span class="line">            &quot;gaoxingneng&quot;,</span><br><span class="line">            &quot;gaoqing&quot;,</span><br><span class="line">            &quot;jieneng&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;highlight&quot;: &#123;</span><br><span class="line">          &quot;desc&quot;: [</span><br><span class="line">            &quot;china best &lt;em&gt;diannao&lt;/em&gt; &lt;em&gt;gaoqing&lt;/em&gt;&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure></li></ol><h2 id="结构化精确检索"><a href="#结构化精确检索" class="headerlink" title="结构化精确检索"></a>结构化精确检索</h2><h2 id="phrase-search-短语搜索"><a href="#phrase-search-短语搜索" class="headerlink" title="phrase search(短语搜索)"></a>phrase search(短语搜索)</h2><ol><li><p>与全文索引不同, 全文索引会对你发送的 查询串 进行拆分(做分词处理), 然后去倒排索引中与之前在存储文档时分好的词项进行匹配, 只要你发送的查询内容拆分后, 有一个词能匹配到倒排索引中的词项, 该词项所对应的文档就可以返回;  </p></li><li><p>phrase search(短语搜索)则不会对你发送的 查询串 进行分词, 而是要求在指定查询的字段中必须包含和你发送的查询串一模一样的内容 才算是匹配, 否则该文档不能作为结果返回; </p></li><li><p><strong>短语搜索 和 结构化搜索还是不一样</strong></p><ul><li>结构化搜索是 你的查询串 和 指定的文档字段内容 是完全一致的, 查询串和字段本身都不会做分词, 一般该字段也是精确类型的字段类型;</li><li>而 短语搜索 则是, 你的 查询串 不会做分词, 但是你查询的字段可能会做分词, 你的查询串需要包含在 指定字段中;</li><li>下一篇可以查看一下terms的用法和效果</li></ul></li><li><p>搜索商品desc字段中包含 ‘gaoqing diannao’短语 的文档</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 短语检索</span><br><span class="line">GET /products/computer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123;</span><br><span class="line">    &quot;match_phrase&quot; : &#123;</span><br><span class="line">      &quot;desc&quot;: &quot;diannao gaoqing&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果发现, 虽然还是查询的全文字段desc, 但是结果却只有一个</li></ul></li></ol><h2 id="提前了解ES统计语法"><a href="#提前了解ES统计语法" class="headerlink" title="提前了解ES统计语法"></a>提前了解ES统计语法</h2><ol><li><p>统计商品 每个tag下的商品数量, 即, 根据商品的tag进行分组</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;aggs&quot; : &#123;</span><br><span class="line">    &quot;group_by_tag&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;&quot;field&quot;:&quot;tag&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>初次运行报错</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;error&quot;: &#123;</span><br><span class="line">    &quot;root_cause&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;illegal_argument_exception&quot;,</span><br><span class="line">        &quot;reason&quot;: &quot;Fielddata is disabled on text fields by default. Set fielddata=true on [tag] in order to load fielddata in memory by uninverting the inverted index. Note that this can however use significant memory. Alternatively use a keyword field instead.&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;type&quot;: &quot;search_phase_execution_exception&quot;,</span><br><span class="line">    &quot;reason&quot;: &quot;all shards failed&quot;,</span><br><span class="line">    &quot;phase&quot;: &quot;query&quot;,</span><br><span class="line">    &quot;grouped&quot;: true,</span><br><span class="line">    &quot;failed_shards&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;shard&quot;: 0,</span><br><span class="line">        &quot;index&quot;: &quot;products&quot;,</span><br><span class="line">        &quot;node&quot;: &quot;eCgKpl8JRbqwL3QY0Vuz3A&quot;,</span><br><span class="line">        &quot;reason&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;illegal_argument_exception&quot;,</span><br><span class="line">          &quot;reason&quot;: &quot;Fielddata is disabled on text fields by default. Set fielddata=true on [tag] in order to load fielddata in memory by uninverting the inverted index. Note that this can however use significant memory. Alternatively use a keyword field instead.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot;: 400</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解决方案: 将文本field的 filedata 属性设置为true (现在不用知道这玩意儿, 先尽快解决, 看到聚合分析的预发和效果, 后面讲在详聊该问题)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT /products/_mapping/computer</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;tag&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">      &quot;fielddata&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重新执行统计语句, 发现返回中除了分析的结果, 还包含了查询的文档内容; 如果只想显示聚合分析的结果, 可以如下设置size为0:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot; : &#123;</span><br><span class="line">    &quot;group_by_tag&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;&quot;field&quot;:&quot;tag&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>练习, 针对名称中包含”china”的商品, 计算每个tag下的商品数</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot; : &#123;</span><br><span class="line">      &quot;desc&quot; : &quot;gaoqing&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_tag&quot; : &#123;</span><br><span class="line">      &quot;terms&quot; : &#123;&quot;field&quot;: &quot;tag&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>练习, 计算每个tag下商品的平均价格 (先分组, 再计算每组的平均值)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_tag&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;&quot;field&quot;: &quot;tag&quot;&#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;avg_by_price&quot; : &#123;</span><br><span class="line">          &quot;avg&quot; : &#123;&quot;field&quot;:&quot;price&quot;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 结果:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 5,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 16,</span><br><span class="line">    &quot;max_score&quot;: 0,</span><br><span class="line">    &quot;hits&quot;: []</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggregations&quot;: &#123;</span><br><span class="line">    &quot;group_by_tag&quot;: &#123;</span><br><span class="line">      &quot;doc_count_error_upper_bound&quot;: 0,</span><br><span class="line">      &quot;sum_other_doc_count&quot;: 0,</span><br><span class="line">      &quot;buckets&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;gaoqing&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 3,</span><br><span class="line">          &quot;avg_by_price&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 5483</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;jieneng&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 3,</span><br><span class="line">          &quot;avg_by_price&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 5150</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;chaobao&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 2,</span><br><span class="line">          &quot;avg_by_price&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 4685</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;gaoxingneng&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 2,</span><br><span class="line">          &quot;avg_by_price&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 5789.5</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;shishang&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 1,</span><br><span class="line">          &quot;avg_by_price&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 5499</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;xuhang&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 1,</span><br><span class="line">          &quot;avg_by_price&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 4500</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>练习, 计算每个tag下商品的平均价格, 并且按照平均价格进行排序 </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;:0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_tag&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;&quot;field&quot;:&quot;tag&quot;, &quot;order&quot;: &#123;&quot;avg_by_price&quot;:&quot;desc&quot;&#125;&#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;avg_by_price&quot;: &#123;</span><br><span class="line">          &quot;avg&quot;: &#123;&quot;field&quot;: &quot;price&quot;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 结果:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 3,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 16,</span><br><span class="line">    &quot;max_score&quot;: 0,</span><br><span class="line">    &quot;hits&quot;: []</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggregations&quot;: &#123;</span><br><span class="line">    &quot;group_by_tag&quot;: &#123;</span><br><span class="line">      &quot;doc_count_error_upper_bound&quot;: 0,</span><br><span class="line">      &quot;sum_other_doc_count&quot;: 0,</span><br><span class="line">      &quot;buckets&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;gaoxingneng&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 2,</span><br><span class="line">          &quot;avg_by_price&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 5789.5</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;shishang&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 1,</span><br><span class="line">          &quot;avg_by_price&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 5499</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;gaoqing&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 3,</span><br><span class="line">          &quot;avg_by_price&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 5483</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;jieneng&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 3,</span><br><span class="line">          &quot;avg_by_price&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 5150</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;chaobao&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 2,</span><br><span class="line">          &quot;avg_by_price&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 4685</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;xuhang&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 1,</span><br><span class="line">          &quot;avg_by_price&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 4500</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>练习, 按照指定的价格范围区间进行分组, 然后再每个分组内再按照tag进行分组, 最后在计算每组的平均价格</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;:0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_price_range&quot;: &#123;</span><br><span class="line">      &quot;range&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;price&quot;,</span><br><span class="line">        &quot;ranges&quot;: [</span><br><span class="line">          &#123;&quot;from&quot;:4500, &quot;to&quot;:5000&#125;,</span><br><span class="line">          &#123;&quot;from&quot;:5000, &quot;to&quot;:5500&#125;,</span><br><span class="line">          &#123;&quot;from&quot;:5500, &quot;to&quot;:6100&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;group_by_tags&quot;: &#123;</span><br><span class="line">          &quot;terms&quot;: &#123;&quot;field&quot;: &quot;tag&quot;&#125;,</span><br><span class="line">          &quot;aggs&quot;:&#123;</span><br><span class="line">            &quot;avg_by_price&quot;: &#123;</span><br><span class="line">              &quot;avg&quot;: &#123;&quot;field&quot;:&quot;price&quot;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 结果: </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 1,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 16,</span><br><span class="line">    &quot;max_score&quot;: 0,</span><br><span class="line">    &quot;hits&quot;: []</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggregations&quot;: &#123;</span><br><span class="line">    &quot;group_by_price_range&quot;: &#123;</span><br><span class="line">      &quot;buckets&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;4500.0-5000.0&quot;,</span><br><span class="line">          &quot;from&quot;: 4500,</span><br><span class="line">          &quot;to&quot;: 5000,</span><br><span class="line">          &quot;doc_count&quot;: 2,</span><br><span class="line">          &quot;group_by_tags&quot;: &#123;</span><br><span class="line">            &quot;doc_count_error_upper_bound&quot;: 0,</span><br><span class="line">            &quot;sum_other_doc_count&quot;: 0,</span><br><span class="line">            &quot;buckets&quot;: [</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;key&quot;: &quot;chaobao&quot;,</span><br><span class="line">                &quot;doc_count&quot;: 2,</span><br><span class="line">                &quot;avg_by_price&quot;: &#123;</span><br><span class="line">                  &quot;value&quot;: 4685</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;key&quot;: &quot;jieneng&quot;,</span><br><span class="line">                &quot;doc_count&quot;: 2,</span><br><span class="line">                &quot;avg_by_price&quot;: &#123;</span><br><span class="line">                  &quot;value&quot;: 4685</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;key&quot;: &quot;gaoqing&quot;,</span><br><span class="line">                &quot;doc_count&quot;: 1,</span><br><span class="line">                &quot;avg_by_price&quot;: &#123;</span><br><span class="line">                  &quot;value&quot;: 4870</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;key&quot;: &quot;xuhang&quot;,</span><br><span class="line">                &quot;doc_count&quot;: 1,</span><br><span class="line">                &quot;avg_by_price&quot;: &#123;</span><br><span class="line">                  &quot;value&quot;: 4500</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;5000.0-5500.0&quot;,</span><br><span class="line">          &quot;from&quot;: 5000,</span><br><span class="line">          &quot;to&quot;: 5500,</span><br><span class="line">          &quot;doc_count&quot;: 1,</span><br><span class="line">          &quot;group_by_tags&quot;: &#123;</span><br><span class="line">            &quot;doc_count_error_upper_bound&quot;: 0,</span><br><span class="line">            &quot;sum_other_doc_count&quot;: 0,</span><br><span class="line">            &quot;buckets&quot;: [</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;key&quot;: &quot;gaoqing&quot;,</span><br><span class="line">                &quot;doc_count&quot;: 1,</span><br><span class="line">                &quot;avg_by_price&quot;: &#123;</span><br><span class="line">                  &quot;value&quot;: 5499</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;key&quot;: &quot;gaoxingneng&quot;,</span><br><span class="line">                &quot;doc_count&quot;: 1,</span><br><span class="line">                &quot;avg_by_price&quot;: &#123;</span><br><span class="line">                  &quot;value&quot;: 5499</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;key&quot;: &quot;shishang&quot;,</span><br><span class="line">                &quot;doc_count&quot;: 1,</span><br><span class="line">                &quot;avg_by_price&quot;: &#123;</span><br><span class="line">                  &quot;value&quot;: 5499</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;5500.0-6100.0&quot;,</span><br><span class="line">          &quot;from&quot;: 5500,</span><br><span class="line">          &quot;to&quot;: 6100,</span><br><span class="line">          &quot;doc_count&quot;: 1,</span><br><span class="line">          &quot;group_by_tags&quot;: &#123;</span><br><span class="line">            &quot;doc_count_error_upper_bound&quot;: 0,</span><br><span class="line">            &quot;sum_other_doc_count&quot;: 0,</span><br><span class="line">            &quot;buckets&quot;: [</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;key&quot;: &quot;gaoqing&quot;,</span><br><span class="line">                &quot;doc_count&quot;: 1,</span><br><span class="line">                &quot;avg_by_price&quot;: &#123;</span><br><span class="line">                  &quot;value&quot;: 6080</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;key&quot;: &quot;gaoxingneng&quot;,</span><br><span class="line">                &quot;doc_count&quot;: 1,</span><br><span class="line">                &quot;avg_by_price&quot;: &#123;</span><br><span class="line">                  &quot;value&quot;: 6080</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;key&quot;: &quot;jieneng&quot;,</span><br><span class="line">                &quot;doc_count&quot;: 1,</span><br><span class="line">                &quot;avg_by_price&quot;: &#123;</span><br><span class="line">                  &quot;value&quot;: 6080</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;查询和过滤&quot;&gt;&lt;a href=&quot;#查询和过滤&quot; class=&quot;headerlink&quot; title=&quot;查询和过滤&quot;&gt;&lt;/a&gt;查询和过滤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在es中检索文档时候, 对文档的筛选分为 &lt;strong&gt;查询&lt;/strong&gt; 和 &lt;stron
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://blog.renyimin.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch基础" scheme="http://blog.renyimin.com/tags/Elasticsearch%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>07. 查询小优化</title>
    <link href="http://blog.renyimin.com/2018/06/14/elasticsearch/2018-06-14-07/"/>
    <id>http://blog.renyimin.com/2018/06/14/elasticsearch/2018-06-14-07/</id>
    <published>2018-06-14T02:50:39.000Z</published>
    <updated>2018-11-22T03:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>由于你的每个查询操作都可能会被转发到不同node的shard去执行, 现在假设你的查询, 会打到不同的10个shard上, 每个shard上都要花费1秒钟才能出结果, 这样你总共10s后才会给用户响应, 如果是个商品列表, 用户体验就会非常差<br> 假设本来需要在10秒钟拿到100条数据(每个shard上10条), 现在你可以设置让es在1秒钟就让请求返回, 只拿到部分数据即可<br> 此时可以在查询请求时跟上 <code>timeout</code> 参数(10ms, 1s， 1m): <code>GET /_search?timeout=1ms</code>  (可灌入大量数据做测试)</p></li><li><p>深度分页问题: 假设你的列表每页展示20条数据, 总共1万页, 当我们在使用ES进行分页搜索时, 你想查询第9900页的那20条数据<br>当你的请求到达第一个协调节点后, 它会要求ES给你返回所有该索引对应的primary-shard上的前9900页的数据, 然后es在内存中排序后, 这样会大量占用当前协调节点的计算机资源, 所以尽量避免出现这种深度分页的查询;</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;由于你的每个查询操作都可能会被转发到不同node的shard去执行, 现在假设你的查询, 会打到不同的10个shard上, 每个shard上都要花费1秒钟才能出结果, 这样你总共10s后才会给用户响应, 如果是个商品列表, 用户体验就会非常差&lt;br&gt; 假设
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://blog.renyimin.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch基础" scheme="http://blog.renyimin.com/tags/Elasticsearch%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>06. mget, bulk 批量操作</title>
    <link href="http://blog.renyimin.com/2018/06/10/elasticsearch/2018-06-10-06/"/>
    <id>http://blog.renyimin.com/2018/06/10/elasticsearch/2018-06-10-06/</id>
    <published>2018-06-10T09:06:39.000Z</published>
    <updated>2018-11-22T03:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mget-批量查询"><a href="#mget-批量查询" class="headerlink" title="mget 批量查询"></a>mget 批量查询</h2><ol><li>批量查询可以只发送一次网络请求, 返回多条查询结果, 能大大缩减网络请求的性能开销</li><li>练习 : <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /_mget</span><br><span class="line">&#123;</span><br><span class="line">  &quot;docs&quot; : [</span><br><span class="line">    &#123;&quot;_index&quot;:&quot;products&quot;,&quot;_type&quot;:&quot;computer&quot;,&quot;_id&quot;:1&#125;,</span><br><span class="line">    &#123;&quot;_index&quot;:&quot;products&quot;,&quot;_type&quot;:&quot;computer&quot;,&quot;_id&quot;:2&#125;,</span><br><span class="line">    &#123;&quot;_index&quot;:&quot;blogs&quot;,&quot;_type&quot;:&quot;php&quot;,&quot;_id&quot;:1&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="bulk"><a href="#bulk" class="headerlink" title="bulk"></a>bulk</h2><ol><li><p>语法: 每个操作要两个json串, 语法如下:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;action&quot;:&#123;&quot;metadata&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;data&quot;&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以执行的操作类型如:</p><ul><li>delete: 删除一个文档, 只要一个json串就可以了</li><li>create: <code>PUT /index/type/id/_create</code> 创建, 存在会报错</li><li>index: 即普通的 <code>put</code> 操作, 可以是创建也可以是全量替换文档</li><li>update: 执行部分字段更新</li></ul></li><li><p>练习:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">DELETE /products</span><br><span class="line">PUT /products/computer/1    # 先创建一个文档</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;lenovo&quot;,</span><br><span class="line">  &quot;desc&quot; : &quot;lianxiang diannao chaobao&quot;,</span><br><span class="line">  &quot;price&quot; : 4500,</span><br><span class="line">  &quot;tag&quot; : [&quot;jieneng&quot;, &quot;xuhang&quot;, &quot;chaobao&quot;] </span><br><span class="line">&#125;</span><br><span class="line">GET /products/computer/_search</span><br><span class="line">POST /products/_bulk</span><br><span class="line">&#123;&quot;delete&quot; : &#123;&quot;_type&quot; : &quot;computer&quot;, &quot;_id&quot; : 1&#125;&#125;  # 删除id为1的文档 (1行json即可)</span><br><span class="line">&#123;&quot;create&quot; : &#123;&quot;_type&quot; : &quot;computer&quot;, &quot;_id&quot; : 2&#125;&#125;  # 创建id为2的文档 (2行json)</span><br><span class="line">&#123;&quot;test_field&quot; : &quot;_bulk-create-test2&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot; : &#123;&quot;_type&quot; : &quot;computer&quot;&#125;&#125;              # 创建一个文档 (es生成id, 2行json)</span><br><span class="line">&#123;&quot;test_field&quot; : &quot;_bulk-index-test3&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot; : &#123;&quot;_type&quot; : &quot;computer&quot;, &quot;_id&quot; : 3&#125;&#125;   # 创建一个id为3的文档 (2行json)</span><br><span class="line">&#123;&quot;test_field&quot; : &quot;_bulk-index-test3&quot;, &quot;test_field2&quot; : &quot;_bulk-index-test3&quot;&#125;</span><br><span class="line">&#123;&quot;update&quot; : &#123;&quot;_type&quot; : &quot;computer&quot;, &quot;_id&quot; : 3, &quot;_retry_on_conflict&quot;: 3 &#125;&#125;    # 更改id为3的文档中的test_field字段</span><br><span class="line">&#123;&quot;doc&quot; : &#123;&quot;test_field&quot; : &quot;_bulk-index-update-test3&quot;&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>bulk操作中, 任何一个操作失败, 不会影响其他的操作, 但是在返回结果里会有异常日志</p></li><li><p>bulk的请求会被加载到内存中, 所以如果太大的话, 性能反而会下降, 因此需要通过反复测试来获取一个比较合理的bulk size, 一般从1000~5000条数据开始尝试增加数据; 如果看大小的话, 最好在5-15M之间;</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;mget-批量查询&quot;&gt;&lt;a href=&quot;#mget-批量查询&quot; class=&quot;headerlink&quot; title=&quot;mget 批量查询&quot;&gt;&lt;/a&gt;mget 批量查询&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;批量查询可以只发送一次网络请求, 返回多条查询结果, 能大大缩减网络请求
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://blog.renyimin.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch基础" scheme="http://blog.renyimin.com/tags/Elasticsearch%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>05. ES的搜索方式 Query-string 与 query DSL, multi-index, multi-type搜索模式</title>
    <link href="http://blog.renyimin.com/2018/06/10/elasticsearch/2018-06-10-05/"/>
    <id>http://blog.renyimin.com/2018/06/10/elasticsearch/2018-06-10-05/</id>
    <published>2018-06-10T06:33:46.000Z</published>
    <updated>2018-11-22T03:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Query-string-搜索"><a href="#Query-string-搜索" class="headerlink" title="Query-string 搜索"></a>Query-string 搜索</h2><ol><li><p>之所以叫 query-string, 是因为search的参数都是以http请求的 query-string 来传递的</p></li><li><p>练习, 搜索全部商品 <code>GET /products/computer/_search</code></p></li><li><p>练习, 搜索商品desc字段中包含 ‘diannao’, 并按照售价排序 <code>GET /products/computer/_search?q=desc:diannao&amp;sort=price:desc</code></p></li><li><p>query-string这种搜索比较适合在命令行使用curl快速地发一个请求来检索信息, 如果查询比较复杂, 一般不太适用, 正式开发中比较少用; </p></li></ol><h2 id="query-DSL"><a href="#query-DSL" class="headerlink" title="query DSL"></a>query DSL</h2><ol><li><p>DSL(Domain Specified Language): 领域特定语言 (这里即 ES的领域特定语言), 是在HTTP的请求体中通过json构建查询语法, 比较方便, 可以构建各种复杂语法;</p></li><li><p>练习, 查询所有商品</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>练习, 搜索商品desc字段中包含 ‘diannao’, 并按照售价排序</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;desc&quot;:&quot;diannao&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot; : [</span><br><span class="line">    &#123;&quot;price&quot; : &quot;desc&quot;&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>练习, 分页查询商品</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;from&quot; : 0,</span><br><span class="line">  &quot;size&quot; : 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>练习, 指定需要返回的字段 (使用<code>_source</code>元数据: 可以指定返回哪些field)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/1?_source=name,price</span><br></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET /products/computer/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot; : [&quot;name&quot;, &quot;desc&quot;, &quot;tag&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>query DSL 可以在HTTP请求体中构建非常复杂的查询语句, 所以比较常用; 更多复杂用法后面会聊到;</p></li></ol><h2 id="multi-index-multi-type搜索模式"><a href="#multi-index-multi-type搜索模式" class="headerlink" title="multi-index, multi-type搜索模式"></a>multi-index, multi-type搜索模式</h2><ol><li><code>GET /_search</code> : 检索所有index, 所有type下的数据</li><li><code>GET /index/_search</code> : 指定一个index, 搜索其下所有type的数据</li><li><code>GET /index1,index2/_search</code> : 指定多个index, 搜索他们下面所有type的数据</li><li><code>GET /index1,index2/type1,type2/_search</code> : 指定多个index, 搜索他们下面指定的多个type的数据</li><li><code>_all/type1,type2/_search</code> : 搜索所有index下指定的多个type的数据</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Query-string-搜索&quot;&gt;&lt;a href=&quot;#Query-string-搜索&quot; class=&quot;headerlink&quot; title=&quot;Query-string 搜索&quot;&gt;&lt;/a&gt;Query-string 搜索&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;之所以叫 quer
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://blog.renyimin.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch基础" scheme="http://blog.renyimin.com/tags/Elasticsearch%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>04. 简单尝试 CURD</title>
    <link href="http://blog.renyimin.com/2018/06/10/elasticsearch/2018-06-10-04/"/>
    <id>http://blog.renyimin.com/2018/06/10/elasticsearch/2018-06-10-04/</id>
    <published>2018-06-10T02:36:57.000Z</published>
    <updated>2018-11-22T03:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cat-Api"><a href="#Cat-Api" class="headerlink" title="Cat Api"></a>Cat Api</h2><ol><li><p>ES提供的 <code>Cat Api</code> 可以用来查看 集群当前状态, 涉及到 <code>shard</code>/<code>node</code>/<code>cluster</code> 几个层次</p></li><li><p>尝试使用 <code>GET /_cat/health?v</code> 查看 <code>时间戳</code>、<code>集群名称</code>、<code>集群状态</code>、<code>集群中节点的数量</code> 等等</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">epoch      timestamp cluster       status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent</span><br><span class="line">1540815645 20:20:45  elasticsearch yellow          1         1      6   6    0    0        6             0                  -                 50.0%</span><br></pre></td></tr></table></figure><p> 返回信息 和 集群健康API(<code>GET _cluster/health</code>) 返回都一样</p></li></ol><h2 id="索引文档"><a href="#索引文档" class="headerlink" title="索引文档"></a>索引文档</h2><p>ES 中可以使用 <strong>POST</strong> 或 <strong>PUT</strong> 来索引一个新文档, 熟悉HTTP协议的话, 应该知道 PUT是幂等的, 而POST是非幂等的, ES也遵循了这一点</p><h3 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h3><ol><li><strong>PUT</strong> 创建文档的时候需要手动设定文档ID (类似已知id, 进行修改) </li><li>如果文档不存在, 则会创建新文档; 如果文档存在, 则会覆盖整个文档 (所以需要留意)</li><li>虽然使用PUT可以防止POST非幂等引起的多次创建, 但也要留意使用PUT带来的文档覆盖问题</li><li><p>练习:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 此处创建一个 索引为 products , 类型为 computer, 文档ID为1的商品 </span><br><span class="line">PUT /products/computer/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;lenovo&quot;,</span><br><span class="line">  &quot;desc&quot; : &quot;lianxiang diannao chaobao&quot;,</span><br><span class="line">  &quot;price&quot; : 4500,</span><br><span class="line">  &quot;tag&quot; : [&quot;jieneng&quot;, &quot;xuhang&quot;, &quot;chaobao&quot;] </span><br><span class="line">&#125;</span><br><span class="line"># 返回</span><br><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot;: &quot;products&quot;, </span><br><span class="line">  &quot;_type&quot;: &quot;computer&quot;,</span><br><span class="line">  &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">  &quot;_version&quot;: 1,</span><br><span class="line">  &quot;result&quot;: &quot;created&quot;,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 2, # 表示应该写入的有两个分片(1个主分片和1个副本分片, 但注意: 这里代表的可不是总分片数, 显然es的索引默认对应5个主分片, 每个主分片又对应一个副本分片, 总共会有10个分片)  </span><br><span class="line">    &quot;successful&quot;: 1, # 表示成功写入一个分片, 即写入了主分片, 但是副本分片并未写入, 因为目前只启了一个节点</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;created&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src="/img/es/products-computer.png"></p></li><li>另外, 注意: 使用<code>PUT</code>创建文档时, 如果不指定ID, 则会报错</li></ol><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><ol><li><p><strong>POST</strong> 创建文档时不需要手动传递文档ID, es会自动生成全局唯一的文档ID</p></li><li><p>练习</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">POST /products/computer/</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;huawei&quot;,</span><br><span class="line">  &quot;desc&quot; : &quot;china best diannao gaoqing&quot;,</span><br><span class="line">  &quot;price&quot; : 6080,</span><br><span class="line">  &quot;tag&quot; : [&quot;gaoxingneng&quot;, &quot;gaoqing&quot;, &quot;jieneng&quot;] </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 返回, 可以看到文档ID是自动生成的, 其他字段和使用`PUT`时返回的信息相同</span><br><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot;: &quot;products&quot;,</span><br><span class="line">  &quot;_type&quot;: &quot;computer&quot;,</span><br><span class="line">  &quot;_id&quot;: &quot;AWa_MgAhWC0s-aachNUS&quot;,</span><br><span class="line">  &quot;_version&quot;: 1,</span><br><span class="line">  &quot;result&quot;: &quot;created&quot;,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 2,</span><br><span class="line">    &quot;successful&quot;: 1,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;created&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="检索文档"><a href="#检索文档" class="headerlink" title="检索文档"></a>检索文档</h2><p>先尝试最简单的一种 query-string 查询方式: <code>GET /products/computer/_search</code> : 查询/products/computer/下的所有文档</p><h2 id="更新文档-PUT、POST"><a href="#更新文档-PUT、POST" class="headerlink" title="更新文档 PUT、POST"></a>更新文档 PUT、POST</h2><ol><li><p><strong>PUT</strong> 对整个文档进行覆盖更新</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT /products/computer/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;acer-hongji&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>partial update: 如果只是想更新文档的部分指定字段, 可以使用 <code>POST</code> 结合 <code>_update</code>  :  (<strong>partial update内置乐观锁并发控制</strong>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /products/computer/2/_update?retry_on_conflict=5</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;: &#123;</span><br><span class="line">    &quot;name&quot; : &quot;acer-hongji-鸿基&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里注意一下_update的内部机制其实是: es先获取整个文档, 然后更新部分字段, 最后老文档标记为deleted, 然后创建新文档<br>此时在标记老文档为deleted时就可能会出现并发问题, 如果线程1抢先一步将老文档标注为deleted, 那么线程2在将新文档标注为deleted时就会失败(version内部乐观锁机制)<br>此时在es内部会做处理, 他内部完成了对乐观锁的实现, 如果失败后, 其实也是进行重试, 你可以手动传递 <code>retry_on_conflict</code>参数来决定其内部的重试次数</p></li><li><p><strong>PUT如何只创建不替换</strong>: 由于创建文档与全量替换文档的语法是一样的, 都是 <code>PUT</code>, 而有时我们只是想新建文档, 不想替换文档</p><ul><li>可以使用 <code>op_type=create</code> 来说明此命令只是用来执行创建操作的<br><code>PUT /index/type/id?op_type=create</code> 或 <code>PUT /index/type/id/_create</code></li><li>可以看到, 此时, 如果文档已经存在, 会进行报错提示冲突, 而不会帮你直接替换<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT /products/computer/1?op_type=create</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;huawei create&quot;,</span><br><span class="line">  &quot;desc&quot; : &quot;china best diannao gaoqing create&quot;,</span><br><span class="line">  &quot;price&quot; : 6080,</span><br><span class="line">  &quot;tag&quot; : [&quot;gaoxingneng&quot;, &quot;gaoqing&quot;, &quot;jieneng&quot;, &quot;create&quot;] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h2><ol><li><p><strong>ES的文档替换</strong>: 上面已经了解过, 其实就是<code>PUT</code>创建文档, 如果传递的文档id不存在, 就是创建, 如果文档id已经存在, 则是替换操作;<br> 注意: es在做文档的替换操作时, 会将老的document标记为deleted, 然后新增我们给定的那个document, 当后续创建越来越多的document时, es会在适当的时机在后台自动删除标记为delete的document;</p></li><li><p><strong>ES的删除</strong>: 不会直接进行物理删除, 而是在数据越来越多的时候, es在合适的时候在后台进行删除</p></li><li><p>练习:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DELETE /products/computer/2</span><br><span class="line"># 返回</span><br><span class="line">&#123;</span><br><span class="line">  &quot;found&quot;: true,</span><br><span class="line">  &quot;_index&quot;: &quot;products&quot;,</span><br><span class="line">  &quot;_type&quot;: &quot;computer&quot;,</span><br><span class="line">  &quot;_id&quot;: &quot;2&quot;,</span><br><span class="line">  &quot;_version&quot;: 6,    </span><br><span class="line">  &quot;result&quot;: &quot;deleted&quot;,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 2,</span><br><span class="line">    &quot;successful&quot;: 1,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Cat-Api&quot;&gt;&lt;a href=&quot;#Cat-Api&quot; class=&quot;headerlink&quot; title=&quot;Cat Api&quot;&gt;&lt;/a&gt;Cat Api&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ES提供的 &lt;code&gt;Cat Api&lt;/code&gt; 可以用来查看 集群当前状态,
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://blog.renyimin.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch基础" scheme="http://blog.renyimin.com/tags/Elasticsearch%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>03. ES 一些基本概念</title>
    <link href="http://blog.renyimin.com/2018/06/09/elasticsearch/2018-06-09-03/"/>
    <id>http://blog.renyimin.com/2018/06/09/elasticsearch/2018-06-09-03/</id>
    <published>2018-06-09T10:23:07.000Z</published>
    <updated>2018-11-22T03:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="近实时"><a href="#近实时" class="headerlink" title="近实时"></a>近实时</h2><ol><li>从文档被索引到可以被检索会有轻微延时, 约1s</li></ol><h2 id="Index-索引-n"><a href="#Index-索引-n" class="headerlink" title="Index(索引 n)"></a>Index(索引 n)</h2><ol><li>这里的Index是个名词, 类似于传统RDS的一个数据库, 是存储document的地方</li><li>一个Index可以包含多个 type (索引的复数词为 indices 或 indexes) </li><li>index 名称必须是小写, 不能用下划线开头, 不能包含逗号</li><li>一般将不同的项目数据放到不同的index中 </li><li><p>每个index会物理地对应多个分片, 这样, 每个项目都有自己的分片, 互相物理地独立开, 如果有项目是做复杂运算的, 也不会影响其他项目的分片</p></li><li><p>索引(v) : ES中的还会提到 <strong>索引一个文档</strong>, 这里的 索引 是动词, 存储文档并建立倒排索引的意思;</p></li></ol><h2 id="Type-类型"><a href="#Type-类型" class="headerlink" title="Type(类型)"></a>Type(类型)</h2><ol><li>一个Index中可以有多个type</li><li>代表document属于index中的哪个类别(type 可以对同一个index中不同类型的document进行逻辑上的划分,可以粗略地理解成传统数据库中的数据表?)</li><li><p>名称可以是大小写, 不能用下划线开头, 不能包含逗号</p></li><li><p>注意: <strong>type是对index做的逻辑划分, 而shard是对index做的物理划分</strong></p></li></ol><h2 id="Document-文档"><a href="#Document-文档" class="headerlink" title="Document(文档)"></a>Document(文档)</h2><ol><li><p>ES中的最小数据单元, ES使用 JSON 作为文档的序列化格式 (ES中的文档可以通俗地理解成传统数据库表中的一条记录)</p></li><li><p><code>_id</code>: 文档id 可以手动指定, 也可以由es为我们生成;</p><ul><li><p>手动指定id: 根据应用情况来判断是否符合手动指定 document id, 一般如果是从某些其他的系统中导入数据到es, 就会采用这种方式, 就是使用系统中已有的数据的唯一标识作为es中的document的id;<br>比如从数据库中迁移数据到es中, 就比较适合采用数据在数据库中已有的primary key;<br><code>put /index/type/id</code></p></li><li><p>自动生成id: 如果说我们目前要做的系统主要就是将数据存储到es中, 数据产生出来以后直接就会存放到es, 所以不需要手动指定document id的形式, 可以直接让es自动生成id即可;<br><code>post /index/type</code><br>es自动生成的id长度为20个字符, URL安全, base64编码, <strong>GUID</strong>, <strong>分布式并行生成时, es会通过全局id来保证不会发生冲突</strong>;</p></li></ul></li></ol><h2 id="Cluster-集群"><a href="#Cluster-集群" class="headerlink" title="Cluster(集群)"></a>Cluster(集群)</h2><ol><li>集群是由一个或者多个拥有相同 <code>cluster.name</code> 配置项的节点组成, 一个ES节点属于哪个集群, 是由其配置中的 <code>cluster.name</code> 决定的; <ul><li>节点启动后, 其默认name是<code>elasticsearch</code>, 因此如果在一个机器中启动一堆节点, 那它们会自动组成一个es集群(因为它们的<code>cluster.name</code>都是<code>elasticsearch</code>)</li><li>这些节点共同承担数据和负载的压力; 当有节点加入集群中或者从集群中移除节点时, 集群将会重新平均分布所有的数据;</li></ul></li></ol><h2 id="Shard-分片"><a href="#Shard-分片" class="headerlink" title="Shard(分片):"></a>Shard(分片):</h2><ol><li><p><strong>type是对index做的逻辑划分, 而shard是对index做的物理划分</strong></p></li><li><p>一个分片就是一个 Lucene 的实例, 它是一个底层的工作单元, 其本身就是一个完整的搜索引擎; </p></li><li><p>分片是数据的容器, 文档其实是保存在分片中的: 当我们将很多条document数据添加到索引中时, 索引实际上是指向一个或者多个<strong>物理分片</strong>; 因此, 你要存储到索引中的数据其实会被分发到不同的分片中, 而每个分片也仅保存了整个索引中的一部分文档;</p></li><li><p>当你的集群规模扩大或者缩小时(即增加或减少节点时), ES 会自动的在各节点中迁移分片, 而数据是存放在shard中的, 所以最终会使得数据仍然均匀分布在集群里</p></li><li><p>shard 可以分为 <code>primary shard</code>(主分片), <code>replica shard</code>(副本分片)</p><ul><li><code>replica shard</code> 可以容灾, 水平扩容节点时, 还可以自动分配来提高系统负载</li><li>默认情况下, 每个index有5个<code>parimary shard</code>, 而每个<code>parimary shard</code>都有1个<code>replica shard</code>, 即每个index默认会对应10个shard</li><li>另外, ES规定了, 每个index的 <code>parimary shard</code> 和 <code>replica shard</code> 不能在全部都在同一个节点上, 相同内容的 <code>replica shard</code> 也不能在同一节点上, 不然起不到容灾作用;</li></ul></li></ol><h2 id="集群状态-yellow"><a href="#集群状态-yellow" class="headerlink" title="集群状态 yellow"></a>集群状态 yellow</h2><ol><li><p>在ES中, 每个索引可能对应多个主分片, 每个主分片也都可能对应多个副本分片</p></li><li><p><strong>对于每个索引, 要保证不会导致es集群为 yellow, 需要注意</strong>: <code>es节点数 &gt;= number_of_replicas+1</code></p><pre><code> 当索引的 `number_of_replicas=1` 时, 无论 `number_of_shards` 为多少, 2个节点 (`es节点数 = number_of_replicas+1`) 就可以保证集群是 green; 当索引的 `number_of_replicas&gt;1` 时, 只有当 `es节点数 = number_of_replicas+1` 时, 集群才会变为green;</code></pre></li><li>对于任何一个索引, 由于任何具有相同内容的分片(相同主分片的两个副本分片, 或者主分片和其某个副本分片)不会被放在同一个节点上, 所以如果节点数量不够的话, 有些replica-shard分片会处于未分配状态, 集群状态就不可能是green而是yellow;<br> 比如索引 test 有 3个主分片, 每个主分片对应3个副本分片(该索引总共 3+3*3=12 个分片), 那么至少得4(<code>number_of_replicas+1</code>)个节点, 才能保证每个节点上都不会出现具有相同内容的分片, 即可以保证集群是green;</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;近实时&quot;&gt;&lt;a href=&quot;#近实时&quot; class=&quot;headerlink&quot; title=&quot;近实时&quot;&gt;&lt;/a&gt;近实时&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;从文档被索引到可以被检索会有轻微延时, 约1s&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Index-索引-n&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://blog.renyimin.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch基础" scheme="http://blog.renyimin.com/tags/Elasticsearch%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>02. ES 版本选择及简单安装</title>
    <link href="http://blog.renyimin.com/2018/06/09/elasticsearch/2018-06-09-02/"/>
    <id>http://blog.renyimin.com/2018/06/09/elasticsearch/2018-06-09-02/</id>
    <published>2018-06-09T06:56:01.000Z</published>
    <updated>2018-11-22T03:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h2><ol><li><p>ES 的版本迭代比较快, 目前(06/2018)为止, 已经到6.X了, 可参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/index.html" target="_blank" rel="noopener">官网文档</a>, 可能很多公司还在用2.X, 或者刚切到5.X; </p></li><li><p>此处之所以选用5.5.3来学习调研, 主要是因为公司选用的阿里云服务提供的是 ES 5.5.3版本 (所以你在选择版本时, 也可以根据 自建、购买云服务 来决定)  </p></li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>安装Java, 推荐使用Java 8 : <code>yum install java-1.8.0-openjdk* -y</code></p></li><li><p>ES <a href="https://www.elastic.co/downloads/past-releases" target="_blank" rel="noopener">下载</a></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/local/src</span><br><span class="line">$ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.3.tar.gz</span><br><span class="line">$ tar -zxvf elasticsearch-5.5.3.tar.gz</span><br><span class="line">$ cd elasticsearch-5.5.3</span><br><span class="line">$ ls</span><br><span class="line">bin  config  lib  LICENSE.txt  modules  NOTICE.txt  plugins  README.textile</span><br></pre></td></tr></table></figure></li><li><p>启动 ES: es不能使用root权限启动, 所以需要创建新用户</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ adduser es</span><br><span class="line">$ passwd es</span><br><span class="line">$ chown -R es /usr/local/src/elasticsearch-5.5.3/</span><br><span class="line">$ cd /usr/local/src/elasticsearch-5.5.3/bin</span><br><span class="line">$ su es</span><br><span class="line">$ ./elasticsearch</span><br></pre></td></tr></table></figure></li><li><p>验证es是否安装成功</p><ul><li>可以在浏览器中打开 127.0.0.1:9200 (此处使用的是vagrant设定了虚拟主机的ip, 所以访问 <a href="http://192.168.3.200:9200/" target="_blank" rel="noopener">http://192.168.3.200:9200/</a>, 不过有些<strong>小坑</strong>下面会介绍 )</li><li>或者可以 <code>curl -X GET http://192.168.3.200:9200</code> </li></ul></li></ol><h2 id="启动坑点"><a href="#启动坑点" class="headerlink" title="启动坑点"></a>启动坑点</h2><p>启动可能会报一些错(调研使用的是 centos7-minimal 版)</p><ol><li><p>每个进程最大同时打开文件数太小</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]</span><br><span class="line">[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br><span class="line">```    </span><br><span class="line">解决方案: 切换到root, 可通过下面2个命令查看当前数量</span><br><span class="line">```     </span><br><span class="line">$ ulimit -Hn</span><br><span class="line">4096</span><br><span class="line">$ ulimit -Sn</span><br><span class="line">1024</span><br><span class="line"></span><br><span class="line">// 编辑如下文件</span><br><span class="line">vi /etc/security/limits.conf</span><br><span class="line">// 增加如下两行配置</span><br><span class="line">*               soft    nofile          65536</span><br><span class="line">*               hard    nofile          65536</span><br></pre></td></tr></table></figure></li><li><p>elasticsearch用户拥有的内存权限太小, 至少需要262144</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR: [1] bootstrap checks failed</span><br><span class="line">[1]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br></pre></td></tr></table></figure><p> 解决方案, 切换到root</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysctl.conf </span><br><span class="line">添加 vm.max_map_count=262144</span><br><span class="line">执行 sysctl -p</span><br></pre></td></tr></table></figure></li><li><p>默认9200端口是给本机访问的, 因此es在成功启动后, 如果使用 192.168.3.200:9200 来访问, 可能失败, 因此需要在es配置文件elasticsearch.yml中增加 <strong>network.bind_host: 0.0.0.0</strong>, 重启后则可以正常访问</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;rjAFeY9&quot;,   # node 节点名称</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;, # 节点默认的集群名称 (可以在es节点的配置文件elasticsearch.yml中进行配置)</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;zaJApkNPRryFohhEMEVH5w&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;     # es 版本号</span><br><span class="line">    &quot;number&quot; : &quot;5.5.3&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;9305a5e&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2017-09-07T15:56:59.599Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;6.6.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 上面未解释的信息暂时先不用了解</p></li><li><p>如果想启动多个结点, 还可能会报如下几个错</p><ul><li><p>尝试启动第二个节点, 报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000080000000, 174456832, 0) failed; error=&apos;Cannot allocate memory&apos; (errno=12)</span><br><span class="line">#</span><br><span class="line"># There is insufficient memory for the Java Runtime Environment to continue.</span><br><span class="line"># Native memory allocation (mmap) failed to map 174456832 bytes for committing reserved memory.</span><br><span class="line"># An error report file with more information is saved as:</span><br><span class="line"># /usr/local/src/elasticsearch-5.5.3/bin/hs_err_pid8651.log</span><br></pre></td></tr></table></figure><p>解决方案: 其实这是因为我给虚拟机分配了2G的内存, 而elasticsearch5.X默认分配给jvm的空间大小就是2g, 所以jvm空间不够, 修改jvm空间分配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/src/elasticsearch-5.5.3/config/jvm.options</span><br><span class="line">将:</span><br><span class="line">-Xms2g</span><br><span class="line">-Xmx2g</span><br><span class="line">修改为:</span><br><span class="line">-Xms512m</span><br><span class="line">-Xmx512m</span><br></pre></td></tr></table></figure></li><li><p>再次启动又报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">maybe these locations are not writable or multiple nodes were started without increasing [node.max_local_storage_nodes] (was [1])</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>解决方案: 在 elasticsearch.yml 配置文件最后添加 <code>node.max_local_storage_nodes: 256</code>, 然后重新添加第二个节点</p></li></ul></li></ol><h2 id="Elasticsearch-Head-安装"><a href="#Elasticsearch-Head-安装" class="headerlink" title="Elasticsearch Head 安装"></a><a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">Elasticsearch Head 安装</a></h2><p>es 启动后, 访问 127.0.0.1:9200 可以查看版本和集群相关的信息, 但如果能有一个可视化的环境来操作它可能会更直观一些, 可以通过安装 Elasticsearch Head 这个插件来进行管理;<br>Elasticsearch Head 是集群管理、数据可视化、增删改查、查询语句可视化工具, 在最新的ES5中安装方式和ES2以上的版本有很大的不同, 在ES2中可以直接在bin目录下执行 <code>plugin install xxxx</code> 来进行安装, 但是在ES5中这种安装方式变了, 要想在ES5中安装则必须要安装NodeJs, 然后通过NodeJS来启动Head, 具体过程如下:</p><ol><li><p>nodejs 安装</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 更新node.js各版本yum源(Node.js v8.x)</span><br><span class="line">curl --silent --location https://rpm.nodesource.com/setup_8.x | bash -</span><br><span class="line">yum install -y nodejs</span><br></pre></td></tr></table></figure></li><li><p><a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">github下载</a> Elasticsearch Head 源码</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src</span><br><span class="line">git clone git://github.com/mobz/elasticsearch-head.git</span><br><span class="line">cd elasticsearch-head</span><br><span class="line">npm install // (可能会有一些警告)</span><br></pre></td></tr></table></figure></li><li><p>修改Elasticsearch配置文件, 编辑 elasticsearch-5.5.3/config/elasticsearch.yml, 加入以下内容:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.cors.enabled: true // 注意冒号后面要有空格</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure></li><li><p>编辑elasticsearch-head-master文件下的Gruntfile.js, 修改服务器监听地址, 增加hostname属性, 将其值设置为 * :</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vi elasticsearch-head/Gruntfile.js</span><br><span class="line"></span><br><span class="line">connect: &#123;</span><br><span class="line">    hostname: &quot;*&quot;,  // 此处</span><br><span class="line">    server: &#123;</span><br><span class="line">        options: &#123;</span><br><span class="line">            port: 9100,</span><br><span class="line">            base: &apos;.&apos;,</span><br><span class="line">            keepalive: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编辑elasticsearch-head-master/_site/app.js, 修改head连接es的地址，将localhost修改为es的IP地址 (注意:如果ES是在本地,就不要修改,默认就是localhost)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.base_uri = this.config.base_uri || this.prefs.get(&quot;app-base_uri&quot;) || &quot;http://localhost:9200&quot;;</span><br></pre></td></tr></table></figure></li><li><p>在启动elasticsearch-head之前要先启动elasticsearch, 然后在elasticsearch-head-master/目录下运行启动命令</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure></li><li><p>最后验证 <a href="http://192.168.3.200:9100/" target="_blank" rel="noopener">http://192.168.3.200:9100/</a><br> <img src="/img/est/est-9100.png"></p></li></ol><h2 id="Kibana安装"><a href="#Kibana安装" class="headerlink" title="Kibana安装"></a><a href="https://www.elastic.co/cn/products/kibana" target="_blank" rel="noopener">Kibana</a>安装</h2><p>Kibana 是一个开源的分析和可视化平台, 属于 Elastic stack 技术栈中的一部分, Kibana 主要提供搜索、查看和与存储在 Elasticsearch 索引中的数据进行交互的功能, 开发者或运维人员可以轻松地执行高级数据分析, 并在各种图表、表格和地图中可视化数据;<br>接下来主要就是使用Kibana的DevTools提供的控制台进行ES的学习</p><ol><li><p><a href="https://www.elastic.co/downloads/past-releases" target="_blank" rel="noopener">下载</a>, 此处选择了5.5.3</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/kibana/kibana-5.5.3-linux-x86_64.tar.gz</span><br><span class="line">tar -zxvf kibana-5.5.3-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>修改config/kibana.yml文件, 加入以下内容:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.port: 5601  </span><br><span class="line">server.name: &quot;kibana&quot;  </span><br><span class="line">server.host: &quot;0.0.0.0&quot;  </span><br><span class="line">elasticsearch.url: &quot;http://127.0.0.1:9200&quot;</span><br></pre></td></tr></table></figure></li><li><p>然后启动kibana服务:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> cd /usr/local/src/kibana-5.5.3-linux-x86_64/bin</span><br><span class="line">./kibana</span><br></pre></td></tr></table></figure><ul><li>浏览器访问地址:<a href="http://192.168.3.200:5601/" target="_blank" rel="noopener">http://192.168.3.200:5601/</a></li></ul></li><li><p>DevTools 与 5.x之前版本的Sense</p><ul><li>Sense 是一个 Kibana 应用它提供交互式的控制台, 通过你的浏览器直接向 Elasticsearch 提交请求, 操作es中的数据</li><li>现在不用安装了, 可以直接使用Kibana提供的 <strong>DevTools</strong><br><img src="/img/est/kibana-devtools.png" width="450/"></li></ul></li><li><p>注意此时, 之前的es集群变成yellow状态了 (因为kibana有个副本分片并没有处于正常状态, 因为当前只有一个节点, 副本分片无法被分配到其他节点, 具体细节先不用着急, 后面会进行分析)<br> <img src="/img/est/est-9100-yellow.png"></p></li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>到此为止, 应该对ES有了最基础的了解, 且基本环境已经安装完毕, 对于后续的练习暂时就够了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;版本选择&quot;&gt;&lt;a href=&quot;#版本选择&quot; class=&quot;headerlink&quot; title=&quot;版本选择&quot;&gt;&lt;/a&gt;版本选择&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ES 的版本迭代比较快, 目前(06/2018)为止, 已经到6.X了, 可参考&lt;a href=&quot;http
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://blog.renyimin.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch基础" scheme="http://blog.renyimin.com/tags/Elasticsearch%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>01. 初识 Elasticsearch</title>
    <link href="http://blog.renyimin.com/2018/06/09/elasticsearch/2018-06-09-01/"/>
    <id>http://blog.renyimin.com/2018/06/09/elasticsearch/2018-06-09-01/</id>
    <published>2018-06-09T06:24:25.000Z</published>
    <updated>2018-11-22T03:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>可以通过如下几个特点来认识ES:</p><ul><li><p>开源</p></li><li><p>基于 Lucene, 提供比较简单的Restful API<br>Lucene 可以说是当下最先进、高性能、全功能的搜索引擎库, 由Apache软件基金会支持和提供(更多细节自行了解)<br>但Lucene非常复杂, ES的目的是使全文检索变得简单, 通过隐藏 Lucene 的复杂性, 取而代之的提供一套简单一致的 RESTful API</p></li><li><p><strong>高性能全文检索和分析引擎, 并可根据相关度对结果进行排序</strong></p></li><li><p>可以快速且 <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/near-real-time.html" target="_blank" rel="noopener">近实时</a> 地存储,检索(从文档被索引到可以被检索只有轻微延时, 约1s)以及分析</p></li><li><p>海量数据检索及分析: 可以扩展到上百台服务器, 处理PB级 <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/structured-search.html" target="_blank" rel="noopener">结构化</a> 或 非结构化 数据 </p></li><li><p>面向文档型数据库, 存储的是整个对象或者文档, 它不但会存储它们, 还会为它们建立索引</p></li></ul></li><li><p>应用场景</p><ul><li><p>当你的应用数据量很大, 数据结构灵活多变, 数据之间的结构比较复杂, 如果用传统数据库, 可能不仅需要面对大量的表设计及数据库的性能问题, 此时可以考虑使用ES, 它不仅可以处理非结构化数据, 而且可以帮你快速进行扩容, 承载大量数据;</p></li><li><p>具体比如多数据源聚合大列表页: 微服务架构是目前很多公司都采用的架构, 所以经常会面对 多数据源聚合的 大列表页, 一个列表中的筛选字段,展示字段可能会来自多个服务, 同时涉及到分页, 所以传统方案可能比较吃力, 而且也得不到比较好的效果; (RRC这边目前是使用 ES 做 <strong>数据视图服务</strong>, 对这种大列表页所用到的数据源字段做统一配置和聚合)</p></li><li><p>日志数据分析, RRC 使用 ElasticStack 技术栈来很方便地对各服务的日志进行查询,分析,统计;</p></li><li><p>站内搜索(电商, 招聘, 门户 等等)都可以使用 ES 来做全文检索并根据相关性进行排名, 高亮展示关键词等;</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;可以通过如下几个特点来认识ES:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;开源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基于 Lucene, 提供比较简单的Restful API&lt;br&gt;Lucene 可以说是当下最先进、高性能、全功能的搜索引擎库, 由Apache软件基
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://blog.renyimin.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch基础" scheme="http://blog.renyimin.com/tags/Elasticsearch%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>02. 环境准备</title>
    <link href="http://blog.renyimin.com/2017/11/03/swoole/2017-11-03-02/"/>
    <id>http://blog.renyimin.com/2017/11/03/swoole/2017-11-03-02/</id>
    <published>2017-11-03T10:36:52.000Z</published>
    <updated>2018-11-22T07:38:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><ol><li>此处使用的是 Vagrant+VirtualBox+CentOS7.2 进行系统环境部署 (如有对Vagrant不熟悉的兄dei~可以提前去了解一下, 也比较简单)</li><li>VagrantFile <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vagrant.configure(&quot;2&quot;) do |config| </span><br><span class="line">    config.vm.define :swoole do |swoole|</span><br><span class="line">        swoole.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class="line">            v.customize [&quot;modifyvm&quot;, :id, &quot;--name&quot;, &quot;swoole-study&quot;, &quot;--memory&quot;, &quot;1000&quot;]</span><br><span class="line">        end</span><br><span class="line">        swoole.vm.box = &quot;centos7.2&quot;</span><br><span class="line">        swoole.vm.hostname = &quot;lant&quot;</span><br><span class="line">        swoole.vm.network :private_network, ip: &quot;192.168.1.110&quot;</span><br><span class="line">        swoole.vm.synced_folder &quot;/Users/renyimin/Desktop/swoole-synced_folder&quot;, &quot;/swoole-synced&quot;</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure></li></ol><h2 id="PHP7-2-12-编译安装"><a href="#PHP7-2-12-编译安装" class="headerlink" title="PHP7.2.12 编译安装"></a>PHP7.2.12 编译安装</h2><ol><li>下载 php-7.2.12.tar.gz 到 /Users/renyimin/Desktop/swoole-synced_folder</li><li><p>登录虚拟机, 将 /swoole-synced 下的 php-7.2.12.tar.gz 移动到 /usr/local/src:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@lant /]# ls</span><br><span class="line">bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  swoole-synced  sys  tmp  usr  vagrant  var</span><br><span class="line">[root@lant /]# cd swoole-synced/</span><br><span class="line">[root@lant swoole-synced]# ls</span><br><span class="line">php-7.2.12.tar.gz</span><br><span class="line">[root@lant swoole-synced]# mv /swoole-synced/php-7.2.12.tar.gz /usr/local/src/</span><br><span class="line">[root@lant swoole-synced]#</span><br></pre></td></tr></table></figure></li><li><p>解压, configure, make, make install</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf php-7.2.12.tar.gz</span><br><span class="line">./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-mysql-sock --with-mysqli --with-libxml-dir --with-openssl --with-mhash --with-pcre-regex --with-zlib --with-iconv --with-bz2 --with-curl --with-cdb --with-pcre-dir --with-gd --with-openssl-dir --with-jpeg-dir --with-png-dir --with-zlib-dir --with-freetype-dir --with-gettext --with-gmp --with-mhash --with-libmbfl --with-onig --with-pdo-mysql --with-zlib-dir --with-readline --with-libxml-dir --with-xsl --with-pear --enable-fpm --enable-soap --enable-bcmath --enable-calendar --enable-dom --enable-exif --enable-fileinfo --enable-filter --enable-ftp --enable-gd-jis-conv --enable-json --enable-mbstring --enable-mbregex --enable-mbregex-backtrack --enable-pdo --enable-session --enable-shmop --enable-simplexml --enable-sockets --enable-sysvmsg --enable-sysvsem --enable-sysvshm --enable-wddx --enable-zip --enable-mysqlnd-compression-support</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li><li><p>配置环境变量</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bash_profile</span><br><span class="line"># 添加</span><br><span class="line">alias php=/usr/local/php/bin/php</span><br><span class="line"># 最后执行</span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@lant tmp]# php -v</span><br><span class="line">PHP 7.2.12 (cli) (built: Nov 22 2018 05:50:26) ( NTS )</span><br><span class="line">Copyright (c) 1997-2018 The PHP Group</span><br><span class="line">Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies</span><br></pre></td></tr></table></figure></li><li><p>拷贝配置文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/local/src/php-7.2.12/php.ini-production /usr/local/php/etc/php.ini</span><br><span class="line">cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf</span><br><span class="line">cp /usr/local/php/etc/php-fpm.d/www.conf.default /usr/local/php/etc/php-fpm.d/www.conf</span><br><span class="line">// 把pid 改成 /run/php-fpm.pid</span><br><span class="line">vim /usr/local/php/etc/php-fpm.conf</span><br></pre></td></tr></table></figure></li></ol><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@lant php-fpm.d]# php -i | grep php.ini</span><br><span class="line">Configuration File (php.ini) Path =&gt; /usr/local/php/etc</span><br><span class="line">Loaded Configuration File =&gt; /usr/local/php/etc/php.ini</span><br></pre></td></tr></table></figure></code></pre><ol><li><p>开机启动php-fpm: 将php-fpm加入到system中管理</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cd /lib/systemd/system</span><br><span class="line">vim php-fpm.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=The PHP FastCGI Process Manager</span><br><span class="line">After=syslog.target network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">PIDFile=/run/php-fpm.pid</span><br><span class="line">ExecStart=/usr/local/php/sbin/php-fpm --nodaemonize --fpm-config /usr/local/php/etc/php-fpm.conf</span><br><span class="line">ExecReload=/bin/kill -USR2 $MAINPID</span><br><span class="line">ExecStop=/bin/kill -SIGINT $MAINPID</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li>启动php-fpm: <code>systemctl start php-fpm.service</code></li><li>添加到开机启动: <code>systemctl enable php-fpm.service</code></li></ul></li></ol><h2 id="nginx-编译安装"><a href="#nginx-编译安装" class="headerlink" title="nginx 编译安装"></a>nginx 编译安装</h2><ol><li>下载 nginx-1.14.1.tar.gz 到 /Users/renyimin/Desktop/swoole-synced_folder</li><li>登录虚拟机, 将 /swoole-synced 下的 nginx-1.14.1.tar.gz 移动到 /usr/local/src</li><li><p>解压, configure, make, make install</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.14.1.tar.gz</span><br><span class="line">yum -y install gcc gcc-c++ automake pcre pcre-devel zlib zlib-devel open openssl-devel</span><br><span class="line">./configure --prefix=/usr/local/nginx</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li><li><p>设置环境变量</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;PATH=/usr/local/nginx/sbin:$PATH&apos; &gt;&gt; /etc/profile</span><br><span class="line">echo &apos;export PATH&apos; &gt;&gt; /etc/profile</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>设置开机自启动</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 如果是使用yum安装的nginx, 则会自动创建/lib/systemd/system/nginx.service文件</span><br><span class="line">// 由于此处是使用编译安装, 所以需要手动在系统服务目录里创建nginx.service文件</span><br><span class="line">vi /lib/systemd/system/nginx.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s quit</span><br><span class="line">PrivateTmp=true</span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li>设置开机启动<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@lant system]# systemctl enable nginx.service</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/nginx.service to /usr/lib/systemd/system/nginx.service.</span><br></pre></td></tr></table></figure></li></ul></li><li><p>配置nginx</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    root /html;</span><br><span class="line">    fastcgi_pass 127.0.0.1:9000;#php-fpm的默认端口是9000</span><br><span class="line">    fastcgi_index index.php;</span><br><span class="line">    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">    include fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在虚拟机中 /html下创建phpinfo.php, 最后即可在物理机通过 192.168.1.110/phpinfo.php 访问</p></li></ol><h2 id="swoole编译"><a href="#swoole编译" class="headerlink" title="swoole编译"></a>swoole编译</h2><ol><li><p>git clone 下载 swoole 源码</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src </span><br><span class="line">git clone git@gitee.com:swoole/swoole.git</span><br></pre></td></tr></table></figure></li><li><p>编译安装, 使用 phpize 生成 swoole.so 外挂模块</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/php/bin/phpize</span><br><span class="line">./configure --with-php-config=/usr/local/php/bin/php-config</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"># 结果</span><br><span class="line">Installing shared extensions:     /usr/local/php/lib/php/extensions/no-debug-non-zts-20170718/</span><br><span class="line">Installing header files:          /usr/local/php/include/php/</span><br><span class="line">[root@lant swoole]#</span><br></pre></td></tr></table></figure></li><li><p>也可以访问 phpinfo.php 看到上面的 extension_dir 地址, 可以查看 swoole 扩展的编译结果</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@lant ~]# cd /usr/local/php/lib/php/extensions/no-debug-non-zts-20170718</span><br><span class="line">[root@lant no-debug-non-zts-20170718]# ls</span><br><span class="line">opcache.a  opcache.so  swoole.so</span><br></pre></td></tr></table></figure></li><li><p>php 支持swoole: <code>vi /usr/local/php/etc/php.ini</code>  加入 <code>extension=swoole.so</code>, 重启php-fpm <code>systemctl restart php-fpm.service</code></p></li><li><p>访问: <a href="http://192.168.1.110/phpinfo.php" target="_blank" rel="noopener">http://192.168.1.110/phpinfo.php</a>, 发现已经有了 swoole 扩展</p></li><li><p>测试</p><ul><li>swoole源码中有示例: <code>cd /usr/local/src/swoole/examples/server</code></li><li>运行测试文件: <code>php echo.php</code></li><li>安装 nestat 命令用于查看端口运行情况 : <code>yum -y install net-tools</code></li><li><p>查看端口运行情况, 可看到 echo.php 这个示例文件已经被成功运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -natp | grep 9501</span><br><span class="line">tcp        0      0 0.0.0.0:9501            0.0.0.0:*               LISTEN      27927/php</span><br></pre></td></tr></table></figure></li><li><p>杀掉该进程, 则端口不再被占用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@lant server]# php echo.php</span><br><span class="line">^C</span><br><span class="line">[root@lant server]#</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://wiki.swoole.com/wiki/page/351.html" target="_blank" rel="noopener">https://wiki.swoole.com/wiki/page/351.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前置&quot;&gt;&lt;a href=&quot;#前置&quot; class=&quot;headerlink&quot; title=&quot;前置&quot;&gt;&lt;/a&gt;前置&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;此处使用的是 Vagrant+VirtualBox+CentOS7.2 进行系统环境部署 (如有对Vagrant不熟悉的兄dei
      
    
    </summary>
    
      <category term="Swoole" scheme="http://blog.renyimin.com/categories/Swoole/"/>
    
    
      <category term="Swoole" scheme="http://blog.renyimin.com/tags/Swoole/"/>
    
  </entry>
  
  <entry>
    <title>01. swoole简介 及 知识扫盲</title>
    <link href="http://blog.renyimin.com/2017/11/03/swoole/2017-11-03-01/"/>
    <id>http://blog.renyimin.com/2017/11/03/swoole/2017-11-03-01/</id>
    <published>2017-11-03T02:45:17.000Z</published>
    <updated>2018-11-11T06:23:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>引用<a href="https://www.swoole.com/" target="_blank" rel="noopener">swoole官网</a>对swoole的介绍</p><blockquote><p>Swoole:面向生产环境的 PHP 异步网络通信引擎<br>   使 PHP 开发人员可以编写高性能的异步并发 TCP、UDP、Unix Socket、HTTP，WebSocket 服务。Swoole 可以广泛应用于互联网、移动通信、企业软件、云计算、网络游戏、物联网（IOT）、车联网、智能家居等领域。 使用 PHP + Swoole 作为网络通信框架，可以使企业 IT 研发团队的效率大大提升，更加专注于开发创新产品。</p><p>特性<br>  Swoole 使用纯 C 语言编写，提供了 PHP 语言的异步多线程服务器，异步 TCP/UDP 网络客户端，异步 MySQL，异步 Redis，数据库连接池，AsyncTask，消息队列，毫秒定时器，异步文件读写，异步DNS查询。 Swoole内置了Http/WebSocket服务器端/客户端、Http2.0服务器端。<br>  除了异步 IO 的支持之外，Swoole 为 PHP 多进程的模式设计了多个并发数据结构和IPC通信机制，可以大大简化多进程并发编程的工作。其中包括了并发原子计数器，并发 HashTable，Channel，Lock，进程间通信IPC等丰富的功能特性。<br>  Swoole2.0 支持了类似 Go 语言的协程，可以使用完全同步的代码实现异步程序。PHP 代码无需额外增加任何关键词，底层自动进行协程调度，实现异步。</p><p>典型应用场景<br>    移动互联网API服务器<br>    物联网(IOT)<br>    微服务(Micro Service)<br>    高性能Web服务器<br>    游戏服务器<br>    在线聊天系统</p><p>很多用户案例可以参考 <a href="https://wiki.swoole.com/wiki/page/p-case.html" target="_blank" rel="noopener">https://wiki.swoole.com/wiki/page/p-case.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;引用&lt;a href=&quot;https://www.swoole.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;swo
      
    
    </summary>
    
      <category term="Swoole" scheme="http://blog.renyimin.com/categories/Swoole/"/>
    
    
      <category term="Swoole" scheme="http://blog.renyimin.com/tags/Swoole/"/>
    
  </entry>
  
</feed>
