<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lant&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.renyimin.com/"/>
  <updated>2017-12-06T13:44:21.000Z</updated>
  <id>http://blog.renyimin.com/</id>
  
  <author>
    <name>Lant</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>11 - Django连接MySQL (未完...)</title>
    <link href="http://blog.renyimin.com/2017/11/25/2017-11-25-Django-11/"/>
    <id>http://blog.renyimin.com/2017/11/25/2017-11-25-Django-11/</id>
    <published>2017-11-25T13:07:00.000Z</published>
    <updated>2017-12-06T13:44:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="连接mysql数据库"><a href="#连接mysql数据库" class="headerlink" title="连接mysql数据库"></a>连接mysql数据库</h3><ol><li><p>当我们修改项目配置文件中的数据库配置项为如下配置项</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">DATABASES = &#123;</div><div class="line">    &apos;default&apos;: &#123;</div><div class="line">        # &apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;,</div><div class="line">        # &apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;)</div><div class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</div><div class="line">        &apos;NAME&apos;: &apos;test&apos;,</div><div class="line">        &apos;USER&apos;: &apos;root&apos;,</div><div class="line">        &apos;PASSWORD&apos;: &apos;renyimin&apos;,</div><div class="line">        &apos;HOST&apos;: &apos;127.0.01&apos;,</div><div class="line">        &apos;PORT&apos;: &apos;3306&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> 之后 <code>python manage.py runserver --settings=MyDjangoBlog.settings.local</code> 启动Django服务会发现报错:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module: No module named &apos;MySQLdb&apos;.</div><div class="line">Did you install mysqlclient or MySQL-python?</div></pre></td></tr></table></figure></li><li><p>这是因为我们还没有提供Django可以连接数据库的组件:</p></li></ol><ul><li><p>一般我们会使用MySQL, 在python2.x中用 <code>mysqldb</code> 用的比较多，但是在python3.x中已经不支持那个组件了, 可以选择使用 <code>pymysql</code></p></li><li><p>这里使用的是Anaconda虚拟环境, 所以使用 <code>conda install pymysql</code> (使用virtualenv的话, 可以 <code>pip install pymysql</code> )</p><p>  然后注意需要在你项目的主目录下的<code>__init__.py</code>(我的目录是 ~/Desktop/MyDjangoBlog/MyDjangoBlog/)，写入以下代码</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import pymysql</div><div class="line">pymysql.install_as_MySQLdb()</div></pre></td></tr></table></figure></li><li><p>之后便成功启动Django服务了;</p></li></ul><h3 id="创建model"><a href="#创建model" class="headerlink" title="创建model"></a>创建model</h3><ol><li><p>首先你会在 <code>应用</code> 的 <code>models.py</code> 文件中创建每张表对应的模型类</p></li><li><p>创建model的时候, 是需要设置数据表相关的字段信息的, 这就涉及到字段的选择?</p><ul><li>了解Django有哪些字段类型, 如何自定义自己的字段类型 ?<br><a href="https://docs.djangoproject.com/en/1.11/ref/models/fields/" target="_blank" rel="external">https://docs.djangoproject.com/en/1.11/ref/models/fields/</a></li></ul></li><li><p>Django的model相关使用 (<a href="http://python.usyiyi.cn/documents/django_182/topics/db/models.html#quick-example" target="_blank" rel="external">http://python.usyiyi.cn/documents/django_182/topics/db/models.html#quick-example</a>)</p></li></ol><h3 id="几个Django的基本命令"><a href="#几个Django的基本命令" class="headerlink" title="几个Django的基本命令"></a>几个Django的基本命令</h3><ol><li><p>创建好model模型文件之后, 接下来还要接触几个Django的基本命令</p><ul><li><p>数据库迁移的两大命令</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python manage.py makemigrations # 使用model层, 生成对应的数据库迁移文件</div><div class="line">python manage.py migrate TestModel # 开始执行迁移文件, 更新数据库</div></pre></td></tr></table></figure></li><li><p>上面两个命令调用默认为全局，即对所有最新更改的model或迁移文件进行操作; 如果想要精确到某个迁移文件(比如0004_xxx.py), 可以运行</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py migrate app_name 0004</div></pre></td></tr></table></figure></li><li><p>如果想看迁移文件的执行状态，可以用 <code>python manage.py showmigrations</code> 命令查看, 会列出每个应用(包含Django默认自带的应用)下的迁移文件的迁移状态:<br>   <img src="/img/django/showmigrations_01.png" width="700" height="250/"></p></li></ul></li><li><p>尝试创建一张简单的user表的模型, 然后运行上面两个命令, </p><ul><li>结果可能有 <code>warnings</code> 提示:<br><img src="/img/django/makemigrations_01.png" width="650" height="400/"></li><li>解决方法:<br>在数据库配置项中添加如下配置:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&apos;OPTIONS&apos;: &#123;</div><div class="line">    &apos;init_command&apos;: &quot;SET sql_mode=&apos;STRICT_TRANS_TABLES&apos;&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul></li><li><p>如果想要查看你迁移文件所对应的sql语句, 可以使用如下命令</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py sqlmigrate blog(对应你的应用名) 0001</div></pre></td></tr></table></figure></li><li><p>在执行 <code>migrate</code> 命令的时候, 该命令首先会找出所有还没有被应用的迁移文件</p><ul><li>Django使用数据库中的一个<code>django_migraton</code>的特殊表来追踪哪些迁移文件被应用过</li><li><p>其次, 如果没有发现你应用下的迁移文件记录, 那就会执行, 但之后还会检查是否库中真的有你的表</p></li><li><p>如果你删除<code>django_migraton</code>表中对应自己应用中migration文件的那条记录, 你就可以重新使用 <code>migrate</code> 命令来生成表, 但如果你的表仍然存在,则会报错, 所以<strong>不要进行此类破坏性操作</strong>;</p></li><li>或者你如果直接在数据库中删除了你自己的表, 那么你直接运行 <code>migrate</code> 命令, 会发现也没有效果, 因为该命令首先会查看<code>django_migraton</code>, 而其中还有你迁移文件的记录;</li></ul></li><li><p>在稍后如果觉得数据表结构不合适, 可能会更改数据表的字段信息, 如果在添加了字段之后运行迁移的两个命令时, 会出现如下错误:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">You are trying to add a non-nullable field &apos;pub_date&apos; to article without a default; we can&apos;t do that (the database needs something to populate existing rows).</div><div class="line"></div><div class="line">Please select a fix:</div><div class="line"></div><div class="line"> 1) Provide a one-off default now (will be set on all existing rows)</div><div class="line"></div><div class="line"> 2) Quit, and let me add a default in models.py</div><div class="line"></div><div class="line">这段话的意思是 pub_date 字段没有默认值，而且非Null 那么 </div><div class="line"></div><div class="line">1) 指定一个一次性的值供更改数据库时使用。</div><div class="line"></div><div class="line">2) 停止当前操作，在 models.py 中给定默认值，然后再来migrate。</div></pre></td></tr></table></figure><p> 此时, 选择1, 然后输入 <code>&#39;&#39;</code> 即可, 或者你在增加字段的时候指定默认值!<br> 目前觉着这个貌似没啥大用!!</p><p> 当然, 你还可以修改字段名, 删除字段…..<br> 每次修改完之后, migrations命令都会生成数据model的更改记录文件;</p></li><li><p>由于你每次执行完迁移命令之后, <code>django_migraton</code> 这张表中都会记录哪些迁移文件你做了迁移(包括你的更改表结构所生成的迁移文件), 所以每次你执行迁移命令的时候, 只会执行新增的model表结构所生成的的迁移文件;<br> 所以迁移会很快</p></li></ol><h3 id="遗留数据库整合到Django"><a href="#遗留数据库整合到Django" class="headerlink" title="遗留数据库整合到Django"></a><a href="http://python.usyiyi.cn/translate/django_182/howto/legacy-databases.html" target="_blank" rel="external">遗留数据库整合到Django</a></h3><p>在进行models迁移的时候, 如果表结构已经存在了呢?</p><ul><li>虽然Django<strong>最适合用来开发新的应用</strong>，但也可以将它整合到遗留的数据库中; Django包含了很多工具，尽可能自动化解决这类问题;</li></ul><ol><li><p>首先你需要向Django提供你的数据库配置信息(这个之前已经了解过了)<br> 也就是让Django知道你想整合的数据库在哪里</p></li><li><p>Django自带了一个叫做 <code>inspectdb</code> 的工具(<strong><a href="http://python.usyiyi.cn/translate/django_182/ref/django-admin.html#django-admin-inspectdb" target="_blank" rel="external">inspectdb文档</a></strong>), 可以按照现有的数据库创建模型;</p><ul><li><p>运行如下命令并查看输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py inspectdb</div></pre></td></tr></table></figure></li><li><p>因此可以重定向标准输出流来保存文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py inspectdb &gt; models.py</div></pre></td></tr></table></figure><p>这样就会在当前目录下生成一个models.py的模型文件, 你可以将这个模型文件放入到你创建的应用中</p></li><li><p>默认情况下，inspectdb创建的模型是未被管理的, 所以生成的模型文件中的Meta类中的 <code>managed = False</code> 就是告诉Django不要管理每个表的创建,修改和删除:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Person(models.Model):</div><div class="line">    id = models.IntegerField(primary_key=True)</div><div class="line">    first_name = models.CharField(max_length=70)</div><div class="line">    class Meta:</div><div class="line">        managed = False</div><div class="line">        db_table = &apos;CENSUS_PERSONS&apos;</div></pre></td></tr></table></figure><p><strong>也就是说你在model中对表结构做出修改的时候, 使用迁移命令 <code>migration</code> 会发现它并不会识别出表结构已经发生变化了, 除非你把model类中的Meta类的 <code>managed</code> 改成True或者删除</strong><br><strong>如果你希望Django管理表的生命周期，你需要把managed选项改为 True（或者简单地把它移除，因为True是默认值）</strong></p></li><li><p>另外需要注意的是:<br><img src="/img/django/inspectdb_01.png" width="626" height="185"></p></li></ul></li><li><p>遗留的数据库导入为Django的model的时候, 之前表之前的关系(一对多,多对多…)会怎样?</p><ul><li></li></ul></li></ol><h3 id="Django数据库路由"><a href="#Django数据库路由" class="headerlink" title="Django数据库路由"></a>Django数据库路由</h3><ol><li><p>之前我们已经对Django的setting文件做了配置, 并成功连接到了Mysql数据库, 但如果我们要做更复杂的业务, 这根本不够, 比如我们要做<strong>读写分离</strong>该如何配置?</p></li><li><p>在使用PHP的框架时, 一般我们只用在配置文件中配置好读写库的相关配置, 比如Laravel框架, 不管你用的是原生 SQL，还是查询构建器，还是 Eloquent ORM，只要配置正确，合适的连接总是会被使用;<br> 但是Django中就没有这么简单;</p></li><li><p>在Django中, 有 <code>数据库路由</code> 的概念:<br> 当我们有很多模型的时候, 通过实现一个数据库路由, 可以指定你的模型<strong>在进行哪类操作的时候, 操作哪个数据库！</strong></p></li></ol><h3 id="实现数据库路由"><a href="#实现数据库路由" class="headerlink" title="实现数据库路由"></a>实现数据库路由</h3><ol><li><p>一个数据库路由是一个拥有4个方法的类，这四个方法是:</p><ul><li>db_for_read(model, **hints) # 对于该model 用哪个数据库来读</li><li>db_for_write(model, **hints) # 对于该model用哪个数据库来写</li><li>allow_relation(obj1, obj2, **hints) # 是否允许两个对象关联到数据库</li><li>allow_migrate(db, app_label, model_name=None, **hints) # 对于指定的app，是否允许对db这个数据库进行migrate</li></ul></li><li><p>接下来, 我们可以在项目的目录下创建一个 <code>routers.py</code></p> <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"> </div></pre></td></tr></table></figure></li></ol><p><a href="http://jingpin.jikexueyuan.com/zhuti/python/" target="_blank" rel="external">http://jingpin.jikexueyuan.com/zhuti/python/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;连接mysql数据库&quot;&gt;&lt;a href=&quot;#连接mysql数据库&quot; class=&quot;headerlink&quot; title=&quot;连接mysql数据库&quot;&gt;&lt;/a&gt;连接mysql数据库&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;当我们修改项目配置文件中的数据库配置项为如下配置项&lt;/p&gt;
      
    
    </summary>
    
      <category term="Django" scheme="http://blog.renyimin.com/categories/Django/"/>
    
    
      <category term="Django" scheme="http://blog.renyimin.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>10 - Django数据库模型前置信息</title>
    <link href="http://blog.renyimin.com/2017/11/25/2017-11-25-Django-10/"/>
    <id>http://blog.renyimin.com/2017/11/25/2017-11-25-Django-10/</id>
    <published>2017-11-25T12:18:00.000Z</published>
    <updated>2017-12-05T14:30:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>要使用Django的数据模型, 你需要做的事情及考虑还是比较多的：</p><ol><li><p>首先要选择数据库并配置数据库连接信息;</p></li><li><p>接下来就是创建表对应的模型了<br> Django的ORM在创建model的时候, 需要提供的表信息比较多, 因为Django会依据model帮你创建出表结构来;<br> 在model创建时, 需要注意的点比较多, 此处暂时列出如下几点:</p><ul><li>原先遗留数据库如何整合到Django?</li><li>数据model对应的字段类型比较多, 注意多加使用, 还可以自定义字段类型</li><li>表之间的关系 (一对多, 多对多…)</li><li>事务(Transcation)的使用</li><li>数据库索引的使用</li><li>聚合的相关用法</li><li>会涉及到model的继承问题</li><li>Django原生ORM只能针对关系型数据库? 非关系型的NoSQL数据库如何对接?<br>（<a href="http://jingpin.jikexueyuan.com/article/11501.html）" target="_blank" rel="external">http://jingpin.jikexueyuan.com/article/11501.html）</a><br>（<a href="https://www.zhihu.com/question/19818326）" target="_blank" rel="external">https://www.zhihu.com/question/19818326）</a></li><li>更高级的</li></ul></li><li><p>创建好model模型文件之后, 接下来还要接触几个Django的基本命令</p><ul><li>python manage.py makemigrations</li><li>python manage.py migrate TestModel </li></ul></li><li><p>如果应用的models.py中创建的model将来可能会过多的话, 还要考虑拆分models</p></li><li><p>如果涉及到<code>读写分离</code>或者项目中<code>使用多个数据库</code>的时候, 需要配置多个数据库配置块</p></li><li><p>配置好数据库连接信息之后, 你可能启动Django还会失败, 因为你还要选择</p></li><li><p>如果配置了多个数据库配置块的话, 还需要实现 <strong>数据库路由</strong> 来决定你的查询操作是要操作哪个数据库</p></li></ol><ol><li>…… 未完待续</li></ol><blockquote><p><a href="http://python.usyiyi.cn/translate/django_182/index.html" target="_blank" rel="external">参考</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;要使用Django的数据模型, 你需要做的事情及考虑还是比较多的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先要选择数据库并配置数据库连接信息;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接下来就是创建表对应的模型了&lt;br&gt; Django的ORM在创建model的时候, 需要提供的表信息
      
    
    </summary>
    
      <category term="Django" scheme="http://blog.renyimin.com/categories/Django/"/>
    
    
      <category term="Django" scheme="http://blog.renyimin.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>03 - 重新规划Django项目布局结构和目录结构</title>
    <link href="http://blog.renyimin.com/2017/11/10/2017-11-10-Django-03/"/>
    <id>http://blog.renyimin.com/2017/11/10/2017-11-10-Django-03/</id>
    <published>2017-11-10T12:21:17.000Z</published>
    <updated>2017-12-04T04:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="django的models拆分"><a href="#django的models拆分" class="headerlink" title="django的models拆分"></a>django的models拆分</h3><p>1.在Django开发中如果models文件过长,就需要对其进行拆分, 一般会使用的拆分方法如下:</p><ul><li>根据功能/业务直接拆分app, 没必要将一个app写的过于冗长;</li><li>删除默认的models.py文件, 创建<code>models包</code>，需要在 models/ 下添加<strong>init</strong>.py文件, 然后在models下创建模型文件, 但是此时执行 <code>python manage.py syncdb</code> 仍然不能生成对应的数据表, 需要在<code>__init__.py</code>文件中导入这些modules, 在<strong>init</strong>.py中加入:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">from user import *</div><div class="line">from order import *</div></pre></td></tr></table></figure></li></ul><p>现在执行<code>python manage.py syncdb</code>就会生成对应的表了．</p><p>当然，还要注意的是，最好在拆分的model中每张表都添加一个元选项: <code>app_label</code>, 指明是那个app下的model.<br>例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class User(models.Model):</div><div class="line">name = models.CharField(max_length = 255, null = False)</div><div class="line">age = models.IntegerField(null = True)</div><div class="line">class Meta:</div><div class="line">app_label = &apos;person&apos;</div><div class="line">db_table = &apos;student&apos;</div></pre></td></tr></table></figure></p><p>这两种方式都可行，但是比较推荐使用第一种方式，首先它不用像第二种方式每个class都添加app_label,另外拆分app会使正个项目结构更加清晰明了;</p><h3 id="正确的使用和设置Database和Model"><a href="#正确的使用和设置Database和Model" class="headerlink" title="正确的使用和设置Database和Model"></a><a href="http://www.weiguda.com/blog/8/" target="_blank" rel="external">正确的使用和设置Database和Model</a></h3><!--<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/django/model_catch.png" alt="截图" title="">                </div>                <div class="image-caption">截图</div>            </figure>–&gt;<h3 id="组织和设置urls-py"><a href="#组织和设置urls-py" class="headerlink" title="组织和设置urls.py"></a><a href="http://www.weiguda.com/blog/9/">组织和设置urls.py</a></h3><!--<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/django/urls.png" alt="截图" title="">                </div>                <div class="image-caption">截图</div>            </figure>–&gt;<p><a href="http://www.weiguda.com/blog/7/">摘自</a></p>-->]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;django的models拆分&quot;&gt;&lt;a href=&quot;#django的models拆分&quot; class=&quot;headerlink&quot; title=&quot;django的models拆分&quot;&gt;&lt;/a&gt;django的models拆分&lt;/h3&gt;&lt;p&gt;1.在Django开发中如果mode
      
    
    </summary>
    
      <category term="Django" scheme="http://blog.renyimin.com/categories/Django/"/>
    
    
      <category term="Django" scheme="http://blog.renyimin.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>02 - 重新规划Django项目布局结构和目录结构</title>
    <link href="http://blog.renyimin.com/2017/11/10/2017-11-10-Django-02/"/>
    <id>http://blog.renyimin.com/2017/11/10/2017-11-10-Django-02/</id>
    <published>2017-11-10T11:43:00.000Z</published>
    <updated>2017-12-04T05:46:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.loonapp.com/" target="_blank" rel="external">http://www.loonapp.com/</a></p><p>Django(1.11.7)的默认布局<br>之前当我们使用<code>django-admin.py startproject MyDjangoBog</code> 和 <code>django-admin.py startapp blog</code> 建立新的Django项目时, Django默认的结构如下<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">MyDjangoBlog/</div><div class="line">    manage.py</div><div class="line">    migrations/</div><div class="line">        __init__.py</div><div class="line">    blog/</div><div class="line">        __init__.py</div><div class="line">        admin.py</div><div class="line">        models.py</div><div class="line">        tests.py</div><div class="line">        views.py</div><div class="line">    MyDjangoBlog/</div><div class="line">        __init__.py</div><div class="line">        settings.py</div><div class="line">        urls.py</div><div class="line">        wsgi.py</div></pre></td></tr></table></figure></p><p><strong>在Django默认的项目部局中, 存在着一些问题, 特别是在部署到真正的服务器时, 这些问题会越发的明显, 下面我们会一一阐述这些问题</strong></p><h3 id="Django项目的设置-settings-py-文件"><a href="#Django项目的设置-settings-py-文件" class="headerlink" title="Django项目的设置(settings.py)文件"></a>Django项目的设置(<code>settings.py</code>)文件</h3><p>我们应该使用分离式的设置文件, django项目建立时, 会自动生成<code>settings.py</code>文件，为了实现分离式的设置文件, 我们首先删除settings.py, 然后建立settings目录:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">settings/</div><div class="line">    __init__.py</div><div class="line">    base.py # 基本设置文件, 在各个环境中都相同的设置可以放入其中.</div><div class="line">    local.py # 当在开发时使用的设置文件. 可以设置开发时的选项, 包括DEBUG, log的等级, 是否开启例如 django-debug-toolbar等开发工具等</div><div class="line">    test.py # 运行test时的配置, 包括test runners, in-memory数据库定义和log设置等.</div><div class="line">    release.py # 当部署到预发部服务器上所用的设置</div><div class="line">    production.py # 当部署到正式服务器上所用的设置</div><div class="line">    ...</div><div class="line">    # 有时, 一个开发人员的配置文件可能与另一个不同, 这时, 我们可以在settings目录中新建local_name.py</div></pre></td></tr></table></figure></p><p>然后我们可以使用以下命令使用这些不同的设置文件：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python manage.py shell --settings=MyDjangoBlog.settings.local</div><div class="line">python manage.py runserver --settings=MyDjangoBlog.settings.local</div></pre></td></tr></table></figure></p><h3 id="将关键信息和设置文件分离"><a href="#将关键信息和设置文件分离" class="headerlink" title="将关键信息和设置文件分离"></a>将关键信息和设置文件分离</h3><p>1.将 <code>SECTET_KEY</code>, <code>AWS key</code>, <code>API key</code> 等关键信息放入设置文件中也是违反基本原则的, 因为:</p><ul><li>配置环境不同时关键信息会改变, 程序却不会;</li><li>关键信息不是程序;</li><li>关键信息应当是隐蔽的, 如果储存在了版本管理系统中, 则任何有权访问该版本库的用户都能获知这些关键信息;</li><li>许多PAAS服务无法为每台服务器编辑设置文件, 即使可以, 这也是不正确的做法;</li></ul><p>2.环境变量<br>为了避免以上的问题, 我们使用环境变量 (environment variables) 来储存这些关键信息, (需要注意的是, apache不支持环境变量, 我们会在下面讲到), 使用环境变量储存关键信息有以下好处:</p><pre><code>- 将关键信息从代码中移除, 这样你就可以安心的将所有文件放入版本管理系统中;- 每个开发人员都拥有一样的local.py文件;- 在部署django项目时, 不需要修改程序代码;- 大多数PAAS都推荐这一方法, 并提供了方便的设置方法, 因此容易实现;</code></pre><p>3.设置环境变量<br>在使用bash的Mac或Linux中设置环境变量比较容易, 你只需要将以下代码加入<code>.bashrc</code>, <code>.bash_profile</code>, 或 <code>.profile</code> 其中之一即可, 如果多个项目使用相同的API, 并且关键信息都不同时, 可以将以下代码加入到 <code>virtualenv</code> 的 <code>bin/activate</code> 脚本中:<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ export SOME_SECRET_KEY=<span class="number">654</span><span class="number">-3j</span>gwg<span class="number">-4</span>r3<span class="number">-2</span>t4h<span class="number">-76j</span>k</div><div class="line">$ export ANOTHER_SECRET_KEY=y5y<span class="number">-5j</span>k8<span class="number">-75</span>i5h<span class="number">-5</span>g4/.-,o.</div></pre></td></tr></table></figure></p><p>如果使用的是windows系统, 则设置稍微复杂一点, 如果使用cmd.exe, 你必须使用setx命令一个一个的设置, 一个较好的方式是使用virtualenv的 <code>bin/activate.bat</code><br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; setx OME_SECRET_KEY=654-3jgwg-4r3-2t4h-76jk</div></pre></td></tr></table></figure></p><p>PowerShell是Windows Vista及以上自带的shell, 它比cmd.exe强大得多, 因此可以使用PowerShell来设置环境变量:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 为用户User设置</div><div class="line">[Environment]::SetEnvironmentVariable(&quot;SOME_SECRET_KEY&quot;, &quot;654-3jgwg-4r3-2t4h-76jk&quot;, &quot;User&quot;)</div><div class="line"></div><div class="line"># 为全局设置</div><div class="line">[Environment]::SetEnvironmentVariable(&quot;SOME_SECRET_KEY&quot;, &quot;654-3jgwg-4r3-2t4h-76jk&quot;, &quot;Machine&quot;)</div></pre></td></tr></table></figure></p><p>如果你使用virtuanenvwrapper, 那么可以使用virtualenvwrapper的pre-virtualenv设置环境变量, 这样可能会更方便.</p><p>如果你使用PAAS, 则请参阅不同的PAAS提供的设置方法.</p><p>4.获取环境变量<br>如何在django的settings代码中获取这些关键信息:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 在settings/production.py顶部</div><div class="line">import os</div><div class="line">SOME_SECRET_KEY = os.environ[&quot;SOME_SECRET_KEY&quot;]</div></pre></td></tr></table></figure></p><p>在以上代码中, 如果SOME_SECRET_KEY无法被获取到的话, 就会出现KeyError错误, 导致django项目无法启动. 这很好, 但KeyError没有提供更有 用的信息, 导致debug的困难, 因此, 我们在base.py(希望你还记得这是哪个文件)加入以下function, 为我们提供哪个关键信息无法获取的信息:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># settings/base.py</div><div class="line">import os</div><div class="line"># 通常你不应该从django引入任何代码, 但ImproperlyConfigured是个例外</div><div class="line">from django.core.exceptions import ImproperlyConfigured</div><div class="line"></div><div class="line">def get_env_variable(var_name):</div><div class="line">    try:</div><div class="line">        return os.environ[var_name]</div><div class="line">    except KeyError:</div><div class="line">        error_msg = &quot;Set the %s environment variable&quot; % var_name</div><div class="line">        raise ImproperlyConfigured(&apos;error_msg&apos;)</div></pre></td></tr></table></figure></p><p>然后修改之前的production.py:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 在settings/production.py顶部</div><div class="line">import os</div><div class="line">SOME_SECRET_KEY = get_env_variable(&apos;SOME_SECRET_KEY&apos;)</div></pre></td></tr></table></figure></p><p>此时, 当你没有设置SOME_SECRET_KEY环境变量时, 系统会提示错误信息, 告诉你是哪个环境变量没有设置.</p><p>5.无法使用环境变量时<br>当我们使用apache时, 我们会发现, django无法使用环境变量;</p><p>这时, 我们推荐将关键信息储存在JSON格式的文件中, 已达到将关键信息和代码分离的目的;</p><p>首先我们可以创建secrets.json文件:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;FILENAME&quot;: &quot;secrets.json&quot;,</div><div class="line">    &quot;SOME_SECRET_KEY&quot;: &quot;654-3jgwg-4r3-2t4h-76jk&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在settings中使用该文件:<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># settings/base.py</div><div class="line"></div><div class="line">import json</div><div class="line"># 通常你不应该从django引入任何代码, 但ImproperlyConfigured是个例外</div><div class="line">from django.core.exceptions import ImproperlyConfigured</div><div class="line"></div><div class="line"># 读取json文件</div><div class="line">with open(&quot;secrets.json&quot;) as f:</div><div class="line">    secrets = json.loads(f.read())</div><div class="line"></div><div class="line">def get_secret(setting, secrets=secrets):</div><div class="line">    try:</div><div class="line">        return secrets[setting]</div><div class="line">    except KeyError:</div><div class="line">        error_msg = &quot;Set the &#123;0&#125; environment variable&quot;.format(setting)</div><div class="line">        raise ImproperlyConfigured(&apos;error_msg&apos;)</div><div class="line"></div><div class="line">SOME_SECRET_KEY = get_secret(&apos;SOME_SECRET_KEY&apos;)</div></pre></td></tr></table></figure></p><h3 id="使用不同的部署文件-requirements-txt"><a href="#使用不同的部署文件-requirements-txt" class="headerlink" title="使用不同的部署文件(requirements.txt)"></a>使用不同的部署文件(requirements.txt)</h3><p>1.部署文件(<code>requirements.txt</code>)中储存的是该django项目的依赖库, 一般使用 <code>pip freeze --local</code>生成.<br>本着”只安装需要的模块”的原则, 不同的设置文件, 应当对应不同的requirements.txt文件, 就像分离式的settings文件一样, 我们使用分离式的requirements文件;<br>建立requirements目录, 其结构如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">requirements/</div><div class="line">    base.txt</div><div class="line">    local.txt</div><div class="line">    production.txt</div><div class="line">    release.txt</div><div class="line">    test.txt</div></pre></td></tr></table></figure></p><p>在base.txt中, 储存的是所有开发环境中都会用到的依赖库, 例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Django==1.6.5</div><div class="line">psycopg2==2.5.3</div><div class="line">South==0.8.4</div></pre></td></tr></table></figure></p><p>在local.txt中, 储存的是本地开发时用到的依赖库:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 导入base.txt中的依赖库</div><div class="line">-r  base.txt</div><div class="line"></div><div class="line">coverage==3.7.1</div><div class="line">django-debug-toolbar==1.2</div></pre></td></tr></table></figure></p><p>2.当重新配置本地开发环境时, 可以使用以下代码安装依赖库:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install -r requirements/local.txt</div></pre></td></tr></table></figure></p><h3 id="设置文件中的文件路径"><a href="#设置文件中的文件路径" class="headerlink" title="设置文件中的文件路径"></a>设置文件中的文件路径</h3><p>1.我们强烈反对将绝对路径写入设置文件中, 因为如果将绝对路径写入设置文件中的话, 遇到不同的环境, 就需要重新修改, 给开发和部署带来了许多麻烦 和不确定性.</p><p>2.我们推荐使用<code>Unipath</code>来设置media, static和templates的路径. 这样无论部署测试环境如何变化, media和templates文件夹的设置都不会有问题.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># settings/base.py 顶部</div><div class="line">from unipath import Path</div><div class="line"></div><div class="line">BASE_DIR = Path(__file__).ancestor(3)</div><div class="line">MEDIA_ROOT = BASE_DIR.child(&quot;media&quot;)</div><div class="line">STAIC_ROOT = BASE_DIR.child(&quot;static&quot;)</div><div class="line">TEMPLATES_DIRS = (</div><div class="line">    BASE_DIR.child(&quot;templates&quot;),</div><div class="line">)</div></pre></td></tr></table></figure><h3 id="正确的使用和设置Database和Model"><a href="#正确的使用和设置Database和Model" class="headerlink" title="正确的使用和设置Database和Model"></a>正确的使用和设置Database和Model</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/django/model_catch.png" alt="截图" title="">                </div>                <div class="image-caption">截图</div>            </figure><h3 id="组织和设置urls-py"><a href="#组织和设置urls-py" class="headerlink" title="组织和设置urls.py"></a>组织和设置urls.py</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/django/urls.png" alt="截图" title="">                </div>                <div class="image-caption">截图</div>            </figure><p><a href="http://www.weiguda.com/blog/7/" target="_blank" rel="external">摘自</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://www.loonapp.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.loonapp.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Django(1.11.7)的默认布局&lt;br&gt;之前当我们使用&lt;code&gt;d
      
    
    </summary>
    
      <category term="Django" scheme="http://blog.renyimin.com/categories/Django/"/>
    
    
      <category term="Django" scheme="http://blog.renyimin.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>01 - Django入门</title>
    <link href="http://blog.renyimin.com/2017/11/10/2017-11-10-Django-01/"/>
    <id>http://blog.renyimin.com/2017/11/10/2017-11-10-Django-01/</id>
    <published>2017-11-10T11:05:00.000Z</published>
    <updated>2017-12-01T03:18:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python 可以帮我们做很多事情, 包括web开发, 为了让我们的开发更加方便, 和其他脚本语言(比如PHP)一样, Python也有很多web框架, 常见的比如: <strong>Django</strong>, Pylons, Tornado, Bottle, <strong>Flask</strong> 等;<br>这里我们要说的是使用比较广泛的 <code>Django</code>;</p><p>本篇笔记主要是安装Django, 简单使用Django的一些基本命令, 最终运行一个web应用; </p><h3 id="Meet-Django"><a href="#Meet-Django" class="headerlink" title="Meet Django"></a>Meet Django</h3><ol><li><p>简介</p><blockquote><p>“Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design. Built by experienced developers, it takes care of much of the hassle of Web development, so you can focus on writing your app without needing to reinvent the wheel. It’s free and open source.” </p></blockquote></li><li><p>版本选择:<br> <img src="/img/django/version_01.png" width="520" height="250"><br> <img src="/img/django/version_02.png" width="500" height="270"><br> <img src="/img/django/version_feature.png" width="500" height="300"></p></li><li><p>Django版本能够支持的python版本?<br> <img src="/img/django/version_django_python.png" width="477" height="192"><br> 本地python 版本:<br> <img src="/img/django/python_version_01.png" width="550" height="65"></p></li></ol><h3 id="Install-Django-Mac"><a href="#Install-Django-Mac" class="headerlink" title="Install Django (Mac)"></a>Install Django (Mac)</h3><ol><li><p>通过上述了解, 此处采用Django1.11.7版本:<br> <img src="/img/django/install_django.png" width="605" height="331"></p></li><li><p>pip安装可能会有点慢, 所以采用上图中的源码包下载, 下载完成后解压进入解压包的根目录:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">执行: python setup.py install</div></pre></td></tr></table></figure><p> 如下安装成功:<br> <img src="/img/django/django_version_02.png" width="500" height="100"></p></li></ol><h3 id="构建项目-Django基本命令"><a href="#构建项目-Django基本命令" class="headerlink" title="构建项目 (Django基本命令)"></a>构建项目 (Django基本命令)</h3><ol><li><p>新建一个 Django 项目 </p> <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/Desktop/</div><div class="line">django-admin.py startproject MyDjangoBlog</div></pre></td></tr></table></figure><p> 项目目录结构如下:<br> <img src="/img/django/django_blog.png" width="429" height="250"></p></li></ol><h3 id="构建应用-Django基本命令"><a href="#构建应用-Django基本命令" class="headerlink" title="构建应用 (Django基本命令)"></a>构建应用 (Django基本命令)</h3><ol><li><p>先进入项目目录下, 再执行如下命令;</p></li><li><p>创建应用: </p> <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py startapp blog</div></pre></td></tr></table></figure><p> 则会在项目目录中创建一个应用:<br> <img src="/img/django/django_blog_02.png" width="365" height="408"></p></li><li><p>之后使用Django自带的开发服务器</p><pre><code class="python">python manage.py runserver <span class="number">8080</span></code></pre><p> <img src="/img/django/django_runserver.png" width="550" height="180"><br> 查看效果: 表示启动成功<br> <img src="/img/django/run_server_result.png" width="550" height="130"></p></li><li><p>另外, 在新建完应用之后, 要让项目知道你有这个应用了</p><ul><li>将我们新建的应用(blog)添加到 settings.py 中的 INSTALLED_APPS中，也就是告诉Django有这么一个应用</li><li>新建的 app 如果不加到 INSTALL_APPS 中的话, django 就不能自动找到app中的模板文件(app-name/templates/下的文件)和静态文件(app-name/static/中的文件) </li></ul></li></ol><h3 id="其他Django命令"><a href="#其他Django命令" class="headerlink" title="其他Django命令"></a>其他Django命令</h3><ol><li><p>可以使用 <code>python manage.py</code> 看到详细的命令列表</p></li><li><p>更多Django命令之后会逐渐接触到</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Python 可以帮我们做很多事情, 包括web开发, 为了让我们的开发更加方便, 和其他脚本语言(比如PHP)一样, Python也有很多web框架, 常见的比如: &lt;strong&gt;Django&lt;/strong&gt;, Pylons, Tornado, Bottle, &lt;st
      
    
    </summary>
    
      <category term="Django" scheme="http://blog.renyimin.com/categories/Django/"/>
    
    
      <category term="Django" scheme="http://blog.renyimin.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>06 - Python 环境准备入门 - Anaconda</title>
    <link href="http://blog.renyimin.com/2017/10/03/2017-10-03-Python-06/"/>
    <id>http://blog.renyimin.com/2017/10/03/2017-10-03-Python-06/</id>
    <published>2017-10-03T03:05:31.000Z</published>
    <updated>2017-12-04T13:59:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h3><p><code>Anaconda</code> 是一个用于科学计算的Python发行版, 支持 Linux, Mac, Windows系统, <strong>提供了包管理与环境管理的功能</strong>，可以很方便地解决多版本python并存、切换以及各种第三方包安装问题; Anaconda利用工具/命令<code>conda</code>来进行package和environment的管理, 并且已经包含了Python和相关的配套工具;</p><p>言而总之, 就是 Anaconda也可以帮我们创建多套独立的Python虚拟环境并进行环境的管理, 同时也提供了对包的管理;</p><h4 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda:"></a>安装Anaconda:</h4><ol><li>在安装Anaconda之前, 其实不需要安装Python, 因为Anaconda中包括了Python;</li><li>直接在<a href="https://www.anaconda.com/download/" target="_blank" rel="external">Anaconda官网</a>下载并双击进行安装;</li><li>安装时，会发现有两个不同版本的Anaconda，分别对应Python 2.7和Python 3.6，两个版本其实除了这点区别外其他都一样。(但其实安装哪个版本并不本质, 因为通过环境管理, 还可以很方便地切换运行时的Python版本)</li></ol><ul><li><p>如下就安装好了:</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">renyimindeMacBook-Pro:~ renyimin$ which conda</div><div class="line">/Users/renyimin/anaconda3/bin/conda</div></pre></td></tr></table></figure></li><li><p>Mac、Linux会在主目录下多了个文件夹（~/anaconda）</p></li><li><p>并且此时, Anaconda会帮你自动设置好宿主机的Python环境为Anaconda自带的Python3.6</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">renyimindeMacBook-Pro:~ renyimin$ python3</div><div class="line">Python 3.6.3 |Anaconda, Inc.| (default, Oct  6 2017, 12:04:38) </div><div class="line">[GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)] on darwin</div><div class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></li><li><p>直接运行 <code>python</code>, 结果也是Anaconda自带的Python3.6.3了</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">renyimindeMacBook-Pro:~ renyimin$ python</div><div class="line">Python 3.6.3 |Anaconda, Inc.| (default, Oct  6 2017, 12:04:38) </div><div class="line">[GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)] on darwin</div><div class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></li><li><p>而且, 之前我们是有pip2和pip3, 现在直接有pip了, 并且默认版本也是Anaconda自带的pip版本</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">renyimindeMacBook-Pro:~ renyimin$ pip -V</div><div class="line">pip 9.0.1 from /Users/renyimin/anaconda3/lib/python3.6/site-packages (python 3.6)</div><div class="line">renyimindeMacBook-Pro:~ renyimin$</div></pre></td></tr></table></figure><p>  同时, Anaconda还内置了许多非常有用的第三方库, 由于我们现在本机既有Python2(<code>python</code>), 又有Python3.6(<code>python3</code>), 还有Anaconda自带的Python(‘python’), 所以查看包列表也是有三个pip命令可以运行</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pip (Anaconda自带的) list : 会发现有很多内置包</div><div class="line">pip2 (Mac默认带的) list : 干净的, 需要自己安装</div><div class="line">pip3 (自己装的Python3) list : 干净的, 需要自己安装</div></pre></td></tr></table></figure></li><li><p>另外, 安装完后, 电脑中多了一些应用:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Anaconda Navigtor ：用于管理工具包和环境的图形用户界面，后续涉及的众多管理命令也可以在 Navigator 中手工实现。</div><div class="line">Jupyter notebook ：基于web的交互式计算环境，可以编辑易于人们阅读的文档，用于展示数据分析的过程。</div><div class="line">qtconsole ：一个可执行 IPython 的仿终端图形界面程序，相比 Python Shell 界面，qtconsole 可以直接显示代码生成的图形，实现多行代码输入执行，以及内置许多有用的功能和函数。</div><div class="line">spyder ：一个使用Python语言、跨平台的、科学运算集成开发环境。</div></pre></td></tr></table></figure></li><li><p>安装完成后，我们还需要对所有工具包进行升级，以避免可能发生的错误。打开你电脑的终端，在命令行中输入：<code>conda upgrade --all</code></p><h4 id="Conda的环境管理"><a href="#Conda的环境管理" class="headerlink" title="Conda的环境管理"></a>Conda的环境管理</h4></li></ul><ol><li>用户安装的不同python环境都会被放在目录 <code>~/anaconda3/envs</code> 下，可以在命令中运行 <code>conda info -e</code> 或者 <code>conda env list</code> 查看已安装的环境，当前被激活的环境会显示有一个星号或者括号: <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">renyimindeMacBook-Pro:anaconda3 renyimin$ conda info -e</div><div class="line"># conda environments:</div><div class="line">#</div><div class="line">root                  *  /Users/renyimin/anaconda3 </div><div class="line">renyimindeMacBook-Pro:anaconda3 renyimin$</div></pre></td></tr></table></figure></li></ol><ol><li>创建一个虚拟环境(并指定python版本)</li></ol><ul><li>会提示你需不需要自带一些安装包 (这里需要选择是, 因为会创建一个内置很多第三方库的虚拟环境, 主要是python版本也包含在里面, <strong>所以要选择 y</strong> ):</li><li><p>创建完成之后:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">renyimindeMacBook-Pro:anaconda3 renyimin$ conda info -e</div><div class="line"># conda environments:</div><div class="line">#</div><div class="line">python36                 /Users/renyimin/anaconda3/envs/python36</div><div class="line">root                  *  /Users/renyimin/anaconda3</div><div class="line">renyimindeMacBook-Pro:anaconda3 renyimin$</div></pre></td></tr></table></figure></li><li><p>也可以尝试创建python其他的版本, 当然, <strong>和你本机安装的Python版本没有关系, 也不受其限制</strong>, 如下安装了Python2.6</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">renyimindeMacBook-Pro:anaconda3 renyimin$ conda info -e</div><div class="line"># conda environments:</div><div class="line">#</div><div class="line">python26                 /Users/renyimin/anaconda3/envs/python26</div><div class="line">python36                 /Users/renyimin/anaconda3/envs/python36</div><div class="line">root                  *  /Users/renyimin/anaconda3</div><div class="line">renyimindeMacBook-Pro:anaconda3 renyimin$</div></pre></td></tr></table></figure></li><li><p>如何激活并进入环境</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 安装好后，使用activate激活某个环境</div><div class="line">activate python34 # for Windows</div><div class="line">source activate python36 # for Linux &amp; Mac</div><div class="line"># 激活后，会发现terminal输入的地方多了python34的字样，实际上，此时系统做的事情就是把默认2.7环境从PATH中去除，再把3.4对应的命令加入PATH</div></pre></td></tr></table></figure></li><li><p>如果想返回默认的python宿主环境 (注意此时宿主环境中的 <code>python</code> 已经成了装完anaconda之后的python了)</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">deactivate python36 # for Windows</div><div class="line">source deactivate python36 # for Linux &amp; Mac</div></pre></td></tr></table></figure></li><li><p>删除一个已有的环境</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda remove --name python36 --all</div></pre></td></tr></table></figure></li></ul><h4 id="Conda的包管理"><a href="#Conda的包管理" class="headerlink" title="Conda的包管理"></a>Conda的包管理</h4><ol><li><p>conda的一些常用操作如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">conda list  # 查看当前环境下已安装的包</div><div class="line">conda list -n python36  # 查看某个指定环境的已安装包</div><div class="line">conda search numpy  # 查找package信息</div><div class="line">conda install -n python36 numpy # 安装package, 如果不用-n指定环境名称，则被安装在当前活跃环境</div><div class="line"># 也可以通过-c指定通过某个channel安装</div><div class="line"></div><div class="line"># 更新package</div><div class="line">conda update -n python36 numpy</div><div class="line"></div><div class="line"># 删除package</div><div class="line">conda remove -n python36 numpy</div></pre></td></tr></table></figure></li><li><p>前面已经提到，conda将conda自身、python等都视为package，因此，完全可以使用conda来管理conda和python的版本，例如 </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># 更新conda，保持conda最新</div><div class="line">conda update conda</div><div class="line"></div><div class="line"># 更新anaconda</div><div class="line">conda update anaconda</div><div class="line"></div><div class="line"># 更新python</div><div class="line">conda update python</div><div class="line"># 假设当前环境是python 3.4, conda会将python升级为3.4.x系列的当前最新版本</div><div class="line"></div><div class="line"># 更新conda，保持conda最新</div><div class="line">conda update conda</div><div class="line"></div><div class="line"># 更新anaconda</div><div class="line">conda update anaconda</div><div class="line"></div><div class="line"># 更新python</div><div class="line">conda update python</div><div class="line"># 假设当前环境是python 3.4, conda会将python升级为3.4.x系列的当前最新版本</div></pre></td></tr></table></figure></li><li><p>项目需要选择哪个虚拟环境, 直接在Pycharm中指定即可(和virtualenv一样)</p></li></ol><h4 id="设置国内镜像"><a href="#设置国内镜像" class="headerlink" title="设置国内镜像"></a>设置国内镜像</h4><ol><li>如果需要安装很多packages，你会发现conda下载的速度经常很慢，因为Anaconda.org的服务器在国外。所幸的是，清华TUNA镜像源有Anaconda仓库的镜像，我们将其加入conda的配置即可：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</div><div class="line"># TUNA的help中镜像地址加有引号，需要去掉</div><div class="line"> </div><div class="line"># 设置搜索时显示通道地址</div><div class="line">conda config --set show_channel_urls yes</div></pre></td></tr></table></figure></li></ol><h3 id="到目前为止-我的机器上有"><a href="#到目前为止-我的机器上有" class="headerlink" title="到目前为止, 我的机器上有"></a>到目前为止, 我的机器上有</h3><h4 id="Mac-自带的Python2-7"><a href="#Mac-自带的Python2-7" class="headerlink" title="Mac 自带的Python2.7"></a>Mac 自带的Python2.7</h4><h4 id="自己安装的Python3-6"><a href="#自己安装的Python3-6" class="headerlink" title="自己安装的Python3.6"></a>自己安装的Python3.6</h4><h4 id="virtualenv-virtualenvwrapper"><a href="#virtualenv-virtualenvwrapper" class="headerlink" title="virtualenv (virtualenvwrapper)"></a>virtualenv (virtualenvwrapper)</h4><h4 id="后来又装了Anaconda"><a href="#后来又装了Anaconda" class="headerlink" title="后来又装了Anaconda"></a>后来又装了Anaconda</h4><p>可以随意使用哪个都行, 也可以选择一款自己觉得方便的保留下来即可 (当然, 后两种是比较方便的)!</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li><p>使用Python虚拟环境的话, 要注意你拿到的Django代码需要进行配置, 因为这个项目不是你在本环境中通过<code>django-admin</code>生成的, 所以你项目中的<code>SECRET_KEY</code>并没有被django管理, 所以你需要在虚拟环境中配置相关信息:<br>(第一项可以不配置, 启动Django server的时候指明使用哪个配置文件即可就行)<br><img src="/img/django/secret_key.png" widtj="527" height="136"></p></li><li><p>使用虚拟环境之后, 如果希望安装Django, 可以针对本环境重新进行安装的, 只要你是在本虚拟环境中, 就可以切换到Django的解压包目录下, 执行 <code>python setup.py install</code> 就相当于给当前虚拟环境安装了Django了;</p></li><li><p>另外, 你如果使用的是<code>Anaconda</code>, 那么你在当前虚拟环境中如果安装扩展的时候使用的是<code>pip</code>, 那么你用<code>conda list</code>看到的包列表中会说明这个包使用pip安装的, 那么你卸载的时候也要使用 <code>pip uninstall ..</code>, 如果你是使用 <code>conda install -n python36 ...</code> 则就要使用 <code>conda remove -n python36 ..</code> 来卸载;<br><img src="/img/django/pip_haha.png" width="600" height="270/"></p><p> <strong>否则卸载的时候就会提示你没有此包</strong>;</p></li><li><p>感觉上还是 virtualenv + pip 比较干净整洁简单一点;</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Anaconda&quot;&gt;&lt;a href=&quot;#Anaconda&quot; class=&quot;headerlink&quot; title=&quot;Anaconda&quot;&gt;&lt;/a&gt;Anaconda&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Anaconda&lt;/code&gt; 是一个用于科学计算的Python发行版, 支持 
      
    
    </summary>
    
      <category term="Python" scheme="http://blog.renyimin.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://blog.renyimin.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>05 - Python 环境准备入门 - virtualevn</title>
    <link href="http://blog.renyimin.com/2017/10/03/2017-10-03-Python-05/"/>
    <id>http://blog.renyimin.com/2017/10/03/2017-10-03-Python-05/</id>
    <published>2017-10-03T02:35:07.000Z</published>
    <updated>2017-12-04T12:08:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ol><li><p>我的当前系统是 MacOS  Sierra  10.12.6,  默认是自带了python2.7的环境</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ python</div><div class="line">Python 2.7.10 (default, Feb  7 2017, 00:08:15) </div><div class="line">[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.34)] on darwin</div><div class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></li><li><p>目前, Python有两个版本, 一个是2.x版,  一个是3.x版, 这两个版本是不兼容的;<br>由于3.x版越来越普及, 所以这里将使用的是Python3.6进行学习;</p></li></ol><h3 id="Mac上安装Python3"><a href="#Mac上安装Python3" class="headerlink" title="Mac上安装Python3"></a>Mac上安装Python3</h3><p>两种方法都非常简单</p><ol><li><p>从Python官网下载Python 3.6的安装程序,  网速慢的同学请移步国内镜像(百度网盘)，双击运行并傻瓜式安装即可, 安装完成之后:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ which python3</div><div class="line">/usr/local/bin/python3</div></pre></td></tr></table></figure><p> 可能也会直接为:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ which python3</div><div class="line">/Library/Frameworks/Python.framework/Versions/3.6/bin/python3</div></pre></td></tr></table></figure><p> 接下来, 卸载我们使用上面这种方法安装的Python3:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">在安装 Python 时, 其自动生成:</div><div class="line">- Python framework, 即 Python 框架;</div><div class="line">- Python 应用目录;</div><div class="line">- 指向 Python 的连接;</div></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">对于 Mac 自带的 Python, 其框架目录为: /System/Library/Frameworks/Python.framework</div></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">而我们安装的 Python, 其（默认）框架目录为: /Library/Frameworks/Python.framework</div></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">接下来, 我们就分别(在 Mac 终端进行)删除上面所提到的三部分, 从而删除我们自己安装的Python</div><div class="line"></div><div class="line">- 删除框架: sudo rm -rf /Library/Frameworks/Python.framework/Versions/3.6</div><div class="line"></div><div class="line">- 删除应用目录: sudo rm -rf &quot;/Applications/Python 3.6&quot;</div><div class="line"></div><div class="line">- 删除/usr/local/bin目录下的Python连接(注意,此处不要乱删, 否则brew install python3这种安装方法都会失效): ls -l /usr/local/bin | grep ‘/Library/Frameworks/Python.framework/Versions/x.x’ | awk ‘&#123;print $9&#125;’ | tr -d @ | xargs rm</div></pre></td></tr></table></figure></li><li><p>如果安装了Homebrew, 也可以直接通过命令 <code>brew install python3</code> 安装即可, 安装完成之后:</p><p> 注意, 安装的python3.6是需要通过命令<code>python3</code>进入python交互界面的;</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ which python3</div><div class="line">/usr/local/bin/python3</div><div class="line"></div><div class="line">$ ls -al /usr/local/bin/python3</div><div class="line">lrwxr-xr-x  1 renyimin  admin  35 12  3 14:41 /usr/local/bin/python3 -&gt; ../Cellar/python3/3.6.3/bin/python3</div><div class="line"></div><div class="line">$ python3</div><div class="line">Python 3.6.3 (default, Oct  4 2017, 06:09:15) </div><div class="line">[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.37)] on darwin</div><div class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure><p> 卸载也很简单:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew uninstall python3</div></pre></td></tr></table></figure></li></ol><p>现在, 我的Mac中就有了两个Python环境, 一个是Mac自带的Python2.7, 另一个就是自己安装的Python3.6;</p><h3 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h3><ol><li>在Python中, 安装第三方模块, 是通过包管理工具pip完成的;</li></ol><ul><li>如果你正在使用Mac或Linux，安装pip本身这个步骤就可以跳过了。</li><li>如果你正在使用Windows，请参考安装Python一节的内容，确保安装时勾选了pip和Add python.exe to Path。</li></ul><ol><li>Mac为我们准备了Python2.7的同时, 还默认准备了pip, 另外, 自己安装Python3.6之后, 也同时安装了pip:</li></ol><ul><li><p>自己安装的Python3.6所带的pip需要运行<code>pip3</code> (注意: Mac或Linux上有可能并存Python 3.x和Python 2.x, 因此对应的pip命令是pip3)</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">renyimindembp:bin renyimin$ which pip3</div><div class="line">/usr/local/bin/pip3</div><div class="line">renyimindembp:bin renyimin$</div></pre></td></tr></table></figure></li><li><p>默认安装的pip, 运行需要是 <code>pip2</code></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">renyimindembp:bin renyimin$ which pip</div><div class="line">renyimindembp:bin renyimin$ which pip2</div><div class="line">/usr/local/bin/pip2</div></pre></td></tr></table></figure></li></ul><h3 id="virtualenv-virtualenvwrapper"><a href="#virtualenv-virtualenvwrapper" class="headerlink" title="virtualenv , virtualenvwrapper"></a>virtualenv , virtualenvwrapper</h3><h4 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h4><ol><li><p>在使用 Python 开发的过程中, 项目一多,难免会碰到不同的工程依赖不同版本的库的问题, 又或者在开发过程中不想让环境里充斥各种各样的库, 引发未来的依赖灾难;</p><p> 此时, 就们需要对不同的项目使用不同的环境来保持开发环境以及宿主环境的清洁;</p><p> 这里, 就要隆重介绍virtualenv, 一个可以帮助我们管理不同 Python 环境的绝好工具;</p></li><li><p>virtualenv : 可以在系统中建立多个不同并且相互不干扰的虚拟环境, 另外, 值得一提的是, 在 virtualenv 的虚拟环境中使用 pip 安装依赖还可以绕过某些系统的权限设置, 因为毕竟不需要向系统目录写入数据</p><p> 总之, virtualenv是用来创建一个独立的Python虚拟环境的工具, 通过virtualenv可以创建一个拥有独立的python版本和安装库的虚拟开发环境。(这样一来我们就可以在虚拟环境中安装各种各种所需要的库, 从而不会造成本地的库过多所引起的使用混乱, 同时也可以创建不同的python版本来完成不同的需求开发)</p></li><li><p>由于virtualenv用起来有点麻烦, virtualenvwrapper对它进行了封装, 让它更好用, 最终我们使用virtualenvwrapper提供的命令, 但是实际工作都是virtualenv做的</p></li><li><p>virtualenv安装 (推荐使用pip安装)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip3 install virtualenv</div></pre></td></tr></table></figure><p> <strong>其实直接安装virtualenvwrapper即可</strong>, 你会发现 <code>virtualenv</code> 和 <code>virtualenvwrapper</code> 都被安装了:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ pip3 install virtualenvwrapper</div><div class="line">....</div><div class="line"></div><div class="line">Successfully installed virtualenv-15.1.0 virtualenvwrapper-4.8.2</div></pre></td></tr></table></figure><p> 当然, 卸载的时候要一个个地都卸载哦!</p></li><li><p>创建一个独立的python新环境: <code>virtualenv myEnv_01</code>, 这样就会在当前目录下生成一个<code>myEnv_01</code>目录, 这样, 一个新的python虚拟环境就创建好了, 并且在这个目录下会有3个目录被创建:</p><ul><li>bin : 包含一些在这个虚拟环境中可用的命令, 以及开启虚拟环境的脚本 activate</li><li>include : 包含虚拟环境中的头文件, 包括 Python 的头文件;</li><li>lib : 依赖库</li></ul></li><li><p>激活虚拟环境: </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">先进入虚拟环境目录 myEnv_01 中</div><div class="line"></div><div class="line">然后执行: source ./bin/activate</div></pre></td></tr></table></figure><p> 使用source命令启动activate脚本之后, 你的命令行提示符应该会变成这样 </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(myEnv_01) renyimindembp:myEnv_01 renyimin$</div></pre></td></tr></table></figure><p> 此时, 我们就已经在虚拟环境中了, 并且此时即使退出当前虚拟环境的目录, 只要命令提示符是<code>(myEnv_01) renyimindembp:myEnv_01 renyimin$</code> 就表示我们还在myEnv_01这个虚拟环境中</p></li><li><p>然后重复上面步骤, 重新安装一个 <code>myEnv_02</code> 虚拟环境 并 激活;</p></li><li><p>在两个python虚拟环境中各自安装一个test依赖库:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># myEnv_01虚拟环境中默认是没有该扩展的</div><div class="line">(myEnv_01) renyimindembp:myEnv_01 renyimin$ pip3 list</div><div class="line">DEPRECATION: The default format will switch to columns in the future. You can use --format=(legacy|columns) (or define a format=(legacy|columns) in your pip.conf under the [list] section) to disable this warning.</div><div class="line">pip (9.0.1)</div><div class="line">setuptools (38.2.3)</div><div class="line">wheel (0.30.0)</div><div class="line">(myEnv_01) renyimindembp:myEnv_01 renyimin$ pip3 install test</div><div class="line"></div><div class="line"># 之后就有了</div><div class="line">(myEnv_01) renyimindembp:myEnv_01 renyimin$ pip3 list</div><div class="line">DEPRECATION: The default format will switch to columns in the future. You can use --format=(legacy|columns) (or define a format=(legacy|columns) in your pip.conf under the [list] section) to disable this warning.</div><div class="line">pip (9.0.1)</div><div class="line">setuptools (38.2.3)</div><div class="line">test (2.3.4.5)</div><div class="line">wheel (0.30.0)</div><div class="line">(myEnv_01) renyimindembp:myEnv_01 renyimin$</div></pre></td></tr></table></figure></li><li><p>此时myEnv_02 和 宿主Python环境中 并没有myEnv_01这个虚拟环境中安装的test扩展</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">renyimindembp:myEnv_02 renyimin$ source ./bin/activate</div><div class="line">(myEnv_02) renyimindembp:myEnv_02 renyimin$ pip3 list</div><div class="line">DEPRECATION: The default format will switch to columns in the future. You can use --format=(legacy|columns) (or define a format=(legacy|columns) in your pip.conf under the [list] section) to disable this warning.</div><div class="line">pip (9.0.1)</div><div class="line">setuptools (38.2.3)</div><div class="line">wheel (0.30.0)</div><div class="line">(myEnv_02) renyimindembp:myEnv_02 renyimin$</div></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">renyimindembp:~ renyimin$ pip3 list</div><div class="line">DEPRECATION: The default format will switch to columns in the future. You can use --format=(legacy|columns) (or define a format=(legacy|columns) in your pip.conf under the [list] section) to disable this warning.</div><div class="line">pbr (3.1.1)</div><div class="line">pip (9.0.1)</div><div class="line">setuptools (36.5.0)</div><div class="line">six (1.11.0)</div><div class="line">stevedore (1.27.1)</div><div class="line">virtualenv (15.1.0)</div><div class="line">virtualenv-clone (0.2.6)</div><div class="line">wheel (0.30.0)</div><div class="line">renyimindembp:~ renyimin$</div></pre></td></tr></table></figure></li><li><p>要退出虚拟环境到达宿主环境, 无论在哪个目录下, 只要在虚拟环境中(命令提示符和宿主环境的命令提示符有区别), 直接执行 <code>deactivate</code> 就会退出到宿主python环境中;</p></li><li><p>如果想要删除虚拟环境, 只要把虚拟环境目录删除即可;</p></li></ol><h4 id="virtualenvwrapper"><a href="#virtualenvwrapper" class="headerlink" title="virtualenvwrapper"></a>virtualenvwrapper</h4><ol><li><p>有了virtualenv, 为何还要 virtualenvwrapper ?</p><ul><li><p>virtualenv 的一个最大的缺点就是, 每次开启虚拟环境之前, 你都需要去虚拟环境所在目录下的 bin 目录下 source 一下 activate, 这就需要我们记住每个虚拟环境所在的目录;</p></li><li><p>当然, 你可以将所有的虚拟环境目录全都集中起来, 比如放到 ~/Desktop/virtualenvs/, 这个目录下专门存放所有的虚拟环境, 对不同的虚拟环境使用不同的目录来管理; 而 <code>virtualenvwrapper</code> 正是这样做的, 并且, 它还省去了每次开启虚拟环境时候的 source 操作, 使得虚拟环境更加好用</p></li></ul></li><li><p>安装 <code>virtualenvwrapper</code>:</p><p> 卸载之前安装的 <code>virtualen</code> (因为我们要安装 <code>virtualenvwrapper</code> 的话, 会自动安装 <code>virtualen</code>), 然后直接安装 <code>virtualenvwrapper</code></p><p> 先:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip3 uninstall virtualenv</div></pre></td></tr></table></figure><p> 然后:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">renyimindembp:~ renyimin$ pip3 install virtualenvwrapper</div><div class="line">Collecting virtualenvwrapper</div><div class="line">  Using cached virtualenvwrapper-4.8.2-py2.py3-none-any.whl</div><div class="line">Collecting virtualenv (from virtualenvwrapper)</div><div class="line">  Using cached virtualenv-15.1.0-py2.py3-none-any.whl</div><div class="line">Requirement already satisfied: stevedore in /usr/local/lib/python3.6/site-packages (from virtualenvwrapper)</div><div class="line">Requirement already satisfied: virtualenv-clone in /usr/local/lib/python3.6/site-packages (from virtualenvwrapper)</div><div class="line">Requirement already satisfied: pbr!=2.1.0,&gt;=2.0.0 in /usr/local/lib/python3.6/site-packages (from stevedore-&gt;virtualenvwrapper)</div><div class="line">Requirement already satisfied: six&gt;=1.9.0 in /usr/local/lib/python3.6/site-packages (from stevedore-&gt;virtualenvwrapper)</div><div class="line">Installing collected packages: virtualenv, virtualenvwrapper</div><div class="line">Successfully installed virtualenv-15.1.0 virtualenvwrapper-4.8.2</div><div class="line">renyimindembp:~ renyimin$</div></pre></td></tr></table></figure><p> 现在, 我们就拥有了一个可以管理虚拟环境的神器</p></li><li><p>接下来要做的比较重要, 那就是对 <code>virtualenvwrapper</code> 进行配置</p><ul><li><p>它需要指定一个环境变量, 叫做 WORKON_HOME, 并且需要运行一下它的初始化工具 virtualenvwrapper.sh, 这个脚本在 <code>/usr/local/bin/</code> 目录下;</p></li><li><p><code>WORKON_HOME</code> 就是它将要用来存放各种虚拟环境目录的目录, 这里我们可以设置为 <code>~/.virtualenvs</code>;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export WORKON_HOME=&apos;~/.virtualenvs&apos;</div><div class="line">source /usr/local/bin/virtualenvwrapper.sh</div></pre></td></tr></table></figure></li></ul></li><li><p>由于每次都需要执行这两步操作, 我们可以将其写入终端的配置文件中; 例如, 如果使用 bash, 则添加到 ~/.bashrc 中; 如果使用 zsh, 则添加到 ~/.zshrc 中; 这样每次启动终端的时候都会自动运行，终端其中之virtualenvwrapper 就可以用啦;</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">如果 ~/ 下没有 .bashrc的话, 写到.bash_profile文件中也可以</div></pre></td></tr></table></figure></li><li><p>利用 virtualenvwrapper, 我们可以使用命令 <code>mkvirtualenv myEnv_001</code> 轻松创建一个虚拟环境, 之后我们就有了一个叫做 myEnv_001 的虚拟环境, 它被存放在 $WORKON_HOME/myEnv_001 目录下, 也就是 <code>~/.virtualenvs/myEnv_001</code></p></li><li><p>新建虚拟环境之后会自动激活虚拟环境, 如果我们平时想要进入某个虚拟环境, 可以用命令 <code>workon myEnv_001</code>, 这样才能真正进入激活的虚拟环境中, 并且你的终端提示才会变成 <code>(myEnv_001) renyimindembp:.virtualenvs renyimin$</code> </p></li><li><p>同样, 离开虚拟环境, 可以使用 <code>deactivate</code></p></li><li><p>删除虚拟环境也一样简单 <code>rmvirtualenv myEnv_001</code> (不像之前只使用virtualenv那样, 需要手动删除目录来删除一个虚拟环境, 没那么low了)</p></li><li><p>virtualenvwrapper中的其他命令:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">lsvirtualenv，虚拟环境的列表</div><div class="line">cdvirtualenv，进入当前激活的虚拟环境</div><div class="line">cdsitepackages，进入虚拟环境中的site-packages目录</div><div class="line">lssitepackages，site-packages目录的列表</div></pre></td></tr></table></figure><p> 同时, 你还可以使用 <code>virtualenv</code> 来操作!!</p></li></ol><p><strong>另外, <a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432712108300322c61f256c74803b43bfd65c6f8d0d0000" target="_blank" rel="external">参考</a>了解到</strong>:</p><p>命令virtualenv就可以创建一个独立的Python运行环境，我们还加上了参数 <code>--no-site-packages</code>,这样，已经安装到系统Python环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的“干净”的Python运行环境, 好像这个参数是默认就有的, 因为测试后发现加和不加都是干净的:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">renyimindembp:Python renyimin$ ls myEnv_03/lib/python3.6/site-packages/</div><div class="line">__pycache__pip-9.0.1.dist-infosetuptools-38.2.3.dist-info</div><div class="line">easy_install.pypkg_resourceswheel</div><div class="line">pipsetuptoolswheel-0.30.0.dist-info</div><div class="line"></div><div class="line">renyimindembp:Python renyimin$ ls myEnv_04/lib/python3.6/site-packages/</div><div class="line">__pycache__pip-9.0.1.dist-infosetuptools-38.2.3.dist-info</div><div class="line">easy_install.pypkg_resourceswheel</div><div class="line">pipsetuptoolswheel-0.30.0.dist-info</div></pre></td></tr></table></figure></p><p><a href="https://segmentfault.com/a/1190000004079979" target="_blank" rel="external">参考</a></p><h4 id="创建虚拟环境的时候-python版本如何指定"><a href="#创建虚拟环境的时候-python版本如何指定" class="headerlink" title="创建虚拟环境的时候, python版本如何指定"></a>创建虚拟环境的时候, python版本如何指定</h4><ol><li>当我的机器上有Python2.7和Python3.6两个Python版本的时候, 那么virtualenv创建的虚拟环境使用哪个Python版本呢? 可以通过 <code>virtualenv -h</code> 查看帮助命令<ul><li>-p : 指定一个版本python环境, 通常当你的系统中安装了多个python版本时会用到, 默认情况下virtualenv会优先选取它的宿主python环境，也就是它安装在哪个python版本下就会默认选择哪个版本作为默认python隔离环境, 我们使用的是Python3.6带的pip3安装的virtualenv, 所以virtualenv默认安装的就是Python3.6虚拟环境;</li></ul></li></ol><h4 id="如何让某个项目使用指定的虚拟环境"><a href="#如何让某个项目使用指定的虚拟环境" class="headerlink" title="如何让某个项目使用指定的虚拟环境"></a>如何让某个项目使用指定的虚拟环境</h4><ol><li><p>可以在Pycharm中直接指定</p><ul><li>按照如下截图指定:<br><img src="/img/python/virtualenv_01.png" atl="virtualenv_01"></li><li>重启PyCharm之后, 会发现, 终端自动进入了之前指定的虚拟环境下:<br><img src="/img/python/virtualenv_02.png" width="600" height="300" atl="virtualenv_01"></li></ul></li><li><p>也可以进入你的虚拟环境之后, 通过命令来运行你某个目录下的项目文件</p></li></ol><p><strong>也就是到现在为止, 我们已经能使用pip来进行第三方库的安装, 并且可以使用 virtualenvwrapper 来方便地管理python虚拟环境了</strong></p><h4 id="额外"><a href="#额外" class="headerlink" title="额外"></a>额外</h4><p>不过到目前, 由于设备中共存的宿主Python版本是两个, 你使用Python3的时候, 还得是运行 <code>python3</code>, 使用python3的pip还得使用 <code>pip3</code>:</p><ul><li><p>python</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">renyimindeMacBook-Pro:.virtualenvs renyimin$ python</div><div class="line">Python 2.7.10 (default, Feb  7 2017, 00:08:15) </div><div class="line">[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.34)] on darwin</div><div class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></li><li><p>python3</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">renyimindeMacBook-Pro:.virtualenvs renyimin$ python3</div><div class="line">Python 3.6.3 (default, Oct  4 2017, 06:09:15) </div><div class="line">[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.37)] on darwin</div><div class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></li></ul><p>但是后面要讲的Anaconda安装完成之后, 宿主机的<code>python</code>命令直接就会被改为你所安装的anaconda所带的python版本;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;我的当前系统是 MacOS  Sierra  10.12.6,  默认是自带了python2.7的环境&lt;/p&gt;
 &lt;fig
      
    
    </summary>
    
      <category term="Python" scheme="http://blog.renyimin.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://blog.renyimin.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>04.与调度器之间通信--系统调用</title>
    <link href="http://blog.renyimin.com/2017/05/16/2017-05-16-Iterator-generator-yield-04/"/>
    <id>http://blog.renyimin.com/2017/05/16/2017-05-16-Iterator-generator-yield-04/</id>
    <published>2017-05-16T14:15:00.000Z</published>
    <updated>2017-11-15T03:02:20.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>调度器现在已经正常运行了, 下一个问题是：<strong>任务和调度器之间的通信</strong> ;</p></li><li><p>任务和调度器之间的通信:</p><ul><li><p>我们将使用与 <code>进程和操作系统之间会话</code> 所使用的方式来通信: <code>系统调用</code> ;</p></li><li><p>使用 <code>系统调用</code> 这种通信方式的理由是: 操作系统与进程相比, 两者是处在不同的权限级别上, 操作系统为了执行特权级别的操作(如杀死另一个进程), 就不得不以某种方式把控制传回给内核, 这样内核就可以执行所说的操作了;<br>(再说一遍, 这种行为在内部是通过使用中断指令来实现的, 过去使用的是通用的int指令, 如今使用的是更特殊并且更快速的syscall/sysenter指令)</p></li><li><p>而接下来我们的任务调度系统就要使用这种设计:<br>不是简单地把调度器传递给任务(这样就允许它做它想做的任何事), 我们将通过给yield表达式传递信息来与系统调用通信, 这儿yield既是中断,也是传递信息给调度器(和从调度器传递出信息)的方法;</p></li></ul></li><li><p>代码:</p><ul><li><p>任务类: 和之前没什么变化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> $taskId;</div><div class="line">    <span class="keyword">protected</span> $coroutine;</div><div class="line">    <span class="keyword">protected</span> $sendValue = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">protected</span> $beforeFirstYield = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($taskId, Generator $coroutine)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;taskId = $taskId;</div><div class="line">        <span class="keyword">$this</span>-&gt;coroutine = $coroutine;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTaskId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;taskId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setSendValue</span><span class="params">($sendValue)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;sendValue = $sendValue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;beforeFirstYield) &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;beforeFirstYield = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;coroutine-&gt;current();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;coroutine-&gt;send(<span class="keyword">$this</span>-&gt;sendValue);</div><div class="line">            <span class="keyword">$this</span>-&gt;sendValue = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isFinished</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> !<span class="keyword">$this</span>-&gt;coroutine-&gt;valid();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>系统调用:系统调用是操作系统提供给程序设计人员的一种服务,程序设计人员在编写程序时,可以利用系统调用来请求操作系统的服务</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SystemCall</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> $callback;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(callable $callback)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;callback = $callback;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">(Task $task, Scheduler $scheduler)</span> </span>&#123;</div><div class="line">        $callback = <span class="keyword">$this</span>-&gt;callback;</div><div class="line">        <span class="keyword">return</span> $callback($task, $scheduler);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>调度器: run方法相比之前做了一些修改</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scheduler</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> $taskId = <span class="number">0</span>;</div><div class="line">    <span class="comment">//protected $taskMap = []; // taskId =&gt; task</span></div><div class="line">    <span class="keyword">protected</span> $taskQueue;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;taskQueue = <span class="keyword">new</span> SplQueue();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">newTask</span><span class="params">(Generator $coroutine)</span> </span>&#123;</div><div class="line">        $taskId = ++<span class="keyword">$this</span>-&gt;taskId;</div><div class="line">        $task = <span class="keyword">new</span> Task($taskId, $coroutine);</div><div class="line">        <span class="comment">//$this-&gt;taskMap[$taskId] = $task;</span></div><div class="line"></div><div class="line">        <span class="keyword">$this</span>-&gt;schedule($task);</div><div class="line">        <span class="keyword">return</span> $taskId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">schedule</span><span class="params">(Task $task)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;taskQueue-&gt;enqueue($task);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (!<span class="keyword">$this</span>-&gt;taskQueue-&gt;isEmpty()) &#123;</div><div class="line">            $task = <span class="keyword">$this</span>-&gt;taskQueue-&gt;dequeue();</div><div class="line">            $retval = $task-&gt;run();</div><div class="line">            <span class="comment">//如果yield返回的是个系统调用(每个任务第一次的yield返回的就是个系统调用)</span></div><div class="line">            <span class="keyword">if</span> ($retval <span class="keyword">instanceof</span> SystemCall) &#123;</div><div class="line">                <span class="keyword">echo</span> <span class="number">123</span> . PHP_EOL;</div><div class="line">                $retval($task, <span class="keyword">$this</span>);</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> ($task-&gt;isFinished()) &#123;</div><div class="line">                <span class="comment">//unset($this-&gt;taskMap[$task-&gt;getTaskId()]);</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">$this</span>-&gt;schedule($task);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>测试:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">require_once</span> <span class="string">"task.php"</span>;</div><div class="line"><span class="keyword">require_once</span> <span class="string">"scheduler.php"</span>;</div><div class="line"><span class="keyword">require_once</span> <span class="string">"systemCall.php"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTaskId</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SystemCall(<span class="function"><span class="keyword">function</span><span class="params">(Task $task, Scheduler $scheduler)</span> </span>&#123;</div><div class="line">        $task-&gt;setSendValue($task-&gt;getTaskId());<span class="comment">//这里主要是在任务运行一开始进行的系统调用中设置任务的id, 并将任务继续压栈 (总共就干两件事), </span></div><div class="line">        $scheduler-&gt;schedule($task);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//系统功能调用是操作系统提供给程序设计人员的一种服务。程序设计人员在编写程序时，可以利用系统调用来请求操作系统的服务</span></div><div class="line"><span class="comment">//用户程序只在用户态下运行，有时需要访问`系统核心功能`，这时就需要通过系统调用接口来使用 `系统调用`</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">task</span><span class="params">($max)</span> </span>&#123;</div><div class="line">    $tid = (<span class="keyword">yield</span> getTaskId()); <span class="comment">// &lt;-- here's the syscall!</span></div><div class="line">    <span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt;= $max; ++$i) &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"This is task $tid iteration $i.\n"</span>;</div><div class="line">        <span class="keyword">yield</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$scheduler = <span class="keyword">new</span> Scheduler;</div><div class="line"><span class="comment">//添加两个任务到队列中</span></div><div class="line">$scheduler-&gt;newTask(task(<span class="number">10</span>));</div><div class="line">$scheduler-&gt;newTask(task(<span class="number">5</span>));</div><div class="line"><span class="comment">//运行调度器</span></div><div class="line">$scheduler-&gt;run();</div></pre></td></tr></table></figure></li></ul></li><li><p>结果和之前的简单任务调度一样;</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">renyimin$ php index1.php </div><div class="line"><span class="number">123</span>            <span class="comment">// 可以看到, 总共运行了两次系统调用(每个任务在一开始都是各自运行一次自己的系统调用)</span></div><div class="line"><span class="number">123</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">1.</span>  </div><div class="line">This is task <span class="number">2</span> iteration <span class="number">1.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">2.</span></div><div class="line">This is task <span class="number">2</span> iteration <span class="number">2.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">3.</span></div><div class="line">This is task <span class="number">2</span> iteration <span class="number">3.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">4.</span></div><div class="line">This is task <span class="number">2</span> iteration <span class="number">4.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">5.</span></div><div class="line">This is task <span class="number">2</span> iteration <span class="number">5.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">6.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">7.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">8.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">9.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">10.</span></div></pre></td></tr></table></figure></li></ol><blockquote><p>参考: <a href="http://www.laruence.com/2015/05/28/3038.html" target="_blank" rel="external">http://www.laruence.com/2015/05/28/3038.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;调度器现在已经正常运行了, 下一个问题是：&lt;strong&gt;任务和调度器之间的通信&lt;/strong&gt; ;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;任务和调度器之间的通信:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;我们将使用与 &lt;code&gt;进程和操作系统之间会话&lt;/code
      
    
    </summary>
    
      <category term="PHP高级" scheme="http://blog.renyimin.com/categories/PHP%E9%AB%98%E7%BA%A7/"/>
    
      <category term="Coroutine" scheme="http://blog.renyimin.com/categories/PHP%E9%AB%98%E7%BA%A7/Coroutine/"/>
    
    
      <category term="PHP高级" scheme="http://blog.renyimin.com/tags/PHP%E9%AB%98%E7%BA%A7/"/>
    
      <category term="Coroutine" scheme="http://blog.renyimin.com/tags/Coroutine/"/>
    
  </entry>
  
  <entry>
    <title>03.PHP - 如何使用协程来实施任务调度</title>
    <link href="http://blog.renyimin.com/2017/05/16/2017-05-16-Iterator-generator-yield-03/"/>
    <id>http://blog.renyimin.com/2017/05/16/2017-05-16-Iterator-generator-yield-03/</id>
    <published>2017-05-16T11:25:00.000Z</published>
    <updated>2017-11-29T19:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>从之前的知识可以了解到, 其实<code>(迭代器)生成器</code> 也只不过是一个函数, <strong>不同的是这个函数的返回值是依次返回, 而不是只返回一个单独的值</strong>; (也就是说, 生成器使你更方便的实现了迭代器) ;</p></li><li><p>生成器为<strong>可中断的函数</strong>, 在它里面的 yield 构成了中断点 ;</p><ul><li>再看一个简单的 <code>迭代生成器</code> 进行双向传输信息的 例子 :  <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">gen</span><span class="params">()</span> </span>&#123;</div><div class="line">    $ret = (<span class="keyword">yield</span> <span class="string">'yield1'</span>);</div><div class="line">    var_dump($ret);</div><div class="line">    $ret = (<span class="keyword">yield</span> <span class="string">'yield2'</span>);</div><div class="line">    var_dump($ret);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">$gen = gen();</div><div class="line">var_dump($gen-&gt;current());    <span class="comment">// string(6) "yield1"</span></div><div class="line">var_dump($gen-&gt;send(<span class="string">'ret1'</span>)); <span class="comment">// string(4) "ret1"   (the first var_dump in gen)</span></div><div class="line">                              <span class="comment">// string(6) "yield2" (the var_dump of the -&gt;send() return value)</span></div><div class="line">var_dump($gen-&gt;send(<span class="string">'ret2'</span>)); <span class="comment">// string(4) "ret2"   (again from within gen)</span></div><div class="line">                              <span class="comment">// NULL               (the return value of -&gt;send())</span></div></pre></td></tr></table></figure></li></ul></li><li><p><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432090171191d05dae6e129940518d1d6cf6eeaaa969000" target="_blank" rel="external">那么什么是协程(Coroutine)</a>？</p><ul><li><p><strong><code>协程</code>, 又称<code>微线程</code>, <code>纤程</code>, 英文名<code>Coroutine</code> </strong></p></li><li><p>和多线程相比, 协程的优势?<br>（1）最大的优势就是协程极高的执行效率, 因为子程序切换不是线程切换, 而是由程序自身控制, 因此, 没有线程切换的开销; 所以, 和多线程比, 当应用的线程数量越多, 换成协程的话, 性能优势就越明显;</p><p>（2）第二大优势就是不需要多线程的锁机制, 因为只有一个线程, 也不存在同时写变量冲突, 在协程中控制共享资源不加锁, 只需要判断状态就好了, 所以执行效率比多线程高很多;</p></li></ul><ul><li><p>协程是在应用程序的层面进行切换, 而不是线程级的切换, 所以切换带来的开销很小;</p></li><li><p><strong>多进程+协程</strong><br>因为协程是一个线程执行, 那怎么利用多核CPU呢?<br>最简单的方法是<strong>多进程+协程</strong>, 既充分利用多核, 又充分发挥协程的高效率, 可获得极高的性能。</p></li><li><p><code>协程（coroutine</code>）跟具有操作系统概念的线程不一样, 实际上协程就是类函数一样的程序组件, 你可以在一个线程里面轻松创建数十万个协程,就像数十万次函数调用一样。只不过函数只有一个调用入口起始点, 返回之后就结束了, 而协程入口既可以是起始点, 又可以从上一个返回点继续执行, 也就是说协程之间可以通过 yield 方式转移执行权, 对称（symmetric）、平级地调用对方, 而不是像函数那样上下级调用关系;<br>当然协程也可以模拟函数那样实现上下级调用关系, 这就叫非对称协程（asymmetric coroutines）;</p></li></ul></li><li><p>注意：</p><ul><li>yield表达式两边的括号在PHP7以前不是可选的, 也就是说在PHP5.5和PHP5.6中圆括号是必须的 ;</li><li>….</li></ul></li><li><p>协程特点:</p><ul><li>为应用层实现多任务提供了工具; </li><li>协程不允许多任务同时执行，要执行其它协程，必须使用关键字yield主动放弃cpu控制权; </li><li>协程需要自己写任务管理器，以及任务调度器； </li><li>减轻了OS处理零散任务和轻量级任务的负</li></ul></li><li><p>使用协程实现<strong>多任务协作</strong>，我们要解决的问题是你想并发地运行多任务(或者”程序”), 不过我们都知道CPU在一个时刻只能运行一个任务(不考虑多核的情况), 因此处理器需要在不同的任务之间进行切换,而且总是让每个任务运行 <code>一小会儿</code> ;</p><p><strong>多任务协作</strong> 这个术语中的”协作”很好的说明了如何进行这种切换的: 首先, 我们是通过调度器来调度每个任务运行的, 它而所谓协作就是要求当前正在运行的任务自动把控制传回给<code>调度器</code>, 这样就调度器就可以调度其他任务来运行了 ;</p></li><li><p>现在你应当明白 <code>协程</code> 和 <code>任务调度</code> 之间的关系:</p><ul><li>yield指令提供了任务中断自身的一种方法, 然后把控制交回给任务调度器, 因此协程可以运行多个任务; 更进一步, yield还可以用来在任务和调度器之间进行通信 ;</li><li>可以这么理解 :<br>调度器在调度任务的时候, 是通过模拟一个队列, 然后将使用调度器创建任务(其实就是将多个任务压栈), 之后由于每个任务执行一次就会执行<code>出栈</code>, <strong>并且就任务会通过yield中断当前任务并将控制权交给调度器</strong>, 调度器就可以通过这样就实现了轮询的方式执行多个任务 ; </li></ul></li><li><p>小疑问:</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">gen</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'foo'</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'bar'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$gen = gen();</div><div class="line">var_dump($gen-&gt;send(<span class="string">'something'</span>));</div></pre></td></tr></table></figure><p> // 鸟哥博客相关讨论小结:<br> // 在send之前, 如果没有显示地调用current, 那么当$gen迭代器被创建的时候一个rewind()方法已经被隐式调用<br> // 所以实际上发生的应该类似:</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">gen</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'foo'</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'bar'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$gen = gen();</div><div class="line">var_dump($gen-&gt;rewind());       <span class="comment">//不过可惜的是, rewind的执行将虽然会导致第一个yield被执行, 但是却会忽略他的返回值.</span></div><div class="line">var_dump($gen-&gt;send(<span class="string">'something'</span>));   <span class="comment">// 真正当我们调用yield的时候, 我们得到的是第二个yield的值! 导致第一个yield的值被忽略.</span></div></pre></td></tr></table></figure></li><li><p>先看一个简单的任务调度程序: 通过模拟cpu轮询来调度两个 循环打印的任务</p><ul><li><p>任务类: 主要作用是在其内部将<code>一个用轻量级的包装的协程函数</code>手动进行迭代</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> $taskId;</div><div class="line">    <span class="keyword">protected</span> $coroutine;</div><div class="line">    <span class="keyword">protected</span> $sendValue = <span class="keyword">null</span>;   <span class="comment">//在此处暂时还没有用</span></div><div class="line"> </div><div class="line">    <span class="comment">//通过添加 firstYieldTag 我们可以保证第一处 yield 的值能被正确返回, 因为之前我们已经了解到:</span></div><div class="line">    <span class="comment">//对生成器生成的迭代器进行手动迭代的话, 如果在send之前, 没有显示地调用current, 那么当迭代器被创建的时候一个rewind会默认执行, 但是不会有返回;</span></div><div class="line">    <span class="comment">//所以针对第一处yield, 要想看到返回值, 我们需要手动调用current</span></div><div class="line">    <span class="keyword">protected</span> $firstYieldTag = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($taskId, Generator $coroutine)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;taskId = $taskId;</div><div class="line">        <span class="keyword">$this</span>-&gt;coroutine = $coroutine;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTaskId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;taskId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 使用setSendValue()方法, 你可以指定哪些值将被发送到下次的恢复(现在暂时不会用到, 在之后会用到)</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setSendValue</span><span class="params">($sendValue)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;sendValue = $sendValue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//其实就是在这个run方法中做的手动迭代</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;firstYieldTag) &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;firstYieldTag = <span class="keyword">false</span>;  <span class="comment">// 第一次调用之后就进行标识</span></div><div class="line">            <span class="keyword">$this</span>-&gt;coroutine-&gt;current();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;coroutine-&gt;send(<span class="keyword">$this</span>-&gt;sendValue);</div><div class="line">            <span class="keyword">$this</span>-&gt;sendValue = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isFinished</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> !<span class="keyword">$this</span>-&gt;coroutine-&gt;valid();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>调度器类:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scheduler</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> $taskId = <span class="number">0</span>;</div><div class="line">    <span class="comment">//protected $taskMap = []; // taskId =&gt; task</span></div><div class="line">    <span class="keyword">protected</span> $taskQueue;</div><div class="line"></div><div class="line">    <span class="comment">//调度器初始化其实就是简单创建了一个队列</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;taskQueue = <span class="keyword">new</span> SplQueue();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">newTask</span><span class="params">(Generator $coroutine)</span> </span>&#123;</div><div class="line">        $taskId = ++<span class="keyword">$this</span>-&gt;taskId;<span class="comment">//简单通过递增的方法来设置 任务的唯一标识 任务id</span></div><div class="line">        $task = <span class="keyword">new</span> Task($taskId, $coroutine);<span class="comment">//通过 任务id 和 迭代器的生成器 来创建任务</span></div><div class="line">        <span class="comment">//将创建好的任务和任务id对应起来 存入数组</span></div><div class="line">        <span class="comment">//$this-&gt;taskMap[$taskId] = $task;</span></div><div class="line">        <span class="keyword">$this</span>-&gt;schedule($task);</div><div class="line">        <span class="keyword">return</span> $taskId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//添加任务到队列</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">schedule</span><span class="params">(Task $task)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;taskQueue-&gt;enqueue($task);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//运行调度器, 这里是模拟cpu并发 轮询执行任务的关键 (通过不断地将任务出栈和压栈)</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//如果任务队列不为空</span></div><div class="line">        <span class="keyword">while</span> (!<span class="keyword">$this</span>-&gt;taskQueue-&gt;isEmpty()) &#123;</div><div class="line">            <span class="comment">//将任务弹出队列 准备运行任务</span></div><div class="line">            $currentTask = <span class="keyword">$this</span>-&gt;taskQueue-&gt;dequeue();</div><div class="line">            <span class="comment">//然后运行任务 (其实每个任务就是 迭代器生成器 生成的 迭代器)</span></div><div class="line">            <span class="comment">//这里run其实就是对队列中的任务进行了 '一次' 迭代</span></div><div class="line">            $currentTask-&gt;run();</div><div class="line"></div><div class="line">            <span class="comment">// 如果弹出队列的任务(迭代器)如果运行结束(即 迭代器对象循环结束), 则从任务数组中删除任务</span></div><div class="line">            <span class="keyword">if</span> ($currentTask-&gt;isFinished()) &#123; </div><div class="line">                <span class="comment">//unset($this-&gt;taskMap[$task-&gt;getTaskId()]);</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//如果任务没有运行结束则继续将任务压入队列</span></div><div class="line">                <span class="keyword">$this</span>-&gt;schedule($currentTask);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>测试:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">require_once</span> <span class="string">"task.php"</span>;</div><div class="line"><span class="keyword">require_once</span> <span class="string">"scheduler.php"</span>;</div><div class="line"> </div><div class="line"><span class="comment">//第一个任务(一个`迭代器生成器`):</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">task1</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt;= <span class="number">10</span>; ++$i) &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"This is task 1 iteration $i.\n"</span>;</div><div class="line">        <span class="keyword">yield</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//第二个任务(一个`迭代器生成器`):</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">task2</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt;= <span class="number">5</span>; ++$i) &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"This is task 2 iteration $i.\n"</span>;</div><div class="line">        <span class="keyword">yield</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">$scheduler = <span class="keyword">new</span> Scheduler;</div><div class="line"><span class="comment">//创建两个任务到调度器的队列中</span></div><div class="line">$scheduler-&gt;newTask(task1());</div><div class="line">$scheduler-&gt;newTask(task2());</div><div class="line"><span class="comment">//运行调度器</span></div><div class="line">$scheduler-&gt;run();</div></pre></td></tr></table></figure></li><li><p>结果: 果然是两个任务交替执行各自的循环</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">renyimin$ php index.php</div><div class="line">This is task <span class="number">1</span> iteration <span class="number">1.</span></div><div class="line">This is task <span class="number">2</span> iteration <span class="number">1.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">2.</span></div><div class="line">This is task <span class="number">2</span> iteration <span class="number">2.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">3.</span></div><div class="line">This is task <span class="number">2</span> iteration <span class="number">3.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">4.</span></div><div class="line">This is task <span class="number">2</span> iteration <span class="number">4.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">5.</span></div><div class="line">This is task <span class="number">2</span> iteration <span class="number">5.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">6.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">7.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">8.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">9.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">10.</span></div></pre></td></tr></table></figure></li></ul></li></ol><blockquote><p>参考: <a href="http://www.laruence.com/2015/05/28/3038.html" target="_blank" rel="external">http://www.laruence.com/2015/05/28/3038.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;从之前的知识可以了解到, 其实&lt;code&gt;(迭代器)生成器&lt;/code&gt; 也只不过是一个函数, &lt;strong&gt;不同的是这个函数的返回值是依次返回, 而不是只返回一个单独的值&lt;/strong&gt;; (也就是说, 生成器使你更方便的实现了迭代器) ;&lt;/p&gt;

      
    
    </summary>
    
      <category term="PHP高级" scheme="http://blog.renyimin.com/categories/PHP%E9%AB%98%E7%BA%A7/"/>
    
      <category term="Coroutine" scheme="http://blog.renyimin.com/categories/PHP%E9%AB%98%E7%BA%A7/Coroutine/"/>
    
    
      <category term="PHP高级" scheme="http://blog.renyimin.com/tags/PHP%E9%AB%98%E7%BA%A7/"/>
    
      <category term="Coroutine" scheme="http://blog.renyimin.com/tags/Coroutine/"/>
    
  </entry>
  
  <entry>
    <title>02.PHP - Generator (迭代)生成器</title>
    <link href="http://blog.renyimin.com/2017/05/13/2017-05-13-Iterator-generator-yield-02/"/>
    <id>http://blog.renyimin.com/2017/05/13/2017-05-13-Iterator-generator-yield-02/</id>
    <published>2017-05-13T04:15:00.000Z</published>
    <updated>2017-11-29T18:56:50.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>Generator (迭代)生成器<br> 之所以叫 <code>迭代生成器</code>, 是因为这个生成器(就是一个包含yield关键字的函数)生成的东西是个<code>迭代器对象</code>;( <a href="http://php.net/manual/zh/class.generator.php" target="_blank" rel="external">参考PHP: 生成器类的结构</a>, 会发现生成器这个类也确实实现了<code>迭代器</code>接口);</p></li><li><p><code>生成器函数</code> 的核心是 <code>yield</code> 关键字</p><ul><li>它最简单的调用形式看起来像 return 的用法, 但普通 return 会返回值并<strong>终止</strong>函数的执行;</li><li>而 yield 会返回一个值给<code>循环调用此生成器的代码</code>, 并且只是<strong>暂停</strong> <code>生成器函数</code>的运行;</li><li>暂停当前过程，意味着将处理权转交由上一级继续进行，直至上一级再次调用<strong>被暂停的</strong> <code>生成器函数</code>，则<code>生成器函数</code>会从上一次暂停的位置继续执行;</li></ul></li><li><p>当然, <code>yield</code> 更重要的特性是除了可以返回一个值以外, 还能够接收一个值</p><ul><li><a href="http://php.net/manual/zh/class.generator.php" target="_blank" rel="external">参考PHP: 生成器类的结构</a>, 可以看到 Generator 类除了实现 Iterator 接口中的必要方法以外, 还有一个 <code>send</code> 方法, 这个方法就是向 yield 语句处传递一个值, 同时从 yield 语句处继续执行, 直至再次遇到 yield 后控制权回到外部 ;</li><li>当然, 此时是<strong>先返回yield处的值, 然后再将接收到的外部值作用于另一个表达式(可能直接打印或者赋值给另一个变量)</strong>;</li><li><p>测试代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">printer</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    $i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="number">123</span> . <span class="string">"\n"</span>;</div><div class="line">        <span class="comment">//同时进行接收和发送 （先返回 yield 后面的值, 然后才将 接收到的值 作用于 printf函数）</span></div><div class="line">        printf(<span class="string">"receive: %s\n"</span>, (<span class="keyword">yield</span> ++$i));</div><div class="line">        <span class="keyword">echo</span> <span class="number">456</span> . <span class="string">"\n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$printer = printer();</div><div class="line">printf(<span class="string">"%d\n"</span>, $printer-&gt;current());    <span class="comment">//123</span></div><div class="line">                                        <span class="comment">//1  碰到yield则中断, 将$i发出, 并将控制权交给外部的调度器</span></div><div class="line"></div><div class="line">var_dump($printer-&gt;send(<span class="string">'hello'</span>));  <span class="comment">//receive: hello    调度器再次调度,继续开始</span></div><div class="line">                                    <span class="comment">//456</span></div><div class="line">                                    <span class="comment">//123</span></div><div class="line">                                    <span class="comment">//int(2) 碰到yield则中断, 将$i发出, 并将控制权交给外部的调度器</span></div><div class="line">printf(<span class="string">"%d\n"</span>, $printer-&gt;current());    <span class="comment">//yield发出的当前值果然是2</span></div><div class="line"></div><div class="line">var_dump($printer-&gt;send(<span class="string">'world'</span>));  <span class="comment">//receive: world    调度器再次调度,继续开始</span></div><div class="line">                                    <span class="comment">//456</span></div><div class="line">                                    <span class="comment">//123</span></div><div class="line">                                    <span class="comment">//int(3)碰到yield则中断, 将$i发出, 并将控制权交给外部的调度器</span></div><div class="line"></div><div class="line">printf(<span class="string">"%d\n"</span>, $printer-&gt;current());<span class="comment">//yield发出的当前值果然是3</span></div></pre></td></tr></table></figure></li><li><p>这儿yield没有作为一个语句来使用, 而是用作一个表达式, <strong>这样, 这个yield表达式 能被演化成一个值, 这个值就是调用者传递给send()方法的值</strong>;</p></li></ul></li><li><p><strong>到这里, 我们看到 <code>yield</code> 可以在其位置同时进行 <code>接收</code> 和 <code>返回</code> (双向传递), 当然, 这是实现 <code>协程</code> 的根本</strong>;</p></li><li><p>补充 ：</p><ul><li>另外, 我们可以使用生成器来重新实现 range() 函数, 标准的 range() 函数需要在内存中生成一个数组包含每一个在它范围内的值，然后返回该数组, 结果就是会产生多个很大的数组。 比如, 调用 range(0, 1000000) 将导致内存占用超过 100 MB ;</li><li>做为一种替代方法, 我们可以实现一个 xrange() 生成器, 只需要足够的内存来创建 Iterator 对象并在内部跟踪生成器的当前状态，这样只需要不到1K字节的内存;</li><li>例子:  即使你打印100W个键值对, 也不一次性将这些简直对放入变量中导致内存爆掉  <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">xrange</span><span class="params">($start, $limit, $step = <span class="number">1</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> ($i = $start; $i &lt;= $limit; $i += $step) &#123;</div><div class="line">        <span class="keyword">yield</span> $i + <span class="number">1</span> =&gt; $i;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">foreach</span> (xrange(<span class="number">0</span>, <span class="number">10000000000</span>, <span class="number">2</span>) <span class="keyword">as</span> $key =&gt; $value) &#123;</div><div class="line">    printf(<span class="string">"%d =&gt; %d"</span> . PHP_EOL, $key, $value);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul></li></ol><blockquote><p>参考: <a href="https://www.insp.top/article/php-knowledge-completion-generator-and-the-realization-of-coroutine" target="_blank" rel="external">https://www.insp.top/article/php-knowledge-completion-generator-and-the-realization-of-coroutine</a>    </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;Generator (迭代)生成器&lt;br&gt; 之所以叫 &lt;code&gt;迭代生成器&lt;/code&gt;, 是因为这个生成器(就是一个包含yield关键字的函数)生成的东西是个&lt;code&gt;迭代器对象&lt;/code&gt;;( &lt;a href=&quot;http://php.net/ma
      
    
    </summary>
    
      <category term="PHP高级" scheme="http://blog.renyimin.com/categories/PHP%E9%AB%98%E7%BA%A7/"/>
    
      <category term="Coroutine" scheme="http://blog.renyimin.com/categories/PHP%E9%AB%98%E7%BA%A7/Coroutine/"/>
    
    
      <category term="PHP高级" scheme="http://blog.renyimin.com/tags/PHP%E9%AB%98%E7%BA%A7/"/>
    
      <category term="Coroutine" scheme="http://blog.renyimin.com/tags/Coroutine/"/>
    
  </entry>
  
  <entry>
    <title>01.PHP - Iterator (迭代器) 接口简介</title>
    <link href="http://blog.renyimin.com/2017/05/13/2017-05-13-Iterator-generator-yield-01/"/>
    <id>http://blog.renyimin.com/2017/05/13/2017-05-13-Iterator-generator-yield-01/</id>
    <published>2017-05-13T03:05:00.000Z</published>
    <updated>2017-11-15T02:38:25.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>迭代: 可以理解为是指反复执行一个过程, 每执行一次叫做一次迭代;</p><ul><li><p>在php中我们经常做迭代, 如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$mapping  =  [</div><div class="line"><span class="string">'red'</span> =&gt; <span class="string">'#FF0000'</span>,</div><div class="line"><span class="string">'green'</span> =&gt; <span class="string">'#00FF00'</span>,</div><div class="line"><span class="string">'blue'</span> =&gt; <span class="string">'##0000FF'</span></div><div class="line">];</div><div class="line"></div><div class="line"><span class="keyword">foreach</span>  ($mapping  <span class="keyword">as</span>  $key  =&gt;  $value)  &#123;</div><div class="line">printf(<span class="string">"key:  %d  -  value:  %s  \n"</span>,  $key,  $value);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>上述代码通过foreach对数组遍历并迭代输出其内容, 在foreach内部, 每次迭代都会将当前的元素的值赋给$value并将数组的指针移动指向下一个元素为下一次迭代做准备,从而实现顺序遍历;<br>像这样能够让外部的迭代自己内部数据的接口就是<code>迭代器接口</code>;<br>对应的那个被迭代的对象(这里是数组), 其实就是<code>迭代器对象</code>;</p></li></ul></li><li>PHP中提供的迭代器接口和类<ul><li>PHP提供了统一的迭代器接口<a href="http://php.net/manual/en/class.appenditerator.php" target="_blank" rel="external">预定义接口中</a>;</li><li>SPL标准库中也提供了多种<a href="http://php.net/manual/zh/book.spl.php" target="_blank" rel="external">迭代器类</a>;</li></ul></li><li><p>简单实现一个迭代器</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Xrange</span> <span class="keyword">implements</span> <span class="title">Iterator</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">protected</span> $start;</div><div class="line">    <span class="keyword">protected</span> $limit;</div><div class="line">    <span class="keyword">protected</span> $step;</div><div class="line">    <span class="keyword">protected</span> $i;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($start, $limit, $step = <span class="number">0</span>)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;start = $start;</div><div class="line">        <span class="keyword">$this</span>-&gt;limit = $limit;</div><div class="line">        <span class="keyword">$this</span>-&gt;step  = $step;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rewind</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;i = <span class="keyword">$this</span>-&gt;start;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">next</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;i += <span class="keyword">$this</span>-&gt;step;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">current</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">key</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">valid</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;i &lt;= <span class="keyword">$this</span>-&gt;limit;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">foreach</span> (<span class="keyword">new</span> Xrange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>) <span class="keyword">as</span> $key =&gt; $value) &#123;</div><div class="line">    printf(<span class="string">"%d %d"</span> . PHP_EOL, $key, $value);</div><div class="line">&#125;</div></pre></td></tr></table></figure> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ php Iterator.php </div><div class="line"><span class="number">0</span> <span class="number">0</span></div><div class="line"><span class="number">2</span> <span class="number">2</span></div><div class="line"><span class="number">4</span> <span class="number">4</span></div><div class="line"><span class="number">6</span> <span class="number">6</span></div><div class="line"><span class="number">8</span> <span class="number">8</span></div><div class="line"><span class="number">10</span> <span class="number">10</span></div></pre></td></tr></table></figure></li><li><p>补充:</p></li></ol><ul><li><p>可以将一个普通对象变成一个可被遍历的对象, 场景: 如一个StudentsContact对象, 这个对象是用于处理学生联系方式的, 通过 addStudent 方法注册学生, 通过 getAllStudent 获取全部注册的学生联系方式数组(比如获取一页学生联系方式列表), 我们以往是通过 StudentsContact::getAllStudent() 获取一个数组然后遍历该数组, 但是现在有了迭代器, 只要这个类继承这个接口, 就可以直接遍历该对象获取学生数组, 并且可以在获取之前在类的内部就对输出的数据做好处理工作;</p></li><li><p>PHP的迭代器可以让你利用 面向对象 实现常见的数据结构, 例如列表, 堆栈, 队列与图<strong><em> ; (有助于你使用纯面向对象的思想来设计你的程序)<br>特别说明一下 </em></strong>对对象的遍历<strong><em>,   一般人觉得所谓的</em></strong>遍历对象<em>*</em>就是对一个对象里的属性或者方法一个一个的取出来, 然后做输出或者处理; 实际上, 这里的迭代器对对象的遍历并不是这个意思, 可能这句话本身的描述有问题, 比如, 可以使用迭代器模拟一个<code>字符串对象的迭代器</code>类, 让PHP可以对这个字符串对象进行遍历;</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span> <span class="keyword">implements</span> <span class="title">Iterator</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">private</span> $string;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($string)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;string = <span class="keyword">$this</span>-&gt;strToArray($string);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">strToArray</span><span class="params">($string, $l = <span class="number">0</span>)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="comment">//if ($l &gt; 0) &#123;</span></div><div class="line">            <span class="comment">//$ret = array();</span></div><div class="line">            <span class="comment">//$len = mb_strlen($string, "UTF-8");</span></div><div class="line">            <span class="comment">//for ($i = 0; $i &lt; $len; $i += $l) &#123;</span></div><div class="line">                <span class="comment">//$ret[] = mb_substr($string, $i, $l, "UTF-8");</span></div><div class="line">            <span class="comment">//&#125;</span></div><div class="line">            <span class="comment">//return $ret;</span></div><div class="line">        <span class="comment">//&#125;</span></div><div class="line">        <span class="keyword">return</span> preg_split(<span class="string">"//u"</span>, $string, <span class="number">-1</span>, PREG_SPLIT_NO_EMPTY);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">current</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> current(<span class="keyword">$this</span>-&gt;string);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">next</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> next(<span class="keyword">$this</span>-&gt;string);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">key</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> key(<span class="keyword">$this</span>-&gt;string);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">valid</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span> (key(<span class="keyword">$this</span>-&gt;string) === <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rewind</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        reset(<span class="keyword">$this</span>-&gt;string);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$string = <span class="keyword">new</span> String(<span class="string">'这个是什么213jdjlf'</span>);</div><div class="line"><span class="keyword">foreach</span> ($string <span class="keyword">as</span> $k =&gt; $v) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"&#123;$k&#125; =&gt; &#123;$v&#125;"</span> . <span class="string">"&lt;br/&gt;"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">结果:</div><div class="line"><span class="number">0</span> =&gt; 这</div><div class="line"><span class="number">1</span> =&gt; 个</div><div class="line"><span class="number">2</span> =&gt; 是</div><div class="line"><span class="number">3</span> =&gt; 什</div><div class="line"><span class="number">4</span> =&gt; 么</div><div class="line"><span class="number">5</span> =&gt; <span class="number">2</span></div><div class="line"><span class="number">6</span> =&gt; <span class="number">1</span></div><div class="line"><span class="number">7</span> =&gt; <span class="number">3</span></div><div class="line"><span class="number">8</span> =&gt; j</div><div class="line"><span class="number">9</span> =&gt; d</div><div class="line"><span class="number">10</span> =&gt; j</div><div class="line"><span class="number">11</span> =&gt; l</div><div class="line"><span class="number">12</span> =&gt; f</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;迭代: 可以理解为是指反复执行一个过程, 每执行一次叫做一次迭代;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在php中我们经常做迭代, 如下:&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
      <category term="PHP高级" scheme="http://blog.renyimin.com/categories/PHP%E9%AB%98%E7%BA%A7/"/>
    
      <category term="Coroutine" scheme="http://blog.renyimin.com/categories/PHP%E9%AB%98%E7%BA%A7/Coroutine/"/>
    
    
      <category term="PHP高级" scheme="http://blog.renyimin.com/tags/PHP%E9%AB%98%E7%BA%A7/"/>
    
      <category term="Coroutine" scheme="http://blog.renyimin.com/tags/Coroutine/"/>
    
  </entry>
  
  <entry>
    <title>02 - 分布式锁</title>
    <link href="http://blog.renyimin.com/2017/04/13/2017-04-13-distributed-02/"/>
    <id>http://blog.renyimin.com/2017/04/13/2017-04-13-distributed-02/</id>
    <published>2017-04-13T12:03:09.000Z</published>
    <updated>2017-12-07T13:07:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;分布式锁&quot;&gt;&lt;a href=&quot;#分布式锁&quot; class=&quot;headerlink&quot; title=&quot;分布式锁&quot;&gt;&lt;/a&gt;分布式锁&lt;/h3&gt;
      
    
    </summary>
    
      <category term="分布式" scheme="http://blog.renyimin.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="http://blog.renyimin.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>05 - 分布式</title>
    <link href="http://blog.renyimin.com/2017/04/13/2017-04-17-distributed-05/"/>
    <id>http://blog.renyimin.com/2017/04/13/2017-04-17-distributed-05/</id>
    <published>2017-04-13T12:03:09.000Z</published>
    <updated>2017-12-07T13:07:56.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="分布式" scheme="http://blog.renyimin.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="http://blog.renyimin.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>01 - 分布式</title>
    <link href="http://blog.renyimin.com/2017/04/13/2017-04-13-distributed-01/"/>
    <id>http://blog.renyimin.com/2017/04/13/2017-04-13-distributed-01/</id>
    <published>2017-04-13T05:20:31.000Z</published>
    <updated>2017-12-07T13:07:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据一致性问题"><a href="#数据一致性问题" class="headerlink" title="数据一致性问题"></a>数据一致性问题</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数据一致性问题&quot;&gt;&lt;a href=&quot;#数据一致性问题&quot; class=&quot;headerlink&quot; title=&quot;数据一致性问题&quot;&gt;&lt;/a&gt;数据一致性问题&lt;/h3&gt;
      
    
    </summary>
    
      <category term="分布式" scheme="http://blog.renyimin.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="http://blog.renyimin.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>02 - 并发写问题</title>
    <link href="http://blog.renyimin.com/2017/04/11/2017-04-09-concurrency-02/"/>
    <id>http://blog.renyimin.com/2017/04/11/2017-04-09-concurrency-02/</id>
    <published>2017-04-11T14:19:27.000Z</published>
    <updated>2017-12-08T05:59:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初级并发写的问题"><a href="#初级并发写的问题" class="headerlink" title="初级并发写的问题"></a>初级并发写的问题</h3><h4 id="如何保证并发写的数据安全问题"><a href="#如何保证并发写的数据安全问题" class="headerlink" title="如何保证并发写的数据安全问题"></a>如何保证并发写的数据安全问题</h4><h4 id="锁的名词"><a href="#锁的名词" class="headerlink" title="锁的名词"></a>锁的名词</h4><p>常见的关于锁的名词有很多个, 大致如下:</p><ol><li><p>读锁(共享锁, 乐观锁)</p></li><li><p>写锁(排他锁, 悲观锁)</p></li><li>意向共享锁</li><li>意向排他锁</li><li>间隙锁</li></ol><h4 id="MySQL锁的使用"><a href="#MySQL锁的使用" class="headerlink" title="MySQL锁的使用"></a>MySQL锁的使用</h4><ol><li></li><li></li></ol><h4 id="Redis锁的利用"><a href="#Redis锁的利用" class="headerlink" title="Redis锁的利用"></a>Redis锁的利用</h4><ol><li>Redis的事务涉及到的WATCH</li><li>Redis原子锁</li></ol><h4 id="memcached锁"><a href="#memcached锁" class="headerlink" title="memcached锁"></a>memcached锁</h4><p><a href="https://github.com/Yurunsoft/YurunLock" target="_blank" rel="external">https://github.com/Yurunsoft/YurunLock</a></p><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><ol><li>如: 并发减少库存如何保证不超卖<br><a href="">利用Redis锁</a></li><li>如: </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;初级并发写的问题&quot;&gt;&lt;a href=&quot;#初级并发写的问题&quot; class=&quot;headerlink&quot; title=&quot;初级并发写的问题&quot;&gt;&lt;/a&gt;初级并发写的问题&lt;/h3&gt;&lt;h4 id=&quot;如何保证并发写的数据安全问题&quot;&gt;&lt;a href=&quot;#如何保证并发写的数据安全问题&quot;
      
    
    </summary>
    
      <category term="高并发" scheme="http://blog.renyimin.com/categories/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="高并发" scheme="http://blog.renyimin.com/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>01 - 并发读问题</title>
    <link href="http://blog.renyimin.com/2017/04/09/2017-04-09-concurrency-01/"/>
    <id>http://blog.renyimin.com/2017/04/09/2017-04-09-concurrency-01/</id>
    <published>2017-04-09T11:16:54.000Z</published>
    <updated>2017-12-07T12:58:03.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初级并发读的问题"><a href="#初级并发读的问题" class="headerlink" title="初级并发读的问题"></a>初级并发读的问题</h3><h4 id="如何尽可能承载更高的并发访问量"><a href="#如何尽可能承载更高的并发访问量" class="headerlink" title="如何尽可能承载更高的并发访问量"></a>如何尽可能承载更高的并发访问量</h4><ol><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;初级并发读的问题&quot;&gt;&lt;a href=&quot;#初级并发读的问题&quot; class=&quot;headerlink&quot; title=&quot;初级并发读的问题&quot;&gt;&lt;/a&gt;初级并发读的问题&lt;/h3&gt;&lt;h4 id=&quot;如何尽可能承载更高的并发访问量&quot;&gt;&lt;a href=&quot;#如何尽可能承载更高的并发访问
      
    
    </summary>
    
      <category term="高并发" scheme="http://blog.renyimin.com/categories/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="高并发" scheme="http://blog.renyimin.com/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>07.小结 &quot;Jsonp&quot; 对比 &quot;CORS简单/非简单请求&quot;</title>
    <link href="http://blog.renyimin.com/2016/09/21/2016-09-21-sameoriginpolicy-07/"/>
    <id>http://blog.renyimin.com/2016/09/21/2016-09-21-sameoriginpolicy-07/</id>
    <published>2016-09-21T13:20:16.000Z</published>
    <updated>2017-10-28T02:30:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Jsonp-对比-CORS简单-非简单请求"><a href="#Jsonp-对比-CORS简单-非简单请求" class="headerlink" title="Jsonp 对比 CORS简单/非简单请求"></a>Jsonp 对比 CORS简单/非简单请求</h3><p>都可以方便实现跨域;</p><h4 id="Jsonp"><a href="#Jsonp" class="headerlink" title="Jsonp"></a>Jsonp</h4><p>简单适用, 老式浏览器全部支持, 服务器端改动很小;</p><p>但是JSONP只能发GET请求;</p><p>JSONP跨域发送Cookie的话, 只用设置好<code>cookie的domain属性</code>为顶级域名即可 ;</p><h3 id="CORS简单请求"><a href="#CORS简单请求" class="headerlink" title="CORS简单请求"></a>CORS简单请求</h3><p>服务端需要设置一些允许选项;</p><p>发送请求为 GET, POST, HEAD ;</p><p>跨域发送cookie的话, 不仅需要设置<code>cookie的domain属性</code>, 服务端和客户端都要对<code>Credentials</code> header属性进行设置;<br>跨域发送cookie的话, 服务端 <code>Access-Control-Allow-Origin</code> 不能设置为 * , 否则会提示 :<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Failed to load http:<span class="comment">//test.test.com/index.php?sex=renyimin&amp;age=100: </span></div><div class="line">The value of the <span class="string">'Access-Control-Allow-Origin'</span> header in the response must not be the wildcard <span class="string">'*'</span> when the request<span class="string">'s credentials mode is '</span><span class="keyword">include</span><span class="string">'. </span></div><div class="line"><span class="string">Origin '</span>http:<span class="comment">//www.test.com' is therefore not allowed access. The credentials mode of requests initiated by the XMLHttpRequest is controlled by the withCredentials attribute.</span></div></pre></td></tr></table></figure></p><h3 id="CORS非简单请求"><a href="#CORS非简单请求" class="headerlink" title="CORS非简单请求"></a>CORS非简单请求</h3><p>服务端需要设置一些允许选项;</p><p>发送其他请求 (PUT) ..</p><p>可以设置自定义header头</p><p>cookie方面和 CORS简单请求一样</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Jsonp-对比-CORS简单-非简单请求&quot;&gt;&lt;a href=&quot;#Jsonp-对比-CORS简单-非简单请求&quot; class=&quot;headerlink&quot; title=&quot;Jsonp 对比 CORS简单/非简单请求&quot;&gt;&lt;/a&gt;Jsonp 对比 CORS简单/非简单请求&lt;/
      
    
    </summary>
    
      <category term="CrossDomain" scheme="http://blog.renyimin.com/categories/CrossDomain/"/>
    
    
      <category term="CrossDomain" scheme="http://blog.renyimin.com/tags/CrossDomain/"/>
    
  </entry>
  
  <entry>
    <title>06.Ajax请求不能发送 之 &quot;CORS方案 -- (not-so-simple request)&quot;</title>
    <link href="http://blog.renyimin.com/2016/09/18/2016-09-18-sameoriginpolicy-06/"/>
    <id>http://blog.renyimin.com/2016/09/18/2016-09-18-sameoriginpolicy-06/</id>
    <published>2016-09-18T12:10:16.000Z</published>
    <updated>2017-10-27T10:15:27.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="预检请求-preflight-说明"><a href="#预检请求-preflight-说明" class="headerlink" title="预检请求 preflight 说明"></a>预检请求 <code>preflight</code> 说明</h4><p>1.非简单请求是那种对服务器有特殊要求的请求, 比如请求方法是 <code>PUT</code> 或 <code>DELETE</code>, 或者 <code>Content-Type</code> 字段的类型是 <code>application/json</code> ;</p><p>2.非简单请求的CORS请求, 会在正式通信之前, 增加一次HTTP查询请求, 称为 <code>&quot;预检&quot;请求(preflight)</code> ;</p><ul><li>浏览器先询问服务器, 当前网页所在的域名是否在服务器的许可名单之中, 以及可以使用哪些HTTP动词和头信息字段;</li><li>只有得到肯定答复, 浏览器才会发出正式的XMLHttpRequest请求, 否则就报错 ;</li></ul><p>3.非简单请求会导致原先的一次请求变成两次, 第一次请求是 <code>预检请求</code> ;</p><p>4.”预检”请求用的请求方法是 <code>OPTIONS</code>，表示这个请求是用来<code>询问</code>的，头信息里面关键字段是Origin，表示请求来自哪个源 ;</p><h4 id="非简单请求的例子"><a href="#非简单请求的例子" class="headerlink" title="非简单请求的例子"></a>非简单请求的例子</h4><p>1.www.test.com/index.php</p><ul><li>本例子使用 <code>PUT</code> 来进行ajax请求, 满足 <code>非简单请求</code> 的条件 ;</li><li><p>另外, 本例还<code>自定义了请求时的 header 首部字段</code>, 也满足 <code>非简单请求</code> 的条件 ;</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="meta">?&gt;</span></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">    &lt;title&gt;Title&lt;/title&gt;</div><div class="line">    &lt;script src=<span class="string">"https://cdn.staticfile.org/jquery/3.1.1/jquery.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;script type=<span class="string">"text/javascript"</span> &gt;</div><div class="line">        $(document).ready(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">            $(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">//序列化name/value</span></div><div class="line">                <span class="keyword">var</span> data = $(<span class="string">"form"</span>).serializeArray();</div><div class="line">                $.ajax(&#123;</div><div class="line">                    <span class="comment">//这里用PUT, 则为 `非简单` 请求</span></div><div class="line">                    type: <span class="string">'PUT'</span>,</div><div class="line">                    url: <span class="string">'http://test.test.com/index.php'</span>,</div><div class="line">                    dataType: <span class="string">'json'</span>,</div><div class="line">                    data: data,</div><div class="line">                    <span class="comment">//或者如果你自定义了一些请求时的 header 首部字段, 那么请求就也是 复杂请求</span></div><div class="line">                    headers: &#123;<span class="string">"custom-header-field"</span> : <span class="string">"test"</span>&#125;,</div><div class="line">                    success: <span class="function"><span class="keyword">function</span> <span class="params">(result)</span> </span>&#123;</div><div class="line">                        console.log(result);</div><div class="line">                    &#125;,</div><div class="line">                    timeout: <span class="number">3000</span></div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;form name=<span class="string">"form"</span>&gt;</div><div class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"sex"</span>&gt;</div><div class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>&gt;</div><div class="line">    &lt;input type=<span class="string">"button"</span> id=<span class="string">"btn"</span> value=<span class="string">"button"</span> /&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></li></ul><p>2.test.test.com/index.php<br>    <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//服务器允许的 Origin</span></div><div class="line">header(<span class="string">"Access-Control-Allow-Origin: http://www.test.com"</span>);</div><div class="line"><span class="comment">//服务器允许的 methods</span></div><div class="line">header(<span class="string">"Access-Control-Allow-Methods: PUT, GET, POST"</span>);</div><div class="line"><span class="comment">//服务器允许设置的头部字段</span></div><div class="line">header(<span class="string">"Access-Control-Allow-Headers: custom-header-field"</span>);</div><div class="line"></div><div class="line">$arguments = file_get_contents(<span class="string">'php://input'</span>);</div><div class="line"><span class="keyword">echo</span> json_encode([<span class="string">'arguments'</span> =&gt; $arguments]);</div></pre></td></tr></table></figure></p><p>3.注意: 像上面例子的复杂跨域请求</p><ul><li><p>必须: 首先和简单请求一样, 服务器端的 <code>Access-Control-Allow-Origin</code> 是必须设置的, 不然首先就跨不了域;</p></li><li><p>必须: 其次, 是使用了 <code>get</code>, <code>post</code>, <code>head</code> 之外方法的 <code>复杂请求</code>, 那么就必须在服务端有对应的 <code>Access-Control-Allow-Method</code>, 否则:<br><img src="/img/cross-domain/not-simple-error01.png" width="597" height="133" alt="not-simple-error01" align="center"></p></li><li><p>可选: 如果你自定义了 <code>自定义首部字段</code> 的 <code>复杂请求</code>, 那么也要在服务端有对应的 <code>Access-Control-Allow-Headers</code>, 否则:<br><img src="/img/cross-domain/not-simple-error02.png" width="598" height="150" alt="not-simple-error02" align="center"></p></li></ul><p>4.另外需要关注的是: 如果你设置了自定义的首部字段, 那么即使你的请求类型是get, post, head, 自然也是复杂请求, 此时的HTTP请求方法显示的仍然如下:</p><pre><code>Request Method:OPTIONS</code></pre><h4 id="分析预检请求"><a href="#分析预检请求" class="headerlink" title="分析预检请求"></a>分析预检请求</h4><p>1.上面<code>www.test.com/index.php</code>代码进行ajax请求的时候, HTTP请求的方法是<code>PUT</code>, 所以浏览器会发现, 这是一个非简单请求, 就自动发出一个”预检”请求, 要求服务器确认可以这样请求 ;</p><p>2.所以请求应该是包括<code>预检请求</code>和<code>真正的请求</code>两个请求的:<br><img src="/img/cross-domain/2times_request.png" width="600" height="360" alt="2times_request" align="center"></p><p>3.下面是这个”预检”请求的HTTP头信息 和 回应信息:<br><img src="/img/cross-domain/preflight01.png" width="700" height="500" alt="preflight01" align="center"></p><p>4.可以看到, “预检”请求用的请求方法是OPTIONS, 表示这个请求是用来询问的, 头信息里面, 关键字段是Origin, 表示请求来自哪个源;</p><ul><li>除了Origin字段，”预检”请求的头信息包括两个特殊字段:<br>(1)<code>Access-Control-Request-Method</code> ：该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是PUT ;<br>(2)<code>Access-Control-Request-Headers</code>：该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段, 上例是X-Custom-Header ;</li></ul><h4 id="分析预检响应"><a href="#分析预检响应" class="headerlink" title="分析预检响应"></a>分析预检响应</h4><p>1.从下面预检请求的截图中，可以看到预检请求的回应中, 服务器收到”预检”请求以后, 检查了 <code>Origin</code>、<code>Access-Control-Request-Method</code> 和 <code>Access-Control-Request-Headers</code> 字段以后，确认允许跨源请求，就可以做出回应 ;<br><img src="/img/cross-domain/preflight01.png" width="700" height="500" alt="preflight01" align="center"></p><ul><li>并且预检请求部分是不会真的发送数据的:<br><img src="/img/cross-domain/preflight02.png" width="400" height="150" alt="preflight02" align="center"></li></ul><p>2.上面的HTTP回应中，关键的是 <code>Access-Control-Allow-Origin</code> 字段，表示 <code>http://www.test.com</code> 可以请求数据, <strong>该字段也可以设为星号</strong>，表示同意任意跨源请求 ;<br>    <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Access-Control-Allow-Origin: http:<span class="comment">//www.test.com</span></div><div class="line">或者</div><div class="line">Access-Control-Allow-Origin: *</div></pre></td></tr></table></figure></p><p>3.如果浏览器否定了”预检”请求，会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段 ; 这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被 <code>XMLHttpRequest</code> 对象的 <code>onerror</code> 回调函数捕获;</p><ul><li>控制台会打印出如下的报错信息 ;<br><img src="/img/cross-domain/no-simple-error01.png" width="650" height="150" alt="no-simple-error01" align="center"></li></ul><p>4.服务器还可能回应的其他CORS相关字段如下:</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Access-Control-Allow-Methods: GET, POST, PUT</div><div class="line">Access-Control-Allow-Headers: X-Custom-Header</div><div class="line">Access-Control-Allow-Credentials: true</div><div class="line">Access-Control-Max-Age: 1728000</div></pre></td></tr></table></figure>（1）Access-Control-Allow-Methods该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次&quot;预检&quot;请求。（2）Access-Control-Allow-Headers如果浏览器请求包括Access-Control-Request-Headers字段，则Access-Control-Allow-Headers字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在&quot;预检&quot;中请求的字段。（3）Access-Control-Allow-Credentials该字段与简单请求时的含义相同。（4）Access-Control-Max-Age该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是20天（1728000秒），即允许缓存该条回应1728000秒（即20天），在此期间，不用发出另一条预检请求。</code></pre><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><p>cors请求是否允许包含cookie?(和CORS简单请求是一样的要求)</p><ul><li>www.test.com/index.php  <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">setcookie(<span class="string">'address'</span>, json_encode([<span class="string">'city'</span> =&gt; <span class="string">'yuncheng'</span>, <span class="string">'town'</span> =&gt; <span class="string">'xiaoliang'</span>]), <span class="number">0</span>, <span class="string">'/'</span>, <span class="string">'.test.com'</span>);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">    &lt;title&gt;Title&lt;/title&gt;</div><div class="line">    &lt;script src=<span class="string">"https://cdn.staticfile.org/jquery/3.1.1/jquery.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;script type=<span class="string">"text/javascript"</span> &gt;</div><div class="line">        $(document).ready(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">            $.ajaxSetup(&#123;crossDomain: <span class="keyword">true</span>, xhrFields: &#123;withCredentials: <span class="keyword">true</span>&#125;&#125;);</div><div class="line">            $(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">//序列化name/value</span></div><div class="line">                <span class="keyword">var</span> data = $(<span class="string">"form"</span>).serializeArray();</div><div class="line">                $.ajax(&#123;</div><div class="line">                    <span class="comment">//这里用PUT, 则为 `非简单` 请求</span></div><div class="line">                    type: <span class="string">'PUT'</span>,</div><div class="line">                    url: <span class="string">'http://test.test.com/index.php'</span>,</div><div class="line">                    dataType: <span class="string">'json'</span>,</div><div class="line">                    data: data,</div><div class="line">                    <span class="comment">//或者如果你自定义了一些请求时的 header 首部字段, 那么请求就也是 复杂请求</span></div><div class="line">                    headers: &#123;<span class="string">"custom-header-field"</span> : <span class="string">"test"</span>&#125;,</div><div class="line">                    success: <span class="function"><span class="keyword">function</span> <span class="params">(result)</span> </span>&#123;</div><div class="line">                        console.log(result);</div><div class="line">                    &#125;,</div><div class="line">                    timeout: <span class="number">3000</span></div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;form name=<span class="string">"form"</span>&gt;</div><div class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"sex"</span>&gt;</div><div class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>&gt;</div><div class="line">    &lt;input type=<span class="string">"button"</span> id=<span class="string">"btn"</span> value=<span class="string">"button"</span> /&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></li></ul><ul><li>test.test.com  <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//服务器允许的 Origin (如果要发送cookie的话复杂请求也不能为*)</span></div><div class="line">header(<span class="string">"Access-Control-Allow-Origin: http://www.test.com"</span>);</div><div class="line"><span class="comment">//服务器允许的 methods</span></div><div class="line">header(<span class="string">"Access-Control-Allow-Methods: PUT, GET, POST"</span>);</div><div class="line"><span class="comment">//服务器允许设置的头部字段</span></div><div class="line">header(<span class="string">"Access-Control-Allow-Headers: custom-header-field"</span>);</div><div class="line"><span class="comment">//要跨子域发cookie, 这个自然不能少</span></div><div class="line">header(<span class="string">"Access-Control-Allow-Credentials: true"</span>);</div><div class="line"></div><div class="line">$arguments = file_get_contents(<span class="string">'php://input'</span>);</div><div class="line">$address = $_COOKIE[<span class="string">'address'</span>];</div><div class="line"><span class="keyword">echo</span> json_encode([<span class="string">'arguments'</span> =&gt; $arguments, <span class="string">'cookie'</span> =&gt; $address]);</div></pre></td></tr></table></figure></li></ul><blockquote><p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">参考 CORS</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;预检请求-preflight-说明&quot;&gt;&lt;a href=&quot;#预检请求-preflight-说明&quot; class=&quot;headerlink&quot; title=&quot;预检请求 preflight 说明&quot;&gt;&lt;/a&gt;预检请求 &lt;code&gt;preflight&lt;/code&gt; 说明&lt;/h4&gt;
      
    
    </summary>
    
      <category term="CrossDomain" scheme="http://blog.renyimin.com/categories/CrossDomain/"/>
    
    
      <category term="CrossDomain" scheme="http://blog.renyimin.com/tags/CrossDomain/"/>
    
  </entry>
  
  <entry>
    <title>05.Ajax请求不能发送 之 &quot;CORS方案 -- (simple request)&quot;</title>
    <link href="http://blog.renyimin.com/2016/09/18/2016-09-18-sameoriginpolicy-05/"/>
    <id>http://blog.renyimin.com/2016/09/18/2016-09-18-sameoriginpolicy-05/</id>
    <published>2016-09-18T04:45:07.000Z</published>
    <updated>2017-10-27T10:03:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CORS说明"><a href="#CORS说明" class="headerlink" title="CORS说明"></a>CORS说明</h3><p>1.CORS是一个W3C标准, 全称是 “跨域资源共享 “(Cross-origin resource sharing), 通俗说就是我们所熟知的跨域请求 ;</p><ul><li>众所周知，在以前，跨域可以采用 <code>代理</code>、<code>JSONP</code> 等方式，而在Modern浏览器面前，这些终将成为过去式，因为有了CORS ;</li><li>CORS在最初接触的时候只大概了解到，通过服务器端设置Access-Control-Allow-Origin响应头，即可使指定来源像访问同源接口一样访问跨域接口，但其实CORS的规范定义远不止这些 ;</li></ul><p>2.它允许浏览器向<strong>跨源</strong>服务器发出XMLHttpRequest请求, 也就是克服了AJAX只能同源使用的限制 ;</p><p>3.CORS需要浏览器和服务器同时支持 (目前, 所有浏览器都支持该功能, IE浏览器不能低于IE10) ;</p><p>4.整个CORS通信过程都是浏览器自动完成, 不需要用户参与 ;</p><ul><li><p>对于开发者来说, CORS通信与同源的AJAX通信没有差别, 代码完全一样, 浏览器一旦发现AJAX的请求是跨源的, 就会自动添加一些附加的头信息, 有时还会多出一次附加的请求, 但用户不会有感觉;</p></li><li><p>之所以<code>CORS通信与同源的AJAX通信的代码没有差别</code>, 是因为: <strong>其实实现CORS通信的关键是服务器, 只要服务器实现了CORS接口，就可以跨源通信 </strong></p></li></ul><h3 id="CORS的两类请求"><a href="#CORS的两类请求" class="headerlink" title="CORS的两类请求"></a>CORS的两类请求</h3><p>1.浏览器将CORS请求分成两类: 简单请求(simple request) 和 非简单请求(not-so-simple request)</p><p>2.以下情况会被归类为 <code>非简单请求</code> :</p><ul><li>请求以 GET, HEAD 或者 POST 以外的方法发起请求 ;</li><li>虽然使用 POST，但请求数据为 application/x-www-form-urlencoded, multipart/form-data 或者 text/plain 以外的数据类型, 比如说，用 POST 发送数据类型为 application/xml 或者 text/xml 的 XML 数据的请求 ;</li><li>使用自定义请求头（比如添加诸如 X-PINGOTHER）</li></ul><h3 id="简单请求代码案例"><a href="#简单请求代码案例" class="headerlink" title="简单请求代码案例"></a>简单请求代码案例</h3><p>1.客户端代码<br>    www.test.com/index.html :<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">   &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">   &lt;title&gt;Title&lt;/title&gt;</div><div class="line">   &lt;script src=&quot;https://cdn.staticfile.org/jquery/3.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">   &lt;script type=&quot;text/javascript&quot; &gt;</div><div class="line">       $(document).ready(function()&#123;</div><div class="line">           $(&quot;#btn&quot;).click(function(k) &#123;</div><div class="line">               var data = $(&quot;form&quot;).serializeArray();//序列化name/value</div><div class="line">               $.ajax(&#123;</div><div class="line">                   type: &apos;GET&apos;,  //这里用GET</div><div class="line">                   url: &apos;http://test.test.com/index.php&apos;,</div><div class="line">                   dataType: &apos;json&apos;,  //类型</div><div class="line">                   data: data,</div><div class="line">                   success: function (result) &#123;//返回的json数据</div><div class="line">                       console.log(result); //回调输出</div><div class="line">                   &#125;,</div><div class="line">                   timeout: 3000</div><div class="line">               &#125;);</div><div class="line">           &#125;);</div><div class="line">       &#125;);</div><div class="line">   &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;form name=&quot;form&quot;&gt;</div><div class="line">   &lt;input type=&quot;text&quot; name=&quot;sex&quot;&gt;</div><div class="line">   &lt;input type=&quot;text&quot; name=&quot;age&quot;&gt;</div><div class="line">   &lt;input type=&quot;button&quot; id=&quot;btn&quot; value=&quot;button&quot; /&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p><p>2.服务端代码<br>test.test.com/index.php :<br>    <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">header(<span class="string">"Access-Control-Allow-Origin: http://www.test.com"</span>);</div><div class="line"><span class="keyword">echo</span> json_encode([<span class="string">'name'</span> =&gt; <span class="string">'lant'</span>, <span class="string">'age'</span> =&gt; <span class="number">100</span>]);</div></pre></td></tr></table></figure></p><h3 id="基本流程分析"><a href="#基本流程分析" class="headerlink" title="基本流程分析"></a>基本流程分析</h3><p>1.对于简单请求，浏览器直接发出CORS请求, 具体来说, 就是在头信息之中, 自动增加一个Origin字段 ;</p><ul><li>浏览器发现这次跨源AJAX请求是简单请求, 就自动在头信息之中, 添加一个Origin字段:<br><img src="/img/cross-domain/ajax-simple-cors.png" width="670" height="420" alt="ajax-simple-cors" align="center"></li><li><strong>上面的头信息中, <code>Origin字段</code> 用来说明本次请求来自哪个源(协议 + 域名 + 端口), 服务器根据这个值, 决定是否同意这次请求 </strong>;</li></ul><p>2.如果Origin源不在服务器的许可范围内</p><ul><li>服务器仍然会返回一个正常的HTTP回应, 不过浏览器会发现, 这个回应的头信息并没有包含 <code>Access-Control-Allow-Origin</code> 字段(详见下文), 就知道出错了, 从而抛出一个错误, 被XMLHttpRequest的onerror回调函数捕获; </li><li><strong>注意, 这种错误无法通过状态码识别, 因为HTTP回应的状态码有可能是200</strong> ;<br><img src="/img/cross-domain/ajax-simple-cors02.png" width="590" height="260" alt="ajax-simple-cors02" align="center"></li></ul><p>3.当然, 如果Origin源在服务器设置的许可范围内</p><ul><li>服务器的响应就会多出如下几个头信息字段(当然也不一定是所有都包含, <strong>具体还得看服务器如何进行设置</strong>):  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Access-Control-Allow-Origin: http://api.bob.com</div><div class="line">Access-Control-Allow-Credentials: true</div><div class="line">Access-Control-Expose-Headers: FooBar</div><div class="line">Content-Type: text/html; charset=utf-8</div></pre></td></tr></table></figure></li></ul><ul><li>重点分析 :<br>上面的头信息之中，有三个与CORS请求相关的字段，都以<code>Access-Control-</code>开头:<br>(1) <code>Access-Control-Allow-Origin</code><br>服务器要设置ajax请求可以跨域, 该字段是必须的, 它的值要么是请求时Origin字段的值，要么是一个<em>，表示接受任意域名的请求;<br>(2) <code>Access-Control-Allow-Credentials</code><br>该字段可选, 它的值是一个布尔值，表示是否允许发送Cookie, <em>*默认情况下，Cookie不包括在CORS请求之中</em></em>, 设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器;<br>注意, 这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。<br>(3) <code>Access-Control-Expose-Headers</code><br>该字段可选, CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma;<br>如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定;<br>上面的例子指定，getResponseHeader(‘FooBar’)可以返回FooBar字段的值。</li></ul><h3 id="服务器端的具体设置"><a href="#服务器端的具体设置" class="headerlink" title="服务器端的具体设置"></a>服务器端的具体设置</h3><ol><li>服务器在设置的时候, 其实就是通过header函数设置上面的三个选项!</li><li><p>比如之前的例子中, 如果服务器只是简单的为了实现跨域, 直接设置如下选项即可:</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">header(<span class="string">"Access-Control-Allow-Origin: http://www.test1.com"</span>);</div><div class="line"><span class="keyword">echo</span> json_encode([<span class="string">'name'</span> =&gt; <span class="string">'lant'</span>, <span class="string">'age'</span> =&gt; <span class="number">100</span>]);</div></pre></td></tr></table></figure></li></ol><h3 id="withCredentials-属性"><a href="#withCredentials-属性" class="headerlink" title="withCredentials 属性"></a>withCredentials 属性</h3><p><strong>CORS请求默认不发送<code>Cookie</code>和<code>HTTP认证信息</code> (Jsonp是会发送cookie信息的)</strong></p><p>1.之前在介绍<code>Access-Control-Allow-Credentials</code>选项的时候提到, CORS请求默认不发送Cookie和HTTP认证信息; 如果要把Cookie发到服务器:</p><ul><li><p>一方面要 <strong>服务器同意指定Access-Control-Allow-Credentials字段</strong> :</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Access-Control-Allow-Credentials: <span class="keyword">true</span></div><div class="line"><span class="comment">//php中设置如下:</span></div><div class="line">header(<span class="string">"Access-Control-Allow-Credentials: true"</span>);</div></pre></td></tr></table></figure></li><li><p>另一方面, 开发者必须在AJAX请求中打开 <code>withCredentials</code> 属性:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var xhr = new XMLHttpRequest();</div><div class="line">xhr.withCredentials = true;</div><div class="line">//jquery中设置withCredentials的代码如下:</div><div class="line">$.ajaxSetup(&#123;crossDomain: true, xhrFields: &#123;withCredentials: true&#125;&#125;);</div></pre></td></tr></table></figure></li></ul><p>2.需要以上两方面都做到才可以</p><ul><li>否则，即使服务器同意发送Cookie，浏览器也不会发送 ;</li><li>但是, 如果省略 <code>withCredentials</code> 设置, 有的浏览器还是会一起发送Cookie, 这时, 可以显式关闭 <code>withCredentials</code> ;<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xhr.withCredentials = <span class="keyword">false</span>;</div></pre></td></tr></table></figure></li></ul><p>3.<strong>需要注意的是</strong>:</p><ul><li><strong>如果要发送Cookie, <code>Access-Control-Allow-Origin</code> 就不能设为星号<code>*</code>, 必须指定明确的、与请求网页一致的域名</strong> ; </li><li><strong>同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传, 其他域名的Cookie并不会上传, 且(跨源)原网页代码中的document.cookie也无法读取服务器域名下的Cookie ;</strong></li></ul><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><p>1.域1中的代码(www.test.com/index.php)：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传, 其他域名的Cookie并不会上传, 且(跨源)原网页代码中的document.cookie也无法读取服务器域名下的Cookie</span></div><div class="line">setcookie(<span class="string">'address'</span>, json_encode([<span class="string">'city'</span> =&gt; <span class="string">'yuncheng'</span>, <span class="string">'town'</span> =&gt; <span class="string">'xiaoliang'</span>]), <span class="number">0</span>, <span class="string">'/'</span>, <span class="string">'.test.com'</span>);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">    &lt;title&gt;Title&lt;/title&gt;</div><div class="line">    &lt;script src=<span class="string">"https://cdn.staticfile.org/jquery/3.1.1/jquery.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;script type=<span class="string">"text/javascript"</span> &gt;</div><div class="line">        $(document).ready(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="comment">//要在跨域请求服务器时在cors请求中包含cookie, 需要开启withCredentials属性</span></div><div class="line">            $.ajaxSetup(&#123;crossDomain: <span class="keyword">true</span>, xhrFields: &#123;withCredentials: <span class="keyword">true</span>&#125;&#125;);</div><div class="line"></div><div class="line">            $(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span><span class="params">(k)</span> </span>&#123;</div><div class="line">                <span class="keyword">var</span> data = $(<span class="string">"form"</span>).serializeArray();<span class="comment">//序列化name/value</span></div><div class="line">                $.ajax(&#123;</div><div class="line">                    type: <span class="string">'GET'</span>,  <span class="comment">//这里用GET</span></div><div class="line">                    url: <span class="string">'http://test.test.com/index.php'</span>,</div><div class="line">                    dataType: <span class="string">'json'</span>,  <span class="comment">//类型</span></div><div class="line">                    data: data,</div><div class="line">                    success: <span class="function"><span class="keyword">function</span> <span class="params">(result)</span> </span>&#123;<span class="comment">//返回的json数据</span></div><div class="line">                        console.log(result); <span class="comment">//回调输出</span></div><div class="line">                    &#125;,</div><div class="line">                    timeout: <span class="number">3000</span></div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;form name=<span class="string">"form"</span>&gt;</div><div class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"sex"</span>&gt;</div><div class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>&gt;</div><div class="line">    &lt;input type=<span class="string">"button"</span> id=<span class="string">"btn"</span> value=<span class="string">"button"</span> /&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p><p>2.域2中的代码(test.test.comindex.php):<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">header(<span class="string">"Access-Control-Allow-Origin: http://www.test.com"</span>);</div><div class="line"><span class="comment">//服务器允许前端在跨域cors请求时包含cookie</span></div><div class="line">header(<span class="string">"Access-Control-Allow-Credentials: true"</span>);</div><div class="line">$address = $_COOKIE[<span class="string">'address'</span>];</div><div class="line"><span class="keyword">echo</span> json_encode([<span class="string">'name'</span> =&gt; <span class="string">'lant'</span>, <span class="string">'age'</span> =&gt; <span class="number">100</span>, <span class="string">'address'</span> =&gt; $address]);</div></pre></td></tr></table></figure></p><p>3.效果:<br><img src="/img/cross-domain/cors-cookie.png" width="590" height="260" alt="cors-cookie" align="center"></p><p>4.两个注意点</p><ul><li><p>如果域1中在html中设置了 <code>withCredentials</code> 为 true :</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.ajaxSetup(&#123;crossDomain: true, xhrFields: &#123;withCredentials: true&#125;&#125;);</div></pre></td></tr></table></figure><p>  那么在对应的ajax请求的域2中必须设置</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">header(<span class="string">"Access-Control-Allow-Credentials: true"</span>);</div></pre></td></tr></table></figure><p>  否则, 报错如下:<br>  <img src="/img/cross-domain/haha-server-withCredentials.png" width="500" height="160" alt="haha-server-withCredentials" align="center"></p></li><li><p>如果两边都不设置 <code>withCredentials</code> 属性的话, 也就是默认请求不带cookie, 那么即使请求方域1中设置了domain属性为 <code>.test.com</code> 的cookie值, 服务方(test.test.com)中也获取不到cookie, 因为域1默认请求就没有带cookie ;</p></li></ul><blockquote><p><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="external">参考 阮一峰</a><br><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">参考 阮一峰 CORS</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CORS说明&quot;&gt;&lt;a href=&quot;#CORS说明&quot; class=&quot;headerlink&quot; title=&quot;CORS说明&quot;&gt;&lt;/a&gt;CORS说明&lt;/h3&gt;&lt;p&gt;1.CORS是一个W3C标准, 全称是 “跨域资源共享 “(Cross-origin resource sh
      
    
    </summary>
    
      <category term="CrossDomain" scheme="http://blog.renyimin.com/categories/CrossDomain/"/>
    
    
      <category term="CrossDomain" scheme="http://blog.renyimin.com/tags/CrossDomain/"/>
    
  </entry>
  
  <entry>
    <title>04. Ajax请求不能发送 之 &quot;JSONP方案&quot;</title>
    <link href="http://blog.renyimin.com/2016/09/17/2016-09-17-sameoriginpolicy-04/"/>
    <id>http://blog.renyimin.com/2016/09/17/2016-09-17-sameoriginpolicy-04/</id>
    <published>2016-09-17T11:27:31.000Z</published>
    <updated>2017-10-27T09:32:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>1.JSONP是服务器与客户端 <strong>跨源通信</strong> 的常用方法, 最大特点就是<code>简单适用</code>, <code>老式浏览器全部支持</code>, <code>服务器端改造非常小</code> ;</p><p>2.但是，<strong>JSONP只能发GET请求</strong> ;</p><p>3.<strong>注意:</strong> JSONP跨子域发送Cookie的话, 只用设置好<code>cookie的domain属性</code>为顶级域名即可 ;</p><ul><li><p>ajax使用jsonp跨域的时候是可以轻松像上面这样带上cookie给所跨的域 ;</p></li><li><p>而下一篇介绍的ajax使用cors方案跨域的话, 除了设置了cookie的 <code>document.domain</code> 为两个地址的顶级域名, 却也不能带上cookie, 还需要注意 前端和服务端的 <code>withCredentials</code> 头字段 ;</p></li></ul><h3 id="jsonp跨域请求案例"><a href="#jsonp跨域请求案例" class="headerlink" title="jsonp跨域请求案例"></a>jsonp跨域请求案例</h3><p>www.test.com/index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;Title&lt;/title&gt;</div><div class="line">    &lt;script src=&quot;https://cdn.staticfile.org/jquery/3.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script type=&quot;text/javascript&quot; &gt;</div><div class="line">        $(document).ready(function()&#123;</div><div class="line">            //注意, 此时jsonp是会带上cookie的(当然, 如果你不设置cookie的domain, test.test.com自然获取不到www.test.com域的cookie)</div><div class="line">            document.cookie = &quot;name=value; domain=test.com&quot;;</div><div class="line">            $(&quot;#btn&quot;).click(function() &#123;</div><div class="line">                var data = $(&quot;form&quot;).serializeArray();//序列化name/value</div><div class="line">                $.ajax(&#123;</div><div class="line">                    type: &apos;GET&apos;,  //这里用GET</div><div class="line">                    url: &apos;http://test.test.com/index.php&apos;,</div><div class="line">                    dataType: &apos;jsonp&apos;,  //类型</div><div class="line">                    data: data,</div><div class="line">                    jsonp: &apos;callback&apos;, //jsonp回调参数，必需</div><div class="line">                    async: false,</div><div class="line">                    success: function (result) &#123;//返回的json数据</div><div class="line">                        console.log(result); //回调输出</div><div class="line">                    &#125;,</div><div class="line">                    timeout: 3000</div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;form name=&quot;form&quot;&gt;</div><div class="line">    &lt;input type=&quot;text&quot; name=&quot;sex&quot;&gt;</div><div class="line">    &lt;input type=&quot;text&quot; name=&quot;age&quot;&gt;</div><div class="line">    &lt;input type=&quot;button&quot; id=&quot;btn&quot; value=&quot;button&quot; /&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p><p>test.test.com/index.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//jsonp回调参数，必需</span></div><div class="line">$callback = <span class="keyword">isset</span>($_GET[<span class="string">'callback'</span>]) ? trim($_GET[<span class="string">'callback'</span>]) : <span class="string">''</span>;</div><div class="line"></div><div class="line">$sex = <span class="keyword">isset</span>($_GET[<span class="string">'sex'</span>]) ? trim($_GET[<span class="string">'sex'</span>]) : <span class="string">''</span>;</div><div class="line">$age = <span class="keyword">isset</span>($_GET[<span class="string">'age'</span>]) ? trim($_GET[<span class="string">'age'</span>]) : <span class="string">''</span>;</div><div class="line"></div><div class="line">$data = [<span class="string">"sex"</span> =&gt; $sex, <span class="string">"age"</span> =&gt; $age];</div><div class="line">$res = json_encode($data); <span class="comment">//json 数据</span></div><div class="line"><span class="comment">// 不能用return</span></div><div class="line"><span class="keyword">echo</span> $callback . <span class="string">'('</span> . $res . <span class="string">')'</span>;  <span class="comment">//返回格式，必需</span></div></pre></td></tr></table></figure></p><p><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="external">参考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JSONP&quot;&gt;&lt;a href=&quot;#JSONP&quot; class=&quot;headerlink&quot; title=&quot;JSONP&quot;&gt;&lt;/a&gt;JSONP&lt;/h3&gt;&lt;p&gt;1.JSONP是服务器与客户端 &lt;strong&gt;跨源通信&lt;/strong&gt; 的常用方法, 最大特点就是&lt;code&gt;简
      
    
    </summary>
    
      <category term="CrossDomain" scheme="http://blog.renyimin.com/categories/CrossDomain/"/>
    
    
      <category term="CrossDomain" scheme="http://blog.renyimin.com/tags/CrossDomain/"/>
    
  </entry>
  
</feed>
