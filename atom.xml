<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lant&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.renyimin.com/"/>
  <updated>2018-01-02T01:32:58.000Z</updated>
  <id>http://blog.renyimin.com/</id>
  
  <author>
    <name>Lant</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql(InnoDB)事务隔离级别(REPEATABLE READ) 与 锁,MVCC</title>
    <link href="http://blog.renyimin.com/2017/12/31/2017-12-31-mysql_transaction-05/"/>
    <id>http://blog.renyimin.com/2017/12/31/2017-12-31-mysql_transaction-05/</id>
    <published>2017-12-31T08:01:47.000Z</published>
    <updated>2018-01-02T01:32:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="REPEATABLE-READ"><a href="#REPEATABLE-READ" class="headerlink" title="REPEATABLE READ"></a>REPEATABLE READ</h3><p>(可重复读)</p><ol><li><p>之前已经了解到, 该隔离级别可以解决<code>不可重复读问题</code> (当然, 也能解决<code>脏读问题</code>), 那么如果单纯用锁来实现, 可能会是如下这样子:</p><ul><li>既然<code>REPEATABLE READ</code> 隔离级别可以解决<code>脏读</code>, <code>不可重复读</code>的问题, 也就是它既可以让事务只能读其他事务已提交的的记录, 又能在同一事务中保证多次读取的数据即使被其他事务修改, 也是一致的。</li><li>解决<code>脏读问题</code>:<br>  试想一下, 当在事务A中读取数据D的时候, 假设D之前已经在事务B中了, 并且事务B中对数据D做了修改, 但是事务B还没有完成(commit/rollback), 那如何让事务A无法读取数据D呢?<br>  当事务B在对数据D做写操作的时候, 假设给数据D加上了行级的排他锁(X lock), 那事务A自然只能阻塞等事务A完成后才能读取数据D了, 这样就解决了<code>脏读问题</code>。</li><li>解决 <code>不可重复读问题</code>:<br>  试想一下, 当在事务A中第一次读取了数据D之后, 直接给该数据D加S共享锁, 那其他事务自然只能阻塞等事务A完成后才能对数据D做修改操作了, 这样就解决了<code>不可重复读</code>, 在事务A中多次读取数据D, 都是一样的。</li></ul></li><li><p>上面使用<code>S锁+X锁</code>确实可以实现 <code>READ COMMITTED</code> 隔离级别的效果, 也就避免了<code>脏读问题</code>和<code>不可重复读问题</code>, 当然, 这里的问题仍然是低效！！！！</p></li><li><p>因为 MySQL 在事务隔离级别Read committed 、Repeatable Read下，InnoDB 存储引擎采用<code>非锁定</code>的<code>一致性读</code>－－即读取数据不用加锁，即采用的是MVCC中<code>一致性非锁定读</code>模式, 所以, InnoDB的做法是: <strong>读不影响写，写不影响读</strong>。</p><ul><li>读不影响写: 当数据正在执行读操作时，其他事务的写操作不会因此去等待当前事务行上S锁的释放，而是会去读取行的一个快照数据。   </li><li>写不影响读：当数据正在执行写操作时，其他事务的读操作不会因此去等待当前事务行上X锁的释放，而是会去读取行的一个快照数据。    </li></ul></li><li><p>所以总结来看, <code>READ UNCOMMITTED</code> 和 <code>REPEATABLE READ</code> 这两个隔离级别都是使用 <code>写用排他锁 + 读用MVCC</code>, 区别可以参考 <a href="/2017/12/28/2017-12-28-mysql_mvcc/">MySQL-InnoDB-MVCC多版本并发控制</a></p></li></ol><ul><li><a href="https://dev.mysql.com/doc/refman/5.6/en/innodb-consistent-read.html" target="_blank" rel="external">MySQL官方文档</a></li><li><a href="https://www.imooc.com/article/17290" target="_blank" rel="external">慕课mark_rock同学手记</a></li><li><a href="https://tech.meituan.com/innodb-lock.html" target="_blank" rel="external">美团技术博客</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;REPEATABLE-READ&quot;&gt;&lt;a href=&quot;#REPEATABLE-READ&quot; class=&quot;headerlink&quot; title=&quot;REPEATABLE READ&quot;&gt;&lt;/a&gt;REPEATABLE READ&lt;/h3&gt;&lt;p&gt;(可重复读)&lt;/p&gt;
&lt;ol&gt;
&lt;l
      
    
    </summary>
    
      <category term="MySQL" scheme="http://blog.renyimin.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://blog.renyimin.com/tags/MySQL/"/>
    
      <category term="事务" scheme="http://blog.renyimin.com/tags/%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="隔离级别与锁" scheme="http://blog.renyimin.com/tags/%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E4%B8%8E%E9%94%81/"/>
    
      <category term="MVCC" scheme="http://blog.renyimin.com/tags/MVCC/"/>
    
  </entry>
  
  <entry>
    <title>mysql(InnoDB)事务隔离级别(READ COMMITTED) 与 锁,MVCC</title>
    <link href="http://blog.renyimin.com/2017/12/31/2017-12-31-mysql_transaction-04/"/>
    <id>http://blog.renyimin.com/2017/12/31/2017-12-31-mysql_transaction-04/</id>
    <published>2017-12-31T02:01:47.000Z</published>
    <updated>2018-01-02T01:33:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="READ-COMMITTED"><a href="#READ-COMMITTED" class="headerlink" title="READ COMMITTED"></a>READ COMMITTED</h3><p>(提交读)</p><ol><li><p>了解了<a href="/2017/12/29/2017-12-29-mysql_transaction-02/">之前 <code>READ UNCOMMITTED</code> 隔离级别是如何加锁的</a>, 并且在文章中, 已经知道 <code>READ COMMITTED</code> 隔离级别可以解决脏读的问题, 那接下来, 对于 <code>READ COMMITTED</code> 隔离级别, 试想一下如果让你用锁来设计, 你会怎么做?</p><ul><li>既然<code>READ COMMITTED</code> 隔离级别可以解决<code>脏读</code>的问题, 也就是他可以让事务只能读其他事务已提交的的记录。</li><li>如果用锁机制来实现该隔离级别:<br>  试想一下, 当在事务A中读取数据D的时候, 假设D之前已经在事务B中了, 并且事务B中对数据D做了修改, 但是事务B还没有完成(commit/rollback), 那如何让事务A无法读取数据D呢?<br>  当事务B在对数据D做写操作的时候, 假设给数据D加上了行级的排他锁(X lock), 那事务A自然只能阻塞等事务A完成后才能读取数据D了!</li><li>数据库这样做的话确实实现了<code>READ COMMITTED</code>隔离级别的效果, 也就避免了<code>脏读</code>, 但问题是这是一种很低效的做法, 因为对于大部分应用来说, 读操作是多于写操作的, 当写操作加锁时, 那么读操作全部被阻塞, 这样在大用户量高并发的情况下, 会直接降低数据库的读效率。</li></ul></li><li><p>那么, 既然用锁机制实现该隔离级别是低效的做法, 数据库是如何做的?<br> 之前在相关<a href="/2017/12/28/2017-12-28-mysql_mvcc/">MVCC的文章</a>中可以得到答案: 数据库是使用了 <strong>排他锁+MVCC</strong> 的机制来实现该隔离级别的, 而不是单纯的使用锁或者单纯的使用MVCC</p></li></ol><h3 id="READ-COMMITTED与锁-测试"><a href="#READ-COMMITTED与锁-测试" class="headerlink" title="READ COMMITTED与锁 测试"></a>READ COMMITTED与锁 测试</h3><ol><li><p>数据表结构如下:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select * from test_transaction;</div><div class="line">+----+---------------+-----+--------+--------------------+</div><div class="line">| id | user_name     | age | gender | desctiption        |</div><div class="line">+----+---------------+-----+--------+--------------------+</div><div class="line">|  1 | 金刚狼     | 127 |      2 | 我有一双铁爪 |</div><div class="line">|  2 | 钢铁侠-rym | 120 |      1 | 我有一身铁甲 |</div><div class="line">|  3 | 绿巨人     |   0 |      2 | 我有一身肉    |</div><div class="line">+----+---------------+-----+--------+--------------------+</div><div class="line">3 rows in set (0.00 sec)</div><div class="line"> </div><div class="line">mysql&gt;</div></pre></td></tr></table></figure></li><li><p>重新设置<code>客户端1</code>事务隔离级别为read committed: <code>SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;</code></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SELECT @@SESSION.tx_isolation;</div><div class="line">+------------------------+</div><div class="line">| @@SESSION.tx_isolation |</div><div class="line">+------------------------+</div><div class="line">| REPEATABLE-READ        |</div><div class="line">+------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"> </div><div class="line">mysql&gt; SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"> </div><div class="line">mysql&gt; SELECT @@SESSION.tx_isolation;</div><div class="line">+------------------------+</div><div class="line">| @@SESSION.tx_isolation |</div><div class="line">+------------------------+</div><div class="line">| READ-COMMITTED         |</div><div class="line">+------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"> </div><div class="line">mysql&gt;</div></pre></td></tr></table></figure></li><li><p>再重新打开一个<code>客户端2</code>并设置事务隔离级别为read committed;</p></li><li><p>在<code>客户端1</code>中打开事务, 然后更改数据, 先不提交; 然后在<code>客户端2</code>中打开事务, 读取<code>客户端1</code>中尚未提交的那条被修改数据<br> <img src="/img/mysql/transaction/committed_result_01.png" width="470" height="660"></p></li><li><p>结果发现在<code>客户端2</code>中可以正常读取到那条数据, 只不过, 那条数据并不是被<code>客户端1</code>事务中修改后的数据, 而是最初的<code>稳定数据</code>, 这就避免了<code>脏读</code>!!  </p></li><li><p>对于该隔离级别修改数据时使用的锁类型, 其分析方法, 和之前一篇<a href="2017/12/29/2017-12-29-mysql_transaction-02/">MySQL(INNODB引擎)事务READ UNCOMMITTED隔离级别和锁的关系</a> 是一样的：</p><ul><li>可以在<code>客户端1</code>的事务在修改数据并且未提交时, 在<code>客户端2</code>中对同一数据进行修改, 然后在<code>客户端2</code>阻塞阶段通过<br><code>查看表的加锁情况: select * from information_schema.INNODB_LOCKS;</code>,<br><code>事务状态: select * from information_schema.INNODB_TRX;</code>,<br>进行分析, 结果就不展示了, 可以自行测试一下, 该隔离级别修改数据时使用的也是排他锁, 并且<code>客户端2</code>的修改语句会锁等待~<br>(和之前分析READ UNCOMMITTED隔离级别一样, 既然使用了排他锁, 竟然别的事务还能读取, 这特么不就又违反了排他锁的特性么? 还是那句话, 另一个事务在读取的时候并不会加锁, 而是用的MVCC机制读取的镜像)</li></ul></li><li><p>小结:<br> InnoDB在该隔离级别(READ COMMITTED)写数据是使用排他锁, 读取数据不加锁而是使用了MVCC机制, 这样就可以大大提高并发读写效率, 写不影响读, <strong>因为读并未加锁, 读的是记录的镜像版本</strong>!!</p></li></ol><ul><li><a href="https://dev.mysql.com/doc/refman/5.6/en/innodb-consistent-read.html" target="_blank" rel="external">MySQL官方文档</a></li><li><a href="https://www.imooc.com/article/17289" target="_blank" rel="external">慕课mark_rock同学手记</a></li><li><a href="https://tech.meituan.com/innodb-lock.html" target="_blank" rel="external">美团技术博客</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;READ-COMMITTED&quot;&gt;&lt;a href=&quot;#READ-COMMITTED&quot; class=&quot;headerlink&quot; title=&quot;READ COMMITTED&quot;&gt;&lt;/a&gt;READ COMMITTED&lt;/h3&gt;&lt;p&gt;(提交读)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="MySQL" scheme="http://blog.renyimin.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://blog.renyimin.com/tags/MySQL/"/>
    
      <category term="事务" scheme="http://blog.renyimin.com/tags/%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="隔离级别与锁" scheme="http://blog.renyimin.com/tags/%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E4%B8%8E%E9%94%81/"/>
    
      <category term="MVCC" scheme="http://blog.renyimin.com/tags/MVCC/"/>
    
  </entry>
  
  <entry>
    <title>mysql(InnoDB)事务隔离级别(READ UNCOMMITTED) 与 锁</title>
    <link href="http://blog.renyimin.com/2017/12/29/2017-12-29-mysql_transaction-02/"/>
    <id>http://blog.renyimin.com/2017/12/29/2017-12-29-mysql_transaction-02/</id>
    <published>2017-12-29T11:12:11.000Z</published>
    <updated>2018-01-02T01:33:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>先针对自己以前错误的思维做个记录, 可以直接跳过</p><ol><li>由于以前看到很多资料在谈到并发控制的时候, 都会提到用<code>锁</code>来控制并发, MySQL也不例外, 也有很多和锁相关的概念(留到后面会单独整理一篇笔记出来), 所以一提到高并发产生的问题, 我会不自觉地提出一个疑问: <code>现在并发出问题了, 那怎么用锁的相关知识来解决?</code>;</li><li>而且近期一段时间也一直在看很多有关MySQL锁相关的资料,书籍, 于是乎 <code>死锁</code>, <code>锁冲突</code>, <code>行锁</code>,<code>表锁</code>, <code>读锁</code>, <code>写锁</code>, <code>乐观锁</code>, <code>悲观锁</code> ……等等 N多锁相关的名词(后面的笔记会把所有自己遇到的, 全部整理并进行分析), 大量的篇幅, 高深晦涩的描述, 直接导致我意识里认为<code>嗯, 锁真tm高大上, 真tm高端, 肯定tm就是它了</code>; </li><li>于是就进入了思想误区, 认为在解决<code>脏读</code>,<code>不可重复读</code>,<code>幻读</code>的资料中, 应该大篇幅的描述如何用锁相关的知识来解决这些问题, 然而略失落了, 资料倒是提了点儿锁的知识, 但更多的是用事务的哪个隔离级别来解决这些问题, <code>锁</code>哪儿去了?</li><li><p>尤其是在分析<code>脏读</code>,<code>不可重复读</code>,<code>幻读</code>这几个问题的时候, 一上去就全乱了, 比如 <code>脏读</code>, 如果总是以MySQL锁的相关知识作为前提来分析, <strong>就会陷入误区</strong> ‘事务A读取数据的时候肯定会加S锁的, 事务B自然是无法对未完成的事务A中的数据进行修改的, 我Ca, <strong>这种脏读的场景根本就不成立嘛!</strong>‘, 那为什么不提锁, 而是用隔离级别来解决。<br> <img src="/img/mysql/transaction/022_zangdu.png" width="609" height="175"><br>……<br>……</p></li><li><p>晕了几天之后,终于稍微醒了点……</p><blockquote><p><a href="https://tech.meituan.com/innodb-lock.html" target="_blank" rel="external">参考美团技术博客</a><br> <img src="/img/mysql/transaction/meituan_suo.png" width="609" height="313"></p></blockquote></li><li><p>显然, <strong>事务隔离级别的核心就是锁, 各隔离级别使用了不同的加锁策略</strong>，在分析之前的几个高并发事务问题的时候, <code>隔离级别(锁)</code>自然是不能作为前置知识点的, 而是最终问题的解决方案! </p></li></ol><h2 id="“READ-UNCOMMITTED与锁”的困惑"><a href="#“READ-UNCOMMITTED与锁”的困惑" class="headerlink" title="“READ UNCOMMITTED与锁”的困惑"></a>“READ UNCOMMITTED与锁”的困惑</h2><p>(未提交读)</p><ol><li><p>在READ UNCOMMITTED级别, 事务中的修改, 即使还没有提交, 对其他事务也都是可见的; 也就是说事务可以读取未提交的数据, 这也就造成了 <code>脏读(Dirty Read)</code> 的出现。</p></li><li><p>这个级别会导致很多问题, 而且从性能上来说, READ COMMITTED 并不会比其他的级别好太多, 却缺乏其他级别的很多好处, 在实际应用中一般很少使用。</p></li><li><p>虽然很少使用, 但还是有必要了解一下, <strong>它这个隔离级别究竟是怎么隔离的, 竟然还能容许很多问题的存在？</strong> (老兄亏你还算个隔离级别, 怎么办事儿的…) 网上相关资料五花八门, 下面列几个出来(希望你看完不要激动):</p><ul><li><p><a href="https://tech.meituan.com/innodb-lock.html" target="_blank" rel="external">美团技术博客</a>:<br><img src="/img/mysql/transaction/meituan_readuncommitted.png" width="550" height="229"></p></li><li><p><a href="https://segmentfault.com/a/1190000004469395#articleHeader10" target="_blank" rel="external">segmentfault一篇文章</a><br><img src="/img/mysql/transaction/seg_readuncommitted.png" width="550" height="300"></p></li><li><p><a href="http://blog.csdn.net/flyingfalcon/article/details/53045672" target="_blank" rel="external">CSDN一篇文章</a><br><img src="/img/mysql/transaction/csdn_readuncommitted.png" width="550" height="86"></p></li><li><p><a href="http://blog.csdn.net/ozwarld/article/details/8259796" target="_blank" rel="external">CSDN一篇文章</a><br><img src="/img/mysql/transaction/csdn_readuncommitted_02.png" width="550" height="151"></p></li></ul></li><li><p>说实话, 资料查到这份儿上, 我已经快崩溃了, 就<code>READ UNCOMMITTED</code>这个隔离级别:</p><ul><li>有说读写都不加锁的</li><li>有说’修改完数据立即加S锁的, 修改时撤掉S锁’</li><li>有说’写加S锁,事务结束释放’的</li><li>有说’写加X锁,事务结束释放’的</li></ul></li><li><p><strong>行啦, 不查了, 再查就崩溃了, 自己去测一下吧!!!</strong></p></li></ol><ul><li>本次测试是使用MAMP PRO中mysql5.6版本</li><li><p>先准备一张测试表<code>test_transaction</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">DROP TABLE IF EXISTS `test_transaction`;</div><div class="line">CREATE TABLE `test_transaction` (</div><div class="line">  `id` int(10) NOT NULL AUTO_INCREMENT COMMENT &apos;主键&apos;,</div><div class="line">  `user_name` char(20) NOT NULL COMMENT &apos;姓名&apos;,</div><div class="line">  `age` tinyint(3) NOT NULL COMMENT &apos;年龄&apos;,</div><div class="line">  `gender` tinyint(1) NOT NULL COMMENT &apos;1:男, 2:女&apos;,</div><div class="line">  `desctiption` text NOT NULL COMMENT &apos;简介&apos;,</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `name_age_gender_index` (`user_name`,`age`,`gender`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;</div><div class="line"></div><div class="line">INSERT INTO `test_transaction` VALUES (1, &apos;金刚狼&apos;, 127, 1, &apos;我有一双铁爪&apos;);</div><div class="line">INSERT INTO `test_transaction` VALUES (2, &apos;钢铁侠&apos;, 120, 1, &apos;我有一身铁甲&apos;);</div><div class="line">INSERT INTO `test_transaction` VALUES (3, &apos;绿巨人&apos;, 0, 2, &apos;我有一身肉&apos;);</div></pre></td></tr></table></figure></li><li><p>如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select * from test_transaction;</div><div class="line">+----+-----------+-----+--------+--------------------+</div><div class="line">| id | user_name | age | gender | desctiption        |</div><div class="line">+----+-----------+-----+--------+--------------------+</div><div class="line">|  1 | 金刚狼 | 127 |      2 | 我有一双铁爪 |</div><div class="line">|  2 | 钢铁侠 | 120 |      1 | 我有一身铁甲 |</div><div class="line">|  3 | 绿巨人 |   0 |      2 | 我有一身肉    |</div><div class="line">+----+-----------+-----+--------+--------------------+</div><div class="line">3 rows in set (0.00 sec)</div></pre></td></tr></table></figure></li></ul><h2 id="READ-UNCOMMITTED与锁-测试"><a href="#READ-UNCOMMITTED与锁-测试" class="headerlink" title="READ UNCOMMITTED与锁 测试"></a>READ UNCOMMITTED与锁 测试</h2><h3 id="演示该隔离级别脏读效果"><a href="#演示该隔离级别脏读效果" class="headerlink" title="演示该隔离级别脏读效果"></a>演示该隔离级别脏读效果</h3><ol><li><p>先查看当前会话(当前客户端)事务的隔离级别: <code>SELECT @@SESSION.tx_isolation;</code><br> 可以看到: <code>REPEATABLE READ</code> 是InnoDB存储引擎的默认事务隔离级别</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SELECT @@SESSION.tx_isolation;</div><div class="line">+------------------------+</div><div class="line">| @@SESSION.tx_isolation |</div><div class="line">+------------------------+</div><div class="line">| REPEATABLE-READ        |</div><div class="line">+------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"> </div><div class="line">mysql&gt;</div></pre></td></tr></table></figure></li><li><p>重新设置当前客户端事务隔离级别为read uncommitted: <code>SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</code><br> 注意, 此时只是当前会话端的隔离级别被改, 其余客户端连接自然还是默认的REPEATABLE READ隔离级别<br> <img src="/img/mysql/transaction/set_transaction_level.png" width="535" height="811"></p></li><li><p>接下来将客户端2的事务隔离级别也设置为read uncommitted;<br> <img src="/img/mysql/transaction/set_transaction_level_02.png" width="535" height="740"></p></li><li><p>客户端1开启事务,并执行一个查询’读取数据’:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SELECT @@SESSION.tx_isolation;</div><div class="line">+------------------------+</div><div class="line">| @@SESSION.tx_isolation |</div><div class="line">+------------------------+</div><div class="line">| READ-UNCOMMITTED       |</div><div class="line">+------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"> </div><div class="line">mysql&gt; begin;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"> </div><div class="line">mysql&gt; select * from test_transaction where id=2;</div><div class="line">+----+-----------+-----+--------+--------------------+</div><div class="line">| id | user_name | age | gender | desctiption        |</div><div class="line">+----+-----------+-----+--------+--------------------+</div><div class="line">|  2 | 钢铁侠 | 120 |      1 | 我有一身铁甲 |</div><div class="line">+----+-----------+-----+--------+--------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"> </div><div class="line">mysql&gt;</div></pre></td></tr></table></figure><p> <strong>注意, 客户端1此时的事务并未提交</strong></p></li><li><p>客户端2开启事务, 并修改客户端1查询的数据</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SELECT @@SESSION.tx_isolation;</div><div class="line">+------------------------+</div><div class="line">| @@SESSION.tx_isolation |</div><div class="line">+------------------------+</div><div class="line">| READ-UNCOMMITTED       |</div><div class="line">+------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"> </div><div class="line">mysql&gt; begin;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"> </div><div class="line">mysql&gt; update test_transaction set user_name=&apos;钢铁侠-托尼&apos; where id=2;</div><div class="line">Query OK, 1 row affected (0.00 sec)</div><div class="line">Rows matched: 1  Changed: 1  Warnings: 0</div><div class="line">mysql&gt;</div></pre></td></tr></table></figure><ul><li>此时发现, 客户端2可以对客户端1正在读取的记录进行修改, 而根据锁相关知识, <code>如果说客户端1在读取记录的时候加了S锁, 那么客户端2是不能加X锁对该记录进行更改的</code>, 所以可以得出结论: 要么是客户端1读取记录的时候没有加S锁, 要么是客户端2更改该记录的时候没有加X锁(这样即使客户端1加了S锁,对它这个不加锁的事务也无可奈何), 那么究竟是哪种情况导致的? 下面继续进行分析…</li><li><strong>注意, 客户端2此时的事务也并未提交</strong></li></ul></li><li><p>切换到客户端1, 再次查询数据, 发现数据已经变成了’钢铁侠-托尼’; 然后客户端2 <code>rollback</code> 事务, 再到客户端1中查询,发现user_name又变成了’钢铁侠’, 那之前独到’钢铁侠-托尼’就是脏数据了, 这就是一次 <code>脏读</code><br> <img src="/img/mysql/transaction/result_01.png" width="515" height="845"></p></li></ol><h3 id="测试-分析该隔离级别如何加锁"><a href="#测试-分析该隔离级别如何加锁" class="headerlink" title="测试,分析该隔离级别如何加锁"></a>测试,分析该隔离级别如何加锁</h3><ol><li>重新构造测试条件<br> <img src="/img/mysql/transaction/qianti_02.png" width="525" height="930"></li><li><p>客户端1开启事务, 然后对数据做修改</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; begin;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"> </div><div class="line">mysql&gt; update test_transaction set user_name=&apos;钢铁侠-rymuscle&apos; where id=2;</div><div class="line">Query OK, 1 row affected (0.00 sec)</div><div class="line">Rows matched: 1  Changed: 1  Warnings: 0</div><div class="line">mysql&gt;</div></pre></td></tr></table></figure><p> <strong>注意, 客户端1此时的事务并未提交</strong></p></li><li><p>客户端2开启事务, 对相同的数据行做修改</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mysql&gt; begin;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"> </div><div class="line">mysql&gt; update test_transaction set user_name=&apos;钢铁侠-rym&apos; where id=2;</div><div class="line">....阻塞等待了</div></pre></td></tr></table></figure><p> 最终会如下:<br> <img src="/img/mysql/transaction/zuse.png" width="555" height="290"></p></li><li><p><strong>注意:</strong> 在上面的过程, 在客户端2阻塞阶段, 你可以通过一个新的客户端来分析, 客户端2在锁等待的情况下的 <code>加锁情况</code> 和 <code>事务状态</code>:</p><ul><li><p>查看表的加锁情况: <code>select * from information_schema.INNODB_LOCKS;</code></p><p><img src="/img/mysql/transaction/lock_result.png" width="605" height="340"></p></li><li>事务状态 <code>select * from information_schema.INNODB_TRX;</code><br><img src="/img/mysql/transaction/transaction_state_01.png" width="805" height="880"></li></ul></li><li><p>所以, <strong>READ UNCOMMITTED 隔离级别下, 写操作是会加锁的, 而且是X排他锁, 直到客户端1事务完成, 锁才释放, 客户端2才能进行写操作</strong></p></li><li><p>接下来你肯定会纳闷 “既然该隔离级别下事务在修改数据的时候加的是x锁, 并且是事务完成后才释放, 那之前的测试客户端2在事务中修改完数据之后, 为什么事务还没完成, 也就是x锁还在, 结果客户端1却能读取到客户端2修改的数据”？<strong>这完全不符合排他锁的特性啊(要知道,排他锁会阻塞除当前事务之外的其他事务的读,写操作)</strong></p><ul><li><p>其实网上已经有人在sqlserver的官网上找到了相关资料:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ansactions running at the READ UNCOMMITTED level do not issue shared locks to prevent other transactions from modifying data read by the current transaction. </div><div class="line">READ UNCOMMITTED transactions are also not blocked by exclusive locks that would prevent the current transaction from reading rows that have been modified but not committed by other transactions. </div><div class="line">When this option is set, it is possible to read uncommitted modifications, which are called dirty reads. Values in the data can be changed and rows can appear or disappear in the data set before the end of the transaction. </div><div class="line">This option has the same effect as setting NOLOCK on all tables in all SELECT statements in a transaction. </div><div class="line">This is the least restrictive of the isolation levels.</div></pre></td></tr></table></figure></li><li><p>翻译翻译, 在思考思考, 其实说的是<br>在 READ UNCOMMITTED 级别运行的事务不会发出共享锁来防止其他事务修改当前事务读取的数据, 既然不加共享锁了, 那么当前事务所读取的数据自然就可以被其他事务来修改。<br>而且当前事务要读取其他事务未提交的修改, 也不会被排他锁阻止, 因为排他锁会阻止其他事务再对其锁定的数据加读写锁, <strong>但是可笑的是, 事务在该隔离级别下去读数据的话根本什么锁都不加, 这就让排他锁无法排它了, 因为它连锁都没有</strong>。<br>这就导致了事务可以读取未提交的修改, 称为脏读。</p></li></ul></li></ol><p><strong>所以可以得出</strong>: <code>READ UNCOMMITTED</code>隔离级别下, 读不会加任何锁。而写会加排他锁，并到事务结束之后释放。</p><p>参考资料:<br>-《高性能MySQL》</p><ul><li><a href="https://dev.mysql.com/doc/refman/5.6/en/innodb-consistent-read.html" target="_blank" rel="external">MySQL官方文档</a></li><li><a href="https://www.imooc.com/article/17291" target="_blank" rel="external">慕课mark_rock同学手记</a></li><li><a href="https://tech.meituan.com/innodb-lock.html" target="_blank" rel="external">美团技术博客</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;先针对自己以前错误的思维做个记录, 可以直接跳过&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由于以前看到很多资料在谈到并发控制的时候, 都会提到用&lt;code
      
    
    </summary>
    
      <category term="MySQL" scheme="http://blog.renyimin.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://blog.renyimin.com/tags/MySQL/"/>
    
      <category term="事务" scheme="http://blog.renyimin.com/tags/%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="隔离级别与锁" scheme="http://blog.renyimin.com/tags/%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E4%B8%8E%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>MySQL-InnoDB-MVCC多版本并发控制</title>
    <link href="http://blog.renyimin.com/2017/12/28/2017-12-28-mysql_mvcc/"/>
    <id>http://blog.renyimin.com/2017/12/28/2017-12-28-mysql_mvcc/</id>
    <published>2017-12-28T13:07:12.000Z</published>
    <updated>2018-01-01T07:36:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h2><p>(Multiversion Concurrency Control)<br>1.先引用《高性能MySQL》中对MVCC的部分介绍</p><blockquote><ul><li><p>MySQL的大多数事务型存储引擎实现的其实都不是简单的行级锁。<strong>基于提升并发性能的考虑</strong>, 它们一般都同时实现了多版本并发控制(MVCC)。不仅是MySQL, 包括Oracle,PostgreSQL等其他数据库系统也都实现了MVCC, 但各自的实现机制不尽相同, 因为MVCC没有一个统一的实现标准。</p></li><li><p>可以认为MVCC是行级锁的一个变种, 但是它在很多情况下避免了加锁操作, 因此开销更低。虽然实现机制有所不同, 但大都实现了非阻塞的读操作，写操作也只锁定必要的行。</p></li><li><p>MVCC的实现方式有多种, 典型的有乐观(optimistic)并发控制 和 悲观(pessimistic)并发控制。</p></li><li><p>MVCC只在 <code>READ COMMITTED</code> 和 <code>REPEATABLE READ</code> 两个隔离级别下工作。其他两个隔离级别够和MVCC不兼容, 因为 <code>READ UNCOMMITTED</code> 总是读取最新的数据行, 而不是符合当前事务版本的数据行。而 <code>SERIALIZABLE</code> 则会对所有读取的行都加锁。</p></li></ul></blockquote><p>2.可以了解到:</p><ul><li>MVCC是被Mysql中<code>事务型存储引擎InnoDB</code>所支持的;</li><li><strong>应对高并发事务, MVCC比单纯的加行锁更有效, 开销更小</strong>;</li><li>MVCC只在 <code>READ COMMITTED</code> 和 <code>REPEATABLE READ</code> 两个隔离级别下工作;</li><li>MVCC可以使用 <code>乐观(optimistic)锁</code> 和 <code>悲观(pessimistic)锁</code>来实现;</li></ul><p>3.另外, 《高性能Mysql》中提到, InnoDB的MVCC是通过在每行记录后面保存<strong>两个隐藏的列</strong>来实现的….. 这个貌似和网上很多观点不同, 具体可以参考<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-multi-versioning.html" target="_blank" rel="external">MySQL官方对InnoDB-MVCC的解释</a><br>    <img src="/img/mysql/transaction/mysql_mvcc_jieshao.png" width="607" height="450"><br>    <strong>可以看到, InnoDB存储引擎在数据库每行数据的后面添加了三个字段, 不是两个!!</strong></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>1.InnoDB存储引擎在数据库每行数据的后面添加了三个字段</p><ul><li><p>6字节的事务ID(<code>DB_TRX_ID</code>)字段: 标记了最新更新这条行记录的transaction id，每处理一个事务，其值自动+1<br>  另外，删除在内部被视为一个更新，其中行中的特殊位被设置为将其标记为已删除</p></li><li><p>7字节的回滚指针(<code>DB_ROLL_PTR</code>)字段 : 指向当前记录项的rollback segment的 <code>undo log</code>(撤销日志记录), 找之前版本的数据就是通过这个指针。</p></li><li><p>6字节的<code>DB_ROW_ID</code>字段: 当由innodb自动产生聚集索引时，聚集索引包括这个DB_ROW_ID的值，否则聚集索引中不包括这个值，这个用于索引当中。<br>  结合聚簇索引的相关知识点, 我的理解是, 如果我们的表中有主键或合适的唯一索引, 也就是无法生成聚簇索引的时候, InnoDB会帮我们自动生成聚集索引, 但聚簇索引会使用DB_ROW_ID的值来作为主键; 如果我们有自己的主键或者合适的唯一索引, 那么聚簇索引中也就不会包含 DB_ROW_ID 了 。<br>  关于聚簇索引, 《高性能MySQL》中的篇幅对我来说已经够用了, 稍后会整理一下以前的学习笔记, 然后更新上来。</p></li></ul><p>2.下面通过一个案例来演示一下事务对某行记录的更新过程<br><img src="/img/mysql/mvcc/yanshi_01.png" width="600" height="819/"></p><ol><li><code>read view</code> </li></ol><ul><li>判断当前版本数据项是否可见</li><li>在innodb中, 每创建一个新事务, 存储引擎都会将当前系统中的活跃事务列表(trx_sys-&gt;trx_list)创建一个副本(<code>read view</code>), 副本中保存的是系统中当前不应该被本事务看到的其他事务id列表。</li><li>当用户在事务中要读取某行记录的时候, innodb会将该行当前的版本号与该read view进行比较, 下面介绍 <code>比较算法</code> ;</li></ul><h2 id="比较算法"><a href="#比较算法" class="headerlink" title="比较算法"></a>比较算法</h2><p>设该行的当前事务id为<code>trx_id_current</code>, <code>read view</code>中该行最早的事务id为<code>trx_id_first</code>, 最迟的事务id为<code>trx_id_last</code></p><ol><li>如果<code>trx_id_current &lt; trx_id_first</code>, 那就表示<br> 当前事务在读取该行记录的时候, 给该行数据设置的隐藏事务ID字段的值, 比<code>read view</code>中记录的 ‘当前系统中其他事务给该行记录设置的事务ID都要小’。<br> 这就意味着, 当前所有和该行记录有关的事务中, 当前事务是第一个读取到该行记录的, 没有任何在当前事务前面对该行数据做过更改但还没有提交的事务, 所以当前事务可以直接拿到表中<strong>稳定的数据</strong>!</li><li>如果<code>trx_id_current &gt; trx_id_last</code> 的话，那就表示<br> 当前事务在读取该行记录的时候, 给该行数据设置的隐藏事务ID字段的值, 比<code>read view</code>中记录的 ‘当前系统中其他事务给该行记录设置的事务ID都要大’。<br> 这就意味着, 当前所有和该行记录有关的事务中, 当前事务是最后一个读取到该行记录的, 所以需要从该行记录的<code>DB_ROLL_PTR</code>指针所指向的回滚段中取出最新的undo-log的版本号, 将它赋值给<code>trx_id_current</code>，然后继续重新开始整套比较算法, 这么迭代下去, 会在undo-log中一层层往下找下去, 最终就会取到<strong>稳定的数据</strong>!</li><li>如果 <code>trx_id_first &lt; trx_id_current &lt; trx_id_last</code>, 同上;</li></ol><h2 id="对别READ-COMMITED和REPEATABLE-READ"><a href="#对别READ-COMMITED和REPEATABLE-READ" class="headerlink" title="对别READ COMMITED和REPEATABLE READ"></a>对别<code>READ COMMITED</code>和<code>REPEATABLE READ</code></h2><ol><li><code>read view</code> 生成原则如果想深入了解的话可以自行百度或者参考<a href="https://www.jianshu.com/p/fd51cb8dc03b" target="_blank" rel="external">fxliutao的博客</a></li><li>之前已经了解到 MVCC只在 <code>READ COMMITTED</code> 和 <code>REPEATABLE READ</code> 两个隔离级别下工作;</li><li>并且根据 <code>read view</code> 的生成原则, 导致在这两个不同隔离级别下, <code>read committed</code> 总是读最新一份快照数据, 而repeatable read 读事务开始时的行数据版本;<ul><li>使得 <code>READ COMMITED</code>   级别能够保证, 只要是当前<strong>语句执行前</strong>已经提交的数据都是可见的**。注意和<code>REPEATABLE READ</code>级别的区!!!</li><li>使得 <code>REPEATABLE READ</code> 级别能够保证, 只要是当前<strong>事务执行前</strong>已经提交的数据都是可见的。</li></ul></li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li><p>一般我们认为MVCC有下面几个特点：</p><ul><li>每行数据都存在一个版本，每次数据更新时都更新该版本</li><li>修改时Copy出当前版本, 然后随意修改，各个事务之间无干扰</li><li>保存时比较版本号，如果成功(commit)，则覆盖原记录, 失败则放弃copy(rollback)</li><li>就是每行都有版本号，保存时根据版本号决定是否成功，<strong>听起来含有乐观锁的味道, 因为这看起来正是，在提交的时候才能知道到底能否提交成功</strong></li></ul></li><li><p>而InnoDB实现MVCC的方式是:</p><ul><li>事务以排他锁的形式修改原始数据</li><li>把修改前的数据存放于undo log，通过回滚指针与主数据关联</li><li>修改成功（commit）啥都不做，失败则恢复undo log中的数据（rollback）</li></ul></li><li><p><strong>二者最本质的区别是</strong>: 当修改数据时是否要<code>排他锁定</code>，如果锁定了还算不算是MVCC？</p></li></ol><ul><li>Innodb的实现真算不上MVCC, 因为并没有实现核心的多版本共存, <code>undo log</code> 中的内容只是串行化的结果, 记录了多个事务的过程, 不属于多版本共存。但理想的MVCC是难以实现的, 当事务仅修改一行记录使用理想的MVCC模式是没有问题的, 可以通过比较版本号进行回滚, 但当事务影响到多行数据时, 理想的MVCC就无能为力了。</li><li>比如, 如果事务A执行理想的MVCC, 修改Row1成功, 而修改Row2失败, 此时需要回滚Row1, 但因为Row1没有被锁定, 其数据可能又被事务B所修改, 如果此时回滚Row1的内容，则会破坏事务B的修改结果，导致事务B违反ACID。 这也正是所谓的 <code>第一类更新丢失</code> 的情况。</li><li>也正是因为InnoDB使用的MVCC中结合了排他锁, 不是纯的MVCC, 所以第一类更新丢失是不会出现了, 一般说更新丢失都是指第二类丢失更新。</li></ul><h2 id="本文主要参考和引用如下文章"><a href="#本文主要参考和引用如下文章" class="headerlink" title="本文主要参考和引用如下文章"></a>本文主要参考和引用如下文章</h2><blockquote><p><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-multi-versioning.html" target="_blank" rel="external">MySQL官方对InnoDB-MVCC的解释</a><br><a href="https://www.jianshu.com/p/fd51cb8dc03b" target="_blank" rel="external">fxliutao的博客</a>然后结合自己的理解重新整理了一篇新的文章;</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MVCC&quot;&gt;&lt;a href=&quot;#MVCC&quot; class=&quot;headerlink&quot; title=&quot;MVCC&quot;&gt;&lt;/a&gt;MVCC&lt;/h2&gt;&lt;p&gt;(Multiversion Concurrency Control)&lt;br&gt;1.先引用《高性能MySQL》中对MVCC的部分
      
    
    </summary>
    
      <category term="MySQL" scheme="http://blog.renyimin.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://blog.renyimin.com/tags/MySQL/"/>
    
      <category term="事务" scheme="http://blog.renyimin.com/tags/%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="MVCC" scheme="http://blog.renyimin.com/tags/MVCC/"/>
    
  </entry>
  
  <entry>
    <title>MySQL(INNODB引擎)高并发事务问题及解决方案</title>
    <link href="http://blog.renyimin.com/2017/12/27/2017-12-27-mysql_transaction-01/"/>
    <id>http://blog.renyimin.com/2017/12/27/2017-12-27-mysql_transaction-01/</id>
    <published>2017-12-27T13:01:07.000Z</published>
    <updated>2018-01-02T07:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事务的概念"><a href="#事务的概念" class="headerlink" title="事务的概念"></a>事务的概念</h2><ol><li><p><code>事务</code> 可以理解为一个 <code>独立的</code>工作单元, 在这个独立的工作单元中, 有一组操作; 放在事务(独立工作单元)中的多个操作, 要么全部执行成功, 要么全部执行失败。</p></li><li><p>不免俗套, 这还是通过最经典的银行<code>转账</code>应用来解释一下</p><ul><li><p>假设有两个角色 ‘Iron Man’(余额500), ‘Wolverine’(余额15), 现在 <code>Iron Man</code> 通过该银行应用给 <code>Wolverine</code> 转账100元, 那么本次转账操作至少需要三个步骤:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">检查`Iron Man`余额`&gt;=100`元</div><div class="line">从`Iron Man`余额中`-100`元</div><div class="line">给`Wolverine`余额`+100`元</div></pre></td></tr></table></figure></li><li><p><strong>注意</strong>: 上面的三个步骤的操作必须打包在一个事务中, 从而可以作为一个 <code>独立的工作单元</code> 来执行。在这个 <code>独立工作单元</code>(即事务) 中的这三个操作, 只要有任何一个操作失败, 则事务就整体就是失败的, 那就必须回滚所有的步骤。</p></li><li>假设第二步操作成功, 但是第三步操作失败, 那么整个事务也就应该是失败的, 那就必须将第二步的操作也回滚。(到这里我们也看到了事务最基本的特性之一: <strong>保证数据的一致性</strong>)</li></ul></li><li><p>要知道, 在真实的高并发场景下, 事务需要做的事情其实很多很多, 因为高并发会出现很多意想不到的问题, 接下来会分析这些问题。</p></li></ol><h2 id="事务的ACID特性"><a href="#事务的ACID特性" class="headerlink" title="事务的ACID特性"></a>事务的ACID特性</h2><p>在分析高并发事务的问题前, 我们要先知道事务的几个标准特性, 因为一个运行良好的事务处理系统必须具备这些标准特性, 而且这些问题的解决离不开事务的这几个标准特性!!! </p><ol><li><p>Atomicity 原子性<br> 一个事务必须被视为<code>一个不可分割的最小工作单元</code>, 整个事务中的所有操作要么全部提交成功, 要么全部失败回滚。对于一个事务来说, 不能只成功执行其中的一部分操作, 这就是事务的原子性。</p></li><li><p>Consistency 一致性<br> 虽然可数据表中的数据可能一直在变化, 但是事务的<code>一致性</code>特性会保证 <strong>数据库总是从一个一致性的状态 转换到 另一个一致性的状态</strong>;<br> 比如在之前的转账例子:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">转账前的一致性状态是: &apos;Iron Man&apos;(余额500), &apos;Wolverine&apos;(余额15)</div><div class="line">转账成功后的一致性状态是: &apos;Iron Man&apos;(余额400), &apos;Wolverine&apos;(余额115)</div><div class="line">转账如果失败的话, 一致性的状态应该回滚到转账前的状态: &apos;Iron Man&apos;(余额500), &apos;Wolverine&apos;(余额15)</div></pre></td></tr></table></figure></li></ol><ol><li><p><strong>Isolation 隔离性</strong></p><ul><li><p><strong>通常来说</strong>, 一个事务所做的修改在最终提交以前, 对其他事务是不可见的;<br>比如在之前的转账例子中, 在执行完成第二步, 但是第三步还没开始的时候, 此时有另一个账户汇总的程序开始运行, 那么这个程序所拿到的A账户余额应该是没有被 <code>-100</code> 的余额才对</p></li><li><p>后面我们还会详细讨论事务<code>隔离性</code>的 <code>隔离级别</code>, 到时候就知道这里为什么说<code>通常来说</code>对其他事务是不可见的; (也就是还有特例, 比如最低隔离级别 <code>READ UNCOMMITTED</code>, 对其他事务的可见就造成了<code>脏读问题</code>的出现)</p></li><li><p>事务有四种隔离级别(从低到高: <code>READ UNCOMMITTED</code>, <code>READ COMMITTED</code>, <code>REPEATABLE READ</code>, <code>SERIALIZABLE</code>)</p></li></ul></li><li><p>Durability 持久性<br> 一旦事务被最终提交, 则在事务这个独立单元中的所有操作所做的修改将会 <code>永久保存到数据库中</code>; (这里所说的<code>永久</code>可以理解为 被事务修改的数据 是真正存放到了表中, 而不是存放在了诸如临时表之类的地方。)</p></li></ol><h2 id="高并发事务的问题"><a href="#高并发事务的问题" class="headerlink" title="高并发事务的问题"></a>高并发事务的问题</h2><p>在并发量比较大的时候, 很容易出现 <strong>多个事务同时进行</strong> 的情况。假设有两个事务正在同时进行, <strong>值得注意的是</strong>: 它们两者之间是互相不知道对方的存在的, 各自都对自身所处的环境<strong>过分乐观</strong>, 从而并没有对自己所操作的数据做一定的保护处理, 所以<strong>最终导致了一些问题的出现</strong>;<br>接下来, 在分析高并发事务的问题时, 你可能已经了解了一些关于锁的概念, 但是在分析这些问题的时候, 先不要带入锁的概念, 本小节只会列出问题, 并直接告诉你各个问题是<strong>使用事务隔离性的哪个隔离级别解决掉的</strong>, 锁是解决方案, 如果带入锁的概念, 是无法去分析这些问题的。<strong>所以本节不需要带入<code>锁</code></strong>!<br><a href="">下一篇文章</a>将会分析这些解决方案(各隔离级别)具体是如何解决问题的。</p><h3 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h3><ol><li><p>如果mysql中一个事务A读取了另一个并行事务B未最终提交的写数据, 那事务A的这次读取就是<code>脏读</code>。(因为事务A读取的是’脏数据’, 是’非持久性’的数据)</p><ul><li>之所以说是’非持久性数据’, ‘脏数据’, 是因为事务B最终可能会因为内部其他后续操作的失败或者系统后续突然崩溃等原因, 导致事务最终整体提交失败, 那么事务A此时读取到的数据在表中其实会被回滚, 那事务A拿到的自然就是脏的数据了。</li><li>图示:<br><img src="/img/mysql/transaction/dirty_read.png" width="608" height="190"></li></ul></li><li><p>事务A在T4阶段读取库存为20, 这个库存其实就属于<code>脏数据</code>, 因为事务B最终会回滚这个数据, 所以如果事务A使用库存20进行后续的操作, 就会引发问题, 因为事务A拿到的数据已经和表中的真实数据不一致了。</p></li><li><p>那么这个问题如何解决呢?<br> 在MySQL中, 其实事务已经用自身特性（<code>隔离性</code>的 – <code>READ COMMITED</code>或以上隔离级别）解决了这个问题;<br> <strong><code>READ COMMITED</code>级别保证了, 只要是当前语句执行前已经提交的数据都是可见的</strong>。注意和<code>REPEATABLE READ</code>级别的区!!!</p></li></ol><h3 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h3><ol><li><p>假设现在上面的 <code>脏读问题</code> 已经被完全解决了, 那就意味着事务中每次读取到的数据都是 <code>持久性</code> 的数据(被别的事务最终 提交/回滚 完成后的数据)。</p></li><li><p>但是你还需要知道的是: 解决了脏读问题, 只是能保证你在事务中每次读到的数据都是持久性的数据而已!!!!</p></li><li><p>如果在一个事务中多次读取同一个数据, 正好在两次读取之间, 另外一个事务确实已经完成了对该数据的修改并提交, 那问题就来了: 可能会出现多次读取结果不一致的现象。<br><img src="/img/mysql/transaction/bukechongfudu.png" width="607" height="204"></p></li><li><p>那么这个问题如何解决呢?<br> 在MySQL中, 其实事务已经用自身特性（<code>隔离性</code>的 – <code>REPEATABLE READ</code>或以上隔离级别）解决了这个问题;<br> <strong><code>REPEATABLE READ</code>级别保证了, 只要是当前事务执行前已经提交的数据都是可见的</strong>。注意和<code>READ COMMITED</code>级别的区!!!</p></li></ol><h3 id="幻读-间隙锁"><a href="#幻读-间隙锁" class="headerlink" title="幻读 (间隙锁)"></a>幻读 (间隙锁)</h3><ol><li><p>由于很多人(当然也包括本人), 容易搞混 <code>不可重复读</code> 和 <code>幻读</code> , 这两者确实非常相似。</p><ul><li>但 <code>不可重复读</code> 的重点是针对 <code>update</code>, <code>delete</code>。 </li><li>而 <code>幻读</code> 的重点针对的是 <code>insert</code>。(可以参考<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-next-key-locking.html" target="_blank" rel="external">MySQL官方文档对 Phantom Rows 的介绍</a>)</li></ul></li><li><p>虽然网上有不少资料提到<code>幻读</code>, 但是可能表达的都不太准确, 比如这样一段对幻读的解释 ‘同样的条件, 第一次和第二次读出来的记录不一样’ 在网络上随处可见, 但其实并不准确, 因为 <code>delete</code> 其实并不是幻读的范畴(<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-next-key-locking.html" target="_blank" rel="external">MySQL官方文档对 Phantom Rows 的介绍</a>)也一点都没涉及到<code>delete</code>)。</p></li><li><p>如果<code>手动加锁</code>来演示, 你便会看清他们的本质:</p><ul><li><p>如果 <code>insert</code>, 则操作被阻塞, 并且可以看到具体加的是<code>X锁+GAP锁</code>:<br><img src="/img/mysql/transaction/huandu_01.png" width="600" height="425"><br><img src="/img/mysql/transaction/huandu_02.png" width="486" height="345"></p></li><li><p>如果 <code>delete</code>或者<code>update</code>, 则操作被阻塞, 但是可以看到具体加的只有<code>X锁</code>:<br><img src="/img/mysql/transaction/huandu_03.png" width="600" height="425"><br><img src="/img/mysql/transaction/huandu_04.png" width="475" height="335"></p></li><li><p>可以看到, 其他事务只有在 <code>insert</code> 的时候, 才会加GAP锁来防止幻读!所以delete/update 和 insert 此处是要区分开的。</p></li></ul></li><li><p>不过, 后面学到mvcc的时候, 你会知道<strong>加锁的低效性</strong>, 所以<strong>还有两种</strong>解决方案:</p><ul><li>使用<code>隔离性</code>的最高隔离级别<code>SERIALIZABLE</code>, 但该隔离级别在实际中很少使用;</li><li>其实 <code>REPEATABLE READ</code> 就可以防止幻读, 《高性能MySQL》中也说了, REPEATABLE READ 理论是是不能防止<code>幻读</code>的, 但是由于该隔离级别还使用了MVCC, 可以做到非锁定一致性读取, 所以, 只要你真的确定你明白<code>幻读</code>的意思, 你在 <code>REPEATABLE READ</code>隔离级别下是模拟不出幻读效果的;</li></ul></li><li><p>至于<strong>网络上如下所谓的幻读现象</strong>, 本人觉得是<strong>误导</strong>, 刚开始本人也认为这就是<code>REPEATABLE-READ</code>隔离级别无法解决<code>幻读</code>的铁证, 后来发现错了, <code>幻读</code>是指两次读操作发现记录<code>增多</code>导致的不一致, 而如下是多次<code>insert</code>, 虽然也是个问题, 但已经不是 <code>幻读</code> 问题了:</p><ul><li><p>打开客户端1查看隔离级别及初始数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SELECT @@SESSION.tx_isolation;</div><div class="line">+------------------------+</div><div class="line">| @@SESSION.tx_isolation |</div><div class="line">+------------------------+</div><div class="line">| REPEATABLE-READ        |</div><div class="line">+------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"> </div><div class="line">mysql&gt; select * from test_transaction;</div><div class="line">+----+-----------+-----+--------+--------------------+</div><div class="line">| id | user_name | age | gender | desctiption        |</div><div class="line">+----+-----------+-----+--------+--------------------+</div><div class="line">|  1 | 金刚狼 | 127 |      1 | 我有一双铁爪 |</div><div class="line">|  2 | 钢铁侠 | 120 |      1 | 我有一身铁甲 |</div><div class="line">|  3 | 绿巨人 |   0 |      2 | 我有一身肉    |</div><div class="line">+----+-----------+-----+--------+--------------------+</div><div class="line">3 rows in set (0.00 sec)</div><div class="line"> </div><div class="line">mysql&gt;</div></pre></td></tr></table></figure></li><li><p>打开客户端2查看隔离级别及初始数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SELECT @@SESSION.tx_isolation;</div><div class="line">+------------------------+</div><div class="line">| @@SESSION.tx_isolation |</div><div class="line">+------------------------+</div><div class="line">| REPEATABLE-READ        |</div><div class="line">+------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"> </div><div class="line">mysql&gt; select * from test_transaction;</div><div class="line">+----+-----------+-----+--------+--------------------+</div><div class="line">| id | user_name | age | gender | desctiption        |</div><div class="line">+----+-----------+-----+--------+--------------------+</div><div class="line">|  1 | 金刚狼 | 127 |      1 | 我有一双铁爪 |</div><div class="line">|  2 | 钢铁侠 | 120 |      1 | 我有一身铁甲 |</div><div class="line">|  3 | 绿巨人 |   0 |      2 | 我有一身肉    |</div><div class="line">+----+-----------+-----+--------+--------------------+</div><div class="line">3 rows in set (0.00 sec)</div><div class="line"> </div><div class="line">mysql&gt;</div></pre></td></tr></table></figure></li><li><p>在客户端2中开启事务, 然后查询数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mysql&gt; begin;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"> </div><div class="line">mysql&gt; select * from test_transaction;</div><div class="line">+----+-----------+-----+--------+--------------------+</div><div class="line">| id | user_name | age | gender | desctiption        |</div><div class="line">+----+-----------+-----+--------+--------------------+</div><div class="line">|  1 | 金刚狼 | 127 |      1 | 我有一双铁爪 |</div><div class="line">|  2 | 钢铁侠 | 120 |      1 | 我有一身铁甲 |</div><div class="line">|  3 | 绿巨人 |   0 |      2 | 我有一身肉    |</div><div class="line">+----+-----------+-----+--------+--------------------+</div><div class="line">3 rows in set (0.00 sec)</div><div class="line"> </div><div class="line">mysql&gt;</div></pre></td></tr></table></figure></li><li><p>在客户端1中插入一条id为4的新数据 (直接自动提交)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mysql&gt; insert into test_transaction (`id`,`user_name`,`age`,`gender`,`desctiption`) values (4, &apos;死侍&apos;, 18, 0, &apos;A bad boy&apos;);</div><div class="line">Query OK, 1 row affected (0.00 sec)</div><div class="line">mysql&gt; select * from test_transaction;</div><div class="line">+----+-----------+-----+--------+--------------------+</div><div class="line">| id | user_name | age | gender | desctiption        |</div><div class="line">+----+-----------+-----+--------+--------------------+</div><div class="line">|  1 | 金刚狼 | 127 |      1 | 我有一双铁爪 |</div><div class="line">|  2 | 钢铁侠 | 120 |      1 | 我有一身铁甲 |</div><div class="line">|  3 | 绿巨人 |   0 |      2 | 我有一身肉    |</div><div class="line">|  4 | 死侍    |  18 |      0 | A bad boy          |</div><div class="line">+----+-----------+-----+--------+--------------------+</div><div class="line">4 rows in set (0.00 sec)</div><div class="line"> </div><div class="line">mysql&gt;</div></pre></td></tr></table></figure></li><li><p>在客户端2事务中再次查询数据, 发现数据没有变化(表示<strong>可以重复读, 并且克服了幻读</strong>), 但是在客户端2事务中插入一条id为4的新数据, 发现提示数据已经存在, <strong>注意, 虽然爆出问题来了, 但不是 <code>幻读</code> 范畴</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">mysql&gt; begin;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"> </div><div class="line">mysql&gt; select * from test_transaction;</div><div class="line">+----+-----------+-----+--------+--------------------+</div><div class="line">| id | user_name | age | gender | desctiption        |</div><div class="line">+----+-----------+-----+--------+--------------------+</div><div class="line">|  1 | 金刚狼 | 127 |      1 | 我有一双铁爪 |</div><div class="line">|  2 | 钢铁侠 | 120 |      1 | 我有一身铁甲 |</div><div class="line">|  3 | 绿巨人 |   0 |      2 | 我有一身肉    |</div><div class="line">+----+-----------+-----+--------+--------------------+</div><div class="line">3 rows in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; select * from test_transaction;</div><div class="line">+----+-----------+-----+--------+--------------------+</div><div class="line">| id | user_name | age | gender | desctiption        |</div><div class="line">+----+-----------+-----+--------+--------------------+</div><div class="line">|  1 | 金刚狼 | 127 |      1 | 我有一双铁爪 |</div><div class="line">|  2 | 钢铁侠 | 120 |      1 | 我有一身铁甲 |</div><div class="line">|  3 | 绿巨人 |   0 |      2 | 我有一身肉    |</div><div class="line">+----+-----------+-----+--------+--------------------+</div><div class="line">3 rows in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into test_transaction (`id`,`user_name`,`age`,`gender`,`desctiption`) values (4, &apos;死侍&apos;, 18, 0, &apos;A bad boy&apos;);</div><div class="line">1062 - Duplicate entry &apos;4&apos; for key &apos;PRIMARY&apos;</div><div class="line">mysql&gt;</div></pre></td></tr></table></figure></li></ul></li><li><p>那么这是什么问题呢?<br> 个人认为, 如果你的表中真的会出现两条完全相同的记录, 考虑一下, 最起码的表规范（第二范式）是否先满足一下?</p></li></ol><h2 id="更新丢失"><a href="#更新丢失" class="headerlink" title="更新丢失"></a>更新丢失</h2><ol><li><p>最后聊一下<code>高并发事务</code>的另一个问题 – <code>丢失更新问题</code>, 该问题和之前几个问题需要区分开, 因为解决方案不是一类!</p></li><li><p>第一类丢失更新: A事务撤销时, 把已经提交的B事务的更新数据覆盖了。<br> <img src="/img/mysql/transaction/diushigengxin_01.png" width="608" height="243"><br> 不过, 通过后面<a href="/2017/08/01/2017-08-01-mysql_mvcc/">MVCC相关文章</a>最后的小结你会了解到, 这类更新丢失问题是不会出现的, 因为InnoDB存储引擎的隔离级别都使用了排他锁, 即使是 MVCC也不是纯MVCC, 也用到了排他锁! 这样的话事务A在未完成的时候, 其他事务是无法对事务A涉及到的数据做修改并提交的。</p></li><li><p>第二类丢失更新: A事务覆盖B事务已经提交的数据，造成B事务所做操作丢失。<br> <img src="/img/mysql/transaction/diushigengxin_02.png" width="608" height="246"><br> 此类更新丢失问题, 无法依靠前三种隔离级别来解决, 只能用最高隔离级别 <code>Serializable</code> 或者手动使用<code>乐观锁</code>, <code>悲观锁</code>来解决。</p></li><li><p>最高隔离级别<code>Serializable</code>在实际应用场景中并不被采用, 对于手动使用<code>乐观锁</code>, <code>悲观锁</code>的方案, 将会在以后关于锁的文章中一并给出!</p></li></ol><p>参考资料:</p><ul><li>《高性能MySQL》</li><li><a href="https://tech.meituan.com/innodb-lock.html" target="_blank" rel="external">美团技术博客</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;事务的概念&quot;&gt;&lt;a href=&quot;#事务的概念&quot; class=&quot;headerlink&quot; title=&quot;事务的概念&quot;&gt;&lt;/a&gt;事务的概念&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;事务&lt;/code&gt; 可以理解为一个 &lt;code&gt;独立的&lt;/code&gt;工作单元, 在这个
      
    
    </summary>
    
      <category term="MySQL" scheme="http://blog.renyimin.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://blog.renyimin.com/tags/MySQL/"/>
    
      <category term="事务" scheme="http://blog.renyimin.com/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Django URL反向解析</title>
    <link href="http://blog.renyimin.com/2017/11/13/2017-11-13-Django-04/"/>
    <id>http://blog.renyimin.com/2017/11/13/2017-11-13-Django-04/</id>
    <published>2017-11-13T14:30:27.000Z</published>
    <updated>2017-12-15T08:24:14.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><ol><li>流程</li><li>基本配置</li><li>路由系统</li><li>视图view</li><li>模板</li><li>Model</li><li>中间件</li><li>Form<br>认证系统<br>CSRF<br>分页<br>Cookie<br>Seesion<br>缓存<br>序列化<br>信号<br>admin</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;错误处理&quot;&gt;&lt;a href=&quot;#错误处理&quot; class=&quot;headerlink&quot; title=&quot;错误处理&quot;&gt;&lt;/a&gt;错误处理&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;流程&lt;/li&gt;
&lt;li&gt;基本配置&lt;/li&gt;
&lt;li&gt;路由系统&lt;/li&gt;
&lt;li&gt;视图view&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="Django" scheme="http://blog.renyimin.com/categories/Django/"/>
    
    
      <category term="Django" scheme="http://blog.renyimin.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django URL反向解析</title>
    <link href="http://blog.renyimin.com/2017/11/13/2017-11-13-Django-03/"/>
    <id>http://blog.renyimin.com/2017/11/13/2017-11-13-Django-03/</id>
    <published>2017-11-13T14:30:25.000Z</published>
    <updated>2017-12-18T02:41:00.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li>在使用Django项目时, 在视图view, 模板template….等地方都会要求获得URL的最终形式, 此时就需要注意, 不要硬编码这些URL(费力、不可扩展且容易产生错误);</li><li><p>在Django中, 要做URL反查, 首先要对你的URL模式进行命名:<br> 也就是在<code>URLConf</code>的<code>urlpatterns</code>list使用<code>url()</code>的关键字参数<code>name</code>对你的URL模式进行命名;</p></li><li><p><strong>Django在项目的不同层级, 提供了不同的工具用于URL反查:</strong></p><ul><li>在模板中: 使用<code>url模板标签</code>;</li><li>在Python代码中: 使用 <code>django.core.urlresolvers.reverse()</code> 函数;</li><li>在更高层的与处理Django模型实例相关的代码中: 使用 <code>get_absolute_url()</code> 方法;</li></ul></li></ol><h4 id="URL模式的命名"><a href="#URL模式的命名" class="headerlink" title="URL模式的命名"></a>URL模式的<code>命名</code></h4><ol><li>URL模式的名称所用的字符串可以包含任何你喜欢的字符, 并不仅限于合法的Python名称;</li><li>随着应用的增多, URL模式的名称容易冲突, 你不同的应用中可能都会出现 <code>url(r&#39;detail/$&#39;, views.detail, name=&#39;detail&#39;),</code> 中<code>detail</code>这个命名, 这样就出现URL模式同名的问题, 因为Django无法知道使用<code>detail</code>到底想获得哪个URL;</li><li>当然, 在URL名称中加上一个前缀, 比如应用的名称, 将减少冲突的可能, 比如 <code>detail</code> 可以改为 <code>polls-detail</code>, 但是这显然不是最好的方法是, 建议使用<strong>命名空间</strong>;</li></ol><h4 id="URL-命名空间"><a href="#URL-命名空间" class="headerlink" title="URL 命名空间"></a>URL 命名空间</h4><ol><li>URL命名空间允许你反查到唯一的命名URL模式, <strong>即使不同的应用使用相同的URL名称</strong>;</li><li>使用URL命名空间的话, 就需要在根URLConf中使用include引入每个应用的URLConf文件; </li><li>一个URL命名空间有两个部分: <code>应用命名空间 app_name</code> 和 <code>实例命名空间 namespace</code>;</li></ol><h5 id="实例命名空间-namespace"><a href="#实例命名空间-namespace" class="headerlink" title="实例命名空间 namespace"></a>实例命名空间 <code>namespace</code></h5><ol><li>实例命名空间是通过include()的<code>namespace</code>关键字参数来设定;</li><li>实例命名空间其实是应用命名空间的下级, 所以理论上, 同一应用下的不同实例由于具有相同的应用命名空间, 则不同应用应该可以使用相同的实例命名空间;<br> 但事实上, <strong>实例命名空间在你所有项目中都需要是唯一的</strong>;<br> 如果<code>实例命名空间</code>的命名有冲突, 则会报错: <code>WARNINGS: ?: (urls.W005) URL namespace &#39;test1_index&#39; isn&#39;t unique. You may not be able to reverse all URLs in this namespace</code></li><li><code>实例命名空间</code>可以和<code>应用命名空间名称</code>一样, 这样的话, 如果你使用<code>应用命名空间</code>获取URL的话, 会走根URLConf中这个默认的URL规则;</li><li>使用<code>实例命名空间</code>反查URL的时候, 会直接在根URLConf中找到namespace相等的唯一URL规则, 然后再和应用的views中的URL模式名name进行匹配;</li><li>例子:</li></ol><h5 id="应用命名空间-app-name"><a href="#应用命名空间-app-name" class="headerlink" title="应用命名空间 app_name"></a>应用命名空间 app_name</h5><ol><li>应用命名空间是通过include()的<code>app_name</code>关键字参数来设定;</li><li>不管是在模板中获取URL还是在Python中获取URL, 如果使用的是 <code>应用命名空间app_name:URL模式名</code> 则会先在根URLConf中选中app_name相等的那些URL规则, 然后查看是否有默认的URL(即, namespace=app_name的), 否则就找到这些URL规则的最后一条规则, 然后再和应用的views中的URL模式名name进行匹配;</li><li>注意, 使用reverse()获取URL的时候, 可以通过<code>current_app</code>来设置应用当前的namespace: <code>reverse(&#39;app1:index&#39;, current_app=&#39;third&#39;)</code>;</li></ol><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ol><li>创建两个应用 <code>test</code>, <code>test1</code> (注意完事在<code>INSTALLED_APPS</code>中配置好应用的名字)</li><li><p>根URLConf:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include, url</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^test/1/'</span>, include(<span class="string">'test.urls'</span>, namespace=<span class="string">'test_index'</span>, app_name=<span class="string">'test'</span>)),</div><div class="line">    url(<span class="string">r'^test/2/'</span>, include(<span class="string">'test.urls'</span>, namespace=<span class="string">'test_redirect'</span>, app_name=<span class="string">'test'</span>)),</div><div class="line"></div><div class="line">    url(<span class="string">r'^test1/3/'</span>, include(<span class="string">'test1.urls'</span>, namespace=<span class="string">'test1_index'</span>, app_name=<span class="string">'test1'</span>)),</div><div class="line">    url(<span class="string">r'^test1/4/'</span>, include(<span class="string">'test1.urls'</span>, namespace=<span class="string">'test1_detail'</span>, app_name=<span class="string">'test1'</span>)),</div><div class="line">    url(<span class="string">r'^test1/5/'</span>, include(<span class="string">'test1.urls'</span>, namespace=<span class="string">'test1_redirect'</span>, app_name=<span class="string">'test1'</span>)),</div><div class="line"></div><div class="line">    url(<span class="string">r'^test/6/'</span>, include(<span class="string">'test.urls'</span>, namespace=<span class="string">'test'</span>, app_name=<span class="string">'test'</span>)),</div><div class="line">    url(<span class="string">r'^test/7/'</span>, include(<span class="string">'test.urls'</span>, namespace=<span class="string">'test_detail'</span>, app_name=<span class="string">'test'</span>)),</div><div class="line">    url(<span class="string">r'^test1/8/'</span>, include(<span class="string">'test1.urls'</span>, namespace=<span class="string">'test1'</span>, app_name=<span class="string">'test1'</span>)),</div><div class="line">]</div></pre></td></tr></table></figure></li><li><p>设置每个应用的URLConf文件如下:</p><ul><li><p>test/urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'index/$'</span>, views.index, name=<span class="string">'index'</span>),</div><div class="line">    url(<span class="string">r'detail/$'</span>, views.detail, name=<span class="string">'detail'</span>),</div><div class="line">    url(<span class="string">r'redirect/$'</span>, views.redirect, name=<span class="string">'redirect'</span>),</div><div class="line">]</div></pre></td></tr></table></figure></li><li><p>test1/urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'index/$'</span>, views.index, name=<span class="string">'index'</span>),</div><div class="line">    url(<span class="string">r'detail/$'</span>, views.detail, name=<span class="string">'detail'</span>),</div><div class="line">    url(<span class="string">r'redirect/$'</span>, views.redirect, name=<span class="string">'redirect'</span>),</div><div class="line">]</div></pre></td></tr></table></figure></li></ul></li><li><p>每个应用的views如下:</p><ul><li><p>test/views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</div><div class="line"><span class="keyword">from</span> django.core.urlresolvers <span class="keyword">import</span> reverse</div><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">return</span> render(request, <span class="string">'test/index.html'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">return</span> render(request, <span class="string">'test/detail.html'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">redirect</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'test_index:index'</span>))</div></pre></td></tr></table></figure></li><li><p>test1/views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</div><div class="line"><span class="keyword">from</span> django.core.urlresolvers <span class="keyword">import</span> reverse</div><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">return</span> render(request, <span class="string">'test1/index.html'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">return</span> render(request, <span class="string">'test1/detail.html'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">redirect</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'test1_index:index'</span>))</div></pre></td></tr></table></figure></li></ul></li><li><p>其他文件…..    </p></li><li><p>结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- `&lt;a href=&quot;&#123;% url &apos;test_detail:index&apos; %&#125;&quot;&gt;test_detail:index&lt;/a&gt;` 会跳转到  `test/7/` --  `index`</div><div class="line">- `reverse(&apos;test_index:index&apos;)` 会跳转到  `test/1/` --  `index`</div><div class="line"></div><div class="line">- `&lt;a href=&quot;&#123;% url &apos;test1_detail:index&apos; %&#125;&quot;&gt;test1_detail:index&lt;/a&gt;` 会跳转到  `test1/4/` --  `index`</div><div class="line">- `reverse(&apos;test1_index:index&apos;)` 会跳转到  `test1/3/` --  `index`</div><div class="line">    </div><div class="line">- `&lt;a href=&quot;&#123;% url &apos;test:index&apos; %&#125;&quot;&gt;test:index&lt;/a&gt;` 跳转到原来的 (这里暂时有点问题, 为什么会跳回原处呢? 不应该和下面一样么)</div><div class="line">- `reverse(&apos;test:index&apos;)` 会跳转到  `test/6/` --  `index`</div><div class="line">- `&lt;a href=&quot;&#123;% url &apos;test:index&apos; %&#125;&quot;&gt;test:index&lt;/a&gt;` 跳转到原来的 (这里暂时有点问题, 为什么会跳回原处呢? 不应该和下面一样么)</div><div class="line">- `reverse(&apos;test:index&apos;)` 会跳转到  `test/8/` --  `index`</div></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;在使用Django项目时, 在视图view, 模板template….等地方都会要求获得URL的最终形式, 此时就需要注意, 不要硬编码这些URL(费力、不可扩展且容易产生错误);&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在Django中, 要做URL反查, 首先要对你的URL
      
    
    </summary>
    
      <category term="Django" scheme="http://blog.renyimin.com/categories/Django/"/>
    
    
      <category term="Django" scheme="http://blog.renyimin.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django URL路由</title>
    <link href="http://blog.renyimin.com/2017/11/13/2017-11-13-Django-02/"/>
    <id>http://blog.renyimin.com/2017/11/13/2017-11-13-Django-02/</id>
    <published>2017-11-13T13:11:25.000Z</published>
    <updated>2017-12-15T01:42:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Django决定要使用的 <code>根URLconf模块</code>, 通常是通过<code>settings.py</code>文件中的<code>ROOT_URLCONF</code>设置的;</p><p><code>URLconf</code>不检查使用了哪种请求方法, 换句话讲, 所有的请求方法–即, 对同一个URL的无论是POST请求、GET请求、或HEAD请求方法等等 —— 都将路由到相同的函数;</p><p>每个捕获的参数都作为一个普通的Python字符串传递给视图, 无论正则表达式使用的是什么匹配方式;</p><p><code>urlpatterns</code> 中的每个正则表达式在第一次访问它们时被编译, 这使得系统相当快;</p><p><code>urlpatterns</code> 变量的语法: <code>urlpatterns</code> 应该是一个<code>url()</code>实例类型的Python列表;</p><h4 id="URL模式捕获-位置参数-及-嵌套位置参数"><a href="#URL模式捕获-位置参数-及-嵌套位置参数" class="headerlink" title="URL模式捕获 位置参数 及 嵌套位置参数"></a>URL模式捕获 <code>位置参数</code> 及 <code>嵌套位置参数</code></h4><p><img src="/img/django/qiantaocanshu.png" width="818" height="350/"></p><h4 id="URL模式捕获-关键字参数"><a href="#URL模式捕获-关键字参数" class="headerlink" title="URL模式捕获 关键字参数"></a>URL模式捕获 <code>关键字参数</code></h4><ol><li>可以使用命名的正则表达式组来捕获URL中的值并以关键字参数传递给视图;<br> 在Python正则表达式中, 命名正则表达式组的语法是<code>(?P&lt;name&gt;pattern)</code>, 其中name是组的名称, pattern 是要匹配的模式;</li><li><p>例子:</p><ul><li><p>代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line">    </div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^articles/2003/$'</span>, views.special_case_2003),</div><div class="line">    url(<span class="string">r'^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/$'</span>, views.year_archive),</div><div class="line">    url(<span class="string">r'^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/$'</span>, views.month_archive),</div><div class="line">    url(<span class="string">r'^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/(?P&lt;day&gt;[0-9]&#123;2&#125;)/$'</span>, views.article_detail),</div><div class="line">]</div></pre></td></tr></table></figure></li><li><p>捕获的值是作为关键字参数, 而不是位置参数, 传递给视图函数的 : </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/articles/2005/03/ 请求将调用views.month_archive(request, year=&apos;2005&apos;, month=&apos;03&apos;)函数，而不是views.month_archive(request, &apos;2005&apos;, &apos;03&apos;)。</div><div class="line">/articles/2003/03/03/ 请求将调用函数views.article_detail(request, year=&apos;2003&apos;, month=&apos;03&apos;, day=&apos;03&apos;)。</div></pre></td></tr></table></figure></li><li><p>在实际应用中, 这意味你的<code>URLconf</code>会更加明晰且不容易产生参数顺序问题的错误;</p></li></ul></li></ol><h4 id="传递额外的-关键字参数-给-视图函数"><a href="#传递额外的-关键字参数-给-视图函数" class="headerlink" title="传递额外的 关键字参数 给 视图函数"></a>传递额外的 <code>关键字参数</code> 给 <code>视图函数</code></h4><ol><li><p>URLconfs 具有一个钩子, 让你传递一个Python字典作为额外的参数传递给视图函数:</p><ul><li>django.conf.urls.url() 函数可以接收一个可选的第三个参数, 它是一个字典, 表示想要传递给视图函数的额外<code>关键字参数</code>;</li><li><p>例如：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^blog/(?P&lt;year&gt;[0-9]&#123;4&#125;)/$'</span>, views.year_archive, &#123;<span class="string">'foo'</span>: <span class="string">'bar'</span>&#125;),</div><div class="line">]</div></pre></td></tr></table></figure></li><li><p>在这个例子中，对于/blog/2005/请求, Django 将调用 <code>views.year_archive(request, year=&#39;2005&#39;, foo=&#39;bar&#39;)</code>;</p></li></ul></li><li><p>处理 命名关键字参数 和 额外参数 的冲突<br> URL模式捕获的命名关键字参数<code>(?P&lt;name&gt;pattern)</code> 和 在字典中传递的 <code>额外参数</code> 有可能具有相同的名称, 当这种情况发生时, 将使用字典中的参数而不是URL中捕获的参数;</p></li></ol><h4 id="传递额外的-关键字参数-给-include"><a href="#传递额外的-关键字参数-给-include" class="headerlink" title="传递额外的 关键字参数 给 include()"></a>传递额外的 <code>关键字参数</code> 给 <code>include()</code></h4><p>include的应用的URLconf中所有的路由都会默认获取到这里的额外选项</p><ol><li><p>类似地, 你可以传递额外的选项给include()<br> 当你传递额外的选项给include() 时, 被包含的URLconf的每一行将被传递这些额外的选项;</p></li><li><p>例如, 下面两个URLconf设置功能上完全相同：</p><ul><li><p>设置一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># main.py</span></div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include, url</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^blog/'</span>, include(<span class="string">'inner'</span>), &#123;<span class="string">'blogid'</span>: <span class="number">3</span>&#125;),</div><div class="line">]</div><div class="line"></div><div class="line"><span class="comment"># inner.py</span></div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"><span class="keyword">from</span> mysite <span class="keyword">import</span> views</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^archive/$'</span>, views.archive),</div><div class="line">    url(<span class="string">r'^about/$'</span>, views.about),</div><div class="line">]</div></pre></td></tr></table></figure></li><li><p>设置二</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># main.py</span></div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include, url</div><div class="line"><span class="keyword">from</span> mysite <span class="keyword">import</span> views</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^blog/'</span>, include(<span class="string">'inner'</span>)),</div><div class="line">]</div><div class="line"></div><div class="line"><span class="comment"># inner.py</span></div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^archive/$'</span>, views.archive, &#123;<span class="string">'blogid'</span>: <span class="number">3</span>&#125;),</div><div class="line">    url(<span class="string">r'^about/$'</span>, views.about, &#123;<span class="string">'blogid'</span>: <span class="number">3</span>&#125;),</div><div class="line">]</div></pre></td></tr></table></figure></li></ul></li><li><p><strong>注意: 额外的选项将永远传递给被包含的URLconf中的每一行</strong>, 无论该行的视图实际上是否认为这些选项是合法的;<br> 由于这个原因, 该技术只有当你确定被包含的URLconf中的每个视图都接收你传递给它们的额外的选项时才有价值;</p></li></ol><h4 id="包含其它的URLconfs"><a href="#包含其它的URLconfs" class="headerlink" title="包含其它的URLconfs"></a>包含其它的<code>URLconfs</code></h4><ol><li><p>你项目的根<code>URLconfs</code>可以包含项目中应用的<code>URLconf</code>模块;</p><ul><li><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">from django.conf.urls import include, url</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    # ... snip ...</div><div class="line">    url(r&apos;^community/&apos;, include(&apos;django_website.aggregator.urls&apos;)),</div><div class="line">    url(r&apos;^contact/&apos;, include(&apos;django_website.contact.urls&apos;)),</div><div class="line">    # ... snip ...</div><div class="line">]</div></pre></td></tr></table></figure></li><li><p>注意: 正则表达式没有包含$(字符串结束匹配符), 但是包含一个末尾的斜杠。每当Django 遇到<code>include()</code>(<code>django.conf.urls.include()</code>)时, 它会去掉URL中匹配的部分,并将剩下的字符串发送给包含的URLconf做进一步处理;</p></li></ul></li><li><p>另外一种包含其它URL模式的方式是使用一个<code>url()</code>实例的列表</p><ul><li><p>例如, 请看下面的URLconf:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">from django.conf.urls import include, url</div><div class="line"></div><div class="line">from apps.main import views as main_views</div><div class="line">from credit import views as credit_views</div><div class="line"></div><div class="line">extra_patterns = [</div><div class="line">   url(r&apos;^reports/(?P&lt;id&gt;[0-9]+)/$&apos;, credit_views.report),</div><div class="line">   url(r&apos;^charge/$&apos;, credit_views.charge),</div><div class="line">]</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">   url(r&apos;^$&apos;, main_views.homepage),</div><div class="line">   url(r&apos;^help/&apos;, include(&apos;apps.help.urls&apos;)),</div><div class="line">   url(r&apos;^credit/&apos;, include(extra_patterns)),</div><div class="line">]</div></pre></td></tr></table></figure></li><li><p>在这个例子中, /credit/reports/ URL将被 <code>credit.views.report()</code> 这个Django 视图处理;</p></li></ul></li><li><p>这可以用于移除URL配置中重复的部分, 例如</p><ul><li><p>考虑这个URLconf：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from django.conf.urls import url</div><div class="line">from . import views</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">   url(r&apos;^(?P&lt;page_slug&gt;[\w-]+)-(?P&lt;page_id&gt;\w+)/history/$&apos;, views.history),</div><div class="line">   url(r&apos;^(?P&lt;page_slug&gt;[\w-]+)-(?P&lt;page_id&gt;\w+)/edit/$&apos;, views.edit),</div><div class="line">   url(r&apos;^(?P&lt;page_slug&gt;[\w-]+)-(?P&lt;page_id&gt;\w+)/discuss/$&apos;, views.discuss),</div><div class="line">   url(r&apos;^(?P&lt;page_slug&gt;[\w-]+)-(?P&lt;page_id&gt;\w+)/permissions/$&apos;, views.permissions),</div><div class="line">]</div></pre></td></tr></table></figure></li><li><p>我们可以改进它，通过只声明共同的路径前缀一次并将后面的部分分组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">from django.conf.urls import include, url</div><div class="line">from . import views</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">   url(r&apos;^(?P&lt;page_slug&gt;[\w-]+)-(?P&lt;page_id&gt;\w+)/&apos;, include([</div><div class="line">       url(r&apos;^history/$&apos;, views.history),</div><div class="line">       url(r&apos;^edit/$&apos;, views.edit),</div><div class="line">       url(r&apos;^discuss/$&apos;, views.discuss),</div><div class="line">       url(r&apos;^permissions/$&apos;, views.permissions),</div><div class="line">   ])),</div><div class="line">]</div></pre></td></tr></table></figure></li></ul></li><li><p><strong>被包含的URLconf会收到来自父URLconf捕获的任何参数</strong></p></li></ol><h4 id="指定视图参数的默认值"><a href="#指定视图参数的默认值" class="headerlink" title="指定视图参数的默认值"></a>指定视图参数的默认值</h4><ol><li><p>有一个方便的小技巧是指定视图参数的默认值, 下面是一个URLconf 和视图的示例:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># URLconf</span></div><div class="line"> <span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"> </div><div class="line"> <span class="keyword">from</span> . <span class="keyword">import</span> views</div><div class="line"> </div><div class="line"> urlpatterns = [</div><div class="line">     url(<span class="string">r'^blog/$'</span>, views.page),</div><div class="line">     url(<span class="string">r'^blog/page(?P&lt;num&gt;[0-9]+)/$'</span>, views.page),</div><div class="line"> ]</div><div class="line">     </div><div class="line"> <span class="comment"># View (in blog/views.py)</span></div><div class="line"> <span class="function"><span class="keyword">def</span> <span class="title">page</span><span class="params">(request, num=<span class="string">"1"</span>)</span>:</span></div><div class="line">     <span class="comment"># Output the appropriate page of blog entries, according to num.</span></div><div class="line">     ...</div></pre></td></tr></table></figure></li><li><p>在上面的例子中, 两个URL模式指向同一个视图views.page – 但是第一个模式不会从URL中捕获任何值。</p><ul><li>如果第一个模式匹配, page()函数将使用num参数的默认值”1”; </li><li>如果第二个模式匹配, page() 将使用正则表达式捕获的num值;</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Django决定要使用的 &lt;code&gt;根URLconf模块&lt;/code&gt;, 通常是通过&lt;code&gt;settings.py&lt;/code&gt;文件中的&lt;code&gt;ROOT_URLCONF&lt;/code&gt;设置的;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;URLconf&lt;/code&gt;不检查使用了哪种请
      
    
    </summary>
    
      <category term="Django" scheme="http://blog.renyimin.com/categories/Django/"/>
    
    
      <category term="Django" scheme="http://blog.renyimin.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>01 - Django入门</title>
    <link href="http://blog.renyimin.com/2017/11/10/2017-11-10-Django-01/"/>
    <id>http://blog.renyimin.com/2017/11/10/2017-11-10-Django-01/</id>
    <published>2017-11-10T11:05:00.000Z</published>
    <updated>2017-12-14T03:09:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python也有很多web框架, 常用的如: <strong>Django</strong>, <strong>Tornado</strong>, <strong>Flask</strong>, Bottle, Pylons 等;</p><h3 id="Django版本的选择"><a href="#Django版本的选择" class="headerlink" title="Django版本的选择"></a>Django版本的选择</h3><ol><li>选择一款 <code>LTS</code> 版本<br> <img src="/img/django/version_01.png" width="480" height="250"></li><li>各版本发布列表<br> <img src="/img/django/version_02.png" width="480" height="270"><br> <img src="/img/django/version_feature.png" width="480" height="300"></li><li>各版本对应python版本的支持情况<br> <img src="/img/django/version_django_python.png" width="477" height="192"></li><li>通过上述了解, 此处采用Django1.11.7版本:</li></ol><h3 id="Django的安装"><a href="#Django的安装" class="headerlink" title="Django的安装"></a>Django的安装</h3><p>本机是Mac系统</p><ol><li><p>直接官网下载源码包</p><ul><li>tar.gz包下载<br>  <img src="/img/django/install_django.png" width="485" height="270"></li><li>解压, 到包中执行 <code>python setup.py install</code></li></ul></li><li><p>github拉取代码 <code>git clone -b stable/1.11.x https://github.com/django/django.git</code></p><ul><li>到包中执行 <code>python setup.py install</code></li></ul></li><li><p>直接 <code>pip install Django==1.11.7</code> 安装;</p><ul><li>注意可能因你安装Python版本的不同, 可能使用 <code>pip</code> 或 <code>pip3</code></li><li>本机在学习阶段, 安装了 <code>Anaconda3</code>(将自己的<code>python3</code>写到了环境变量里), 所以可以直接使用<code>pip</code> </li></ul></li><li><p>如下则安装成功:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import django</div><div class="line">&gt;&gt;&gt; print(django.get_version())</div><div class="line">1.11.7</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></li></ol><h3 id="构建项目及应用"><a href="#构建项目及应用" class="headerlink" title="构建项目及应用"></a>构建项目及应用</h3><ol><li><p>先看一下<code>Django</code>常用基本命令</p><ul><li>django-admin.py startproject 项目名 : 新建项目 (PyCharm professional版可以在创建Django项目时直接执行命令生成目录结构)</li><li>python manage.py  : 查看命令列表</li><li>python manage.py startapp appname  : 新建 app</li><li>python manage.py runserver ip:port  : 启动服务器，默认ip和端口为<a href="http://127.0.0.1:8000/" target="_blank" rel="external">http://127.0.0.1:8000/</a></li><li>python manage.py makemigrations  : 显示并记录所有数据的改动</li><li>python manage.py migrate  : 将改动更新到数据库</li><li>python manage.py sqlmigrate 你的应用名 0001 : 查看迁移文件对用的sql语句</li><li>python manage.py createsuperuser  : 为Django自带简版admin后台系统创建超级管理员账号</li><li>python manage.py dbshell  (数据库命令行)</li></ul></li><li><p>Django自带的开发服务器</p><ul><li>Django包含一个可用于测试的轻量级Web服务器</li><li>python manage.py runserver</li><li>参考: <a href="http://python.usyiyi.cn/documents/django_182/topics/install.html" target="_blank" rel="external">http://python.usyiyi.cn/documents/django_182/topics/install.html</a></li></ul></li><li><p>如果您使用MySQL, 则需要使用<code>DB API driver</code></p><ul><li>参考: <a href="http://python.usyiyi.cn/documents/django_182/topics/install.html" target="_blank" rel="external">http://python.usyiyi.cn/documents/django_182/topics/install.html</a>, <a href="http://python.usyiyi.cn/documents/django_182/ref/databases.html#mysql-db-api-drivers" target="_blank" rel="external">http://python.usyiyi.cn/documents/django_182/ref/databases.html#mysql-db-api-drivers</a></li><li>这里我们可以选择安装 mysqlclient, 但貌似安装过程错误不好解决</li><li>所以选择同一个作者开发的<a href="https://github.com/PyMySQL" target="_blank" rel="external">PyMysql</a>:<br>  <code>pip install pymysql</code><br>  主目录下配置:  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import pymysql</div><div class="line">pymysql.install_as_MySQLdb()</div></pre></td></tr></table></figure></li></ul></li></ol><h3 id="Git拉取Django代码后的问题"><a href="#Git拉取Django代码后的问题" class="headerlink" title="Git拉取Django代码后的问题"></a>Git拉取Django代码后的问题</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Python也有很多web框架, 常用的如: &lt;strong&gt;Django&lt;/strong&gt;, &lt;strong&gt;Tornado&lt;/strong&gt;, &lt;strong&gt;Flask&lt;/strong&gt;, Bottle, Pylons 等;&lt;/p&gt;
&lt;h3 id=&quot;Django版本的
      
    
    </summary>
    
      <category term="Django" scheme="http://blog.renyimin.com/categories/Django/"/>
    
    
      <category term="Django" scheme="http://blog.renyimin.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>04.与调度器之间通信--系统调用</title>
    <link href="http://blog.renyimin.com/2017/05/16/2017-05-16-Iterator-generator-yield-04/"/>
    <id>http://blog.renyimin.com/2017/05/16/2017-05-16-Iterator-generator-yield-04/</id>
    <published>2017-05-16T14:15:00.000Z</published>
    <updated>2017-11-15T03:02:20.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>调度器现在已经正常运行了, 下一个问题是：<strong>任务和调度器之间的通信</strong> ;</p></li><li><p>任务和调度器之间的通信:</p><ul><li><p>我们将使用与 <code>进程和操作系统之间会话</code> 所使用的方式来通信: <code>系统调用</code> ;</p></li><li><p>使用 <code>系统调用</code> 这种通信方式的理由是: 操作系统与进程相比, 两者是处在不同的权限级别上, 操作系统为了执行特权级别的操作(如杀死另一个进程), 就不得不以某种方式把控制传回给内核, 这样内核就可以执行所说的操作了;<br>(再说一遍, 这种行为在内部是通过使用中断指令来实现的, 过去使用的是通用的int指令, 如今使用的是更特殊并且更快速的syscall/sysenter指令)</p></li><li><p>而接下来我们的任务调度系统就要使用这种设计:<br>不是简单地把调度器传递给任务(这样就允许它做它想做的任何事), 我们将通过给yield表达式传递信息来与系统调用通信, 这儿yield既是中断,也是传递信息给调度器(和从调度器传递出信息)的方法;</p></li></ul></li><li><p>代码:</p><ul><li><p>任务类: 和之前没什么变化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> $taskId;</div><div class="line">    <span class="keyword">protected</span> $coroutine;</div><div class="line">    <span class="keyword">protected</span> $sendValue = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">protected</span> $beforeFirstYield = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($taskId, Generator $coroutine)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;taskId = $taskId;</div><div class="line">        <span class="keyword">$this</span>-&gt;coroutine = $coroutine;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTaskId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;taskId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setSendValue</span><span class="params">($sendValue)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;sendValue = $sendValue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;beforeFirstYield) &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;beforeFirstYield = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;coroutine-&gt;current();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;coroutine-&gt;send(<span class="keyword">$this</span>-&gt;sendValue);</div><div class="line">            <span class="keyword">$this</span>-&gt;sendValue = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isFinished</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> !<span class="keyword">$this</span>-&gt;coroutine-&gt;valid();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>系统调用:系统调用是操作系统提供给程序设计人员的一种服务,程序设计人员在编写程序时,可以利用系统调用来请求操作系统的服务</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SystemCall</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> $callback;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(callable $callback)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;callback = $callback;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">(Task $task, Scheduler $scheduler)</span> </span>&#123;</div><div class="line">        $callback = <span class="keyword">$this</span>-&gt;callback;</div><div class="line">        <span class="keyword">return</span> $callback($task, $scheduler);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>调度器: run方法相比之前做了一些修改</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scheduler</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> $taskId = <span class="number">0</span>;</div><div class="line">    <span class="comment">//protected $taskMap = []; // taskId =&gt; task</span></div><div class="line">    <span class="keyword">protected</span> $taskQueue;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;taskQueue = <span class="keyword">new</span> SplQueue();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">newTask</span><span class="params">(Generator $coroutine)</span> </span>&#123;</div><div class="line">        $taskId = ++<span class="keyword">$this</span>-&gt;taskId;</div><div class="line">        $task = <span class="keyword">new</span> Task($taskId, $coroutine);</div><div class="line">        <span class="comment">//$this-&gt;taskMap[$taskId] = $task;</span></div><div class="line"></div><div class="line">        <span class="keyword">$this</span>-&gt;schedule($task);</div><div class="line">        <span class="keyword">return</span> $taskId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">schedule</span><span class="params">(Task $task)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;taskQueue-&gt;enqueue($task);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (!<span class="keyword">$this</span>-&gt;taskQueue-&gt;isEmpty()) &#123;</div><div class="line">            $task = <span class="keyword">$this</span>-&gt;taskQueue-&gt;dequeue();</div><div class="line">            $retval = $task-&gt;run();</div><div class="line">            <span class="comment">//如果yield返回的是个系统调用(每个任务第一次的yield返回的就是个系统调用)</span></div><div class="line">            <span class="keyword">if</span> ($retval <span class="keyword">instanceof</span> SystemCall) &#123;</div><div class="line">                <span class="keyword">echo</span> <span class="number">123</span> . PHP_EOL;</div><div class="line">                $retval($task, <span class="keyword">$this</span>);</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> ($task-&gt;isFinished()) &#123;</div><div class="line">                <span class="comment">//unset($this-&gt;taskMap[$task-&gt;getTaskId()]);</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">$this</span>-&gt;schedule($task);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>测试:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">require_once</span> <span class="string">"task.php"</span>;</div><div class="line"><span class="keyword">require_once</span> <span class="string">"scheduler.php"</span>;</div><div class="line"><span class="keyword">require_once</span> <span class="string">"systemCall.php"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTaskId</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SystemCall(<span class="function"><span class="keyword">function</span><span class="params">(Task $task, Scheduler $scheduler)</span> </span>&#123;</div><div class="line">        $task-&gt;setSendValue($task-&gt;getTaskId());<span class="comment">//这里主要是在任务运行一开始进行的系统调用中设置任务的id, 并将任务继续压栈 (总共就干两件事), </span></div><div class="line">        $scheduler-&gt;schedule($task);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//系统功能调用是操作系统提供给程序设计人员的一种服务。程序设计人员在编写程序时，可以利用系统调用来请求操作系统的服务</span></div><div class="line"><span class="comment">//用户程序只在用户态下运行，有时需要访问`系统核心功能`，这时就需要通过系统调用接口来使用 `系统调用`</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">task</span><span class="params">($max)</span> </span>&#123;</div><div class="line">    $tid = (<span class="keyword">yield</span> getTaskId()); <span class="comment">// &lt;-- here's the syscall!</span></div><div class="line">    <span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt;= $max; ++$i) &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"This is task $tid iteration $i.\n"</span>;</div><div class="line">        <span class="keyword">yield</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$scheduler = <span class="keyword">new</span> Scheduler;</div><div class="line"><span class="comment">//添加两个任务到队列中</span></div><div class="line">$scheduler-&gt;newTask(task(<span class="number">10</span>));</div><div class="line">$scheduler-&gt;newTask(task(<span class="number">5</span>));</div><div class="line"><span class="comment">//运行调度器</span></div><div class="line">$scheduler-&gt;run();</div></pre></td></tr></table></figure></li></ul></li><li><p>结果和之前的简单任务调度一样;</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">renyimin$ php index1.php </div><div class="line"><span class="number">123</span>            <span class="comment">// 可以看到, 总共运行了两次系统调用(每个任务在一开始都是各自运行一次自己的系统调用)</span></div><div class="line"><span class="number">123</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">1.</span>  </div><div class="line">This is task <span class="number">2</span> iteration <span class="number">1.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">2.</span></div><div class="line">This is task <span class="number">2</span> iteration <span class="number">2.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">3.</span></div><div class="line">This is task <span class="number">2</span> iteration <span class="number">3.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">4.</span></div><div class="line">This is task <span class="number">2</span> iteration <span class="number">4.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">5.</span></div><div class="line">This is task <span class="number">2</span> iteration <span class="number">5.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">6.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">7.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">8.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">9.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">10.</span></div></pre></td></tr></table></figure></li></ol><blockquote><p>参考: <a href="http://www.laruence.com/2015/05/28/3038.html" target="_blank" rel="external">http://www.laruence.com/2015/05/28/3038.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;调度器现在已经正常运行了, 下一个问题是：&lt;strong&gt;任务和调度器之间的通信&lt;/strong&gt; ;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;任务和调度器之间的通信:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;我们将使用与 &lt;code&gt;进程和操作系统之间会话&lt;/code
      
    
    </summary>
    
      <category term="PHP高级" scheme="http://blog.renyimin.com/categories/PHP%E9%AB%98%E7%BA%A7/"/>
    
      <category term="Coroutine" scheme="http://blog.renyimin.com/categories/PHP%E9%AB%98%E7%BA%A7/Coroutine/"/>
    
    
      <category term="PHP高级" scheme="http://blog.renyimin.com/tags/PHP%E9%AB%98%E7%BA%A7/"/>
    
      <category term="Coroutine" scheme="http://blog.renyimin.com/tags/Coroutine/"/>
    
  </entry>
  
  <entry>
    <title>03.PHP - 如何使用协程来实施任务调度</title>
    <link href="http://blog.renyimin.com/2017/05/16/2017-05-16-Iterator-generator-yield-03/"/>
    <id>http://blog.renyimin.com/2017/05/16/2017-05-16-Iterator-generator-yield-03/</id>
    <published>2017-05-16T11:25:00.000Z</published>
    <updated>2017-11-29T19:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>从之前的知识可以了解到, 其实<code>(迭代器)生成器</code> 也只不过是一个函数, <strong>不同的是这个函数的返回值是依次返回, 而不是只返回一个单独的值</strong>; (也就是说, 生成器使你更方便的实现了迭代器) ;</p></li><li><p>生成器为<strong>可中断的函数</strong>, 在它里面的 yield 构成了中断点 ;</p><ul><li>再看一个简单的 <code>迭代生成器</code> 进行双向传输信息的 例子 :  <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">gen</span><span class="params">()</span> </span>&#123;</div><div class="line">    $ret = (<span class="keyword">yield</span> <span class="string">'yield1'</span>);</div><div class="line">    var_dump($ret);</div><div class="line">    $ret = (<span class="keyword">yield</span> <span class="string">'yield2'</span>);</div><div class="line">    var_dump($ret);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">$gen = gen();</div><div class="line">var_dump($gen-&gt;current());    <span class="comment">// string(6) "yield1"</span></div><div class="line">var_dump($gen-&gt;send(<span class="string">'ret1'</span>)); <span class="comment">// string(4) "ret1"   (the first var_dump in gen)</span></div><div class="line">                              <span class="comment">// string(6) "yield2" (the var_dump of the -&gt;send() return value)</span></div><div class="line">var_dump($gen-&gt;send(<span class="string">'ret2'</span>)); <span class="comment">// string(4) "ret2"   (again from within gen)</span></div><div class="line">                              <span class="comment">// NULL               (the return value of -&gt;send())</span></div></pre></td></tr></table></figure></li></ul></li><li><p><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432090171191d05dae6e129940518d1d6cf6eeaaa969000" target="_blank" rel="external">那么什么是协程(Coroutine)</a>？</p><ul><li><p><strong><code>协程</code>, 又称<code>微线程</code>, <code>纤程</code>, 英文名<code>Coroutine</code> </strong></p></li><li><p>和多线程相比, 协程的优势?<br>（1）最大的优势就是协程极高的执行效率, 因为子程序切换不是线程切换, 而是由程序自身控制, 因此, 没有线程切换的开销; 所以, 和多线程比, 当应用的线程数量越多, 换成协程的话, 性能优势就越明显;</p><p>（2）第二大优势就是不需要多线程的锁机制, 因为只有一个线程, 也不存在同时写变量冲突, 在协程中控制共享资源不加锁, 只需要判断状态就好了, 所以执行效率比多线程高很多;</p></li></ul><ul><li><p>协程是在应用程序的层面进行切换, 而不是线程级的切换, 所以切换带来的开销很小;</p></li><li><p><strong>多进程+协程</strong><br>因为协程是一个线程执行, 那怎么利用多核CPU呢?<br>最简单的方法是<strong>多进程+协程</strong>, 既充分利用多核, 又充分发挥协程的高效率, 可获得极高的性能。</p></li><li><p><code>协程（coroutine</code>）跟具有操作系统概念的线程不一样, 实际上协程就是类函数一样的程序组件, 你可以在一个线程里面轻松创建数十万个协程,就像数十万次函数调用一样。只不过函数只有一个调用入口起始点, 返回之后就结束了, 而协程入口既可以是起始点, 又可以从上一个返回点继续执行, 也就是说协程之间可以通过 yield 方式转移执行权, 对称（symmetric）、平级地调用对方, 而不是像函数那样上下级调用关系;<br>当然协程也可以模拟函数那样实现上下级调用关系, 这就叫非对称协程（asymmetric coroutines）;</p></li></ul></li><li><p>注意：</p><ul><li>yield表达式两边的括号在PHP7以前不是可选的, 也就是说在PHP5.5和PHP5.6中圆括号是必须的 ;</li><li>….</li></ul></li><li><p>协程特点:</p><ul><li>为应用层实现多任务提供了工具; </li><li>协程不允许多任务同时执行，要执行其它协程，必须使用关键字yield主动放弃cpu控制权; </li><li>协程需要自己写任务管理器，以及任务调度器； </li><li>减轻了OS处理零散任务和轻量级任务的负</li></ul></li><li><p>使用协程实现<strong>多任务协作</strong>，我们要解决的问题是你想并发地运行多任务(或者”程序”), 不过我们都知道CPU在一个时刻只能运行一个任务(不考虑多核的情况), 因此处理器需要在不同的任务之间进行切换,而且总是让每个任务运行 <code>一小会儿</code> ;</p><p><strong>多任务协作</strong> 这个术语中的”协作”很好的说明了如何进行这种切换的: 首先, 我们是通过调度器来调度每个任务运行的, 它而所谓协作就是要求当前正在运行的任务自动把控制传回给<code>调度器</code>, 这样就调度器就可以调度其他任务来运行了 ;</p></li><li><p>现在你应当明白 <code>协程</code> 和 <code>任务调度</code> 之间的关系:</p><ul><li>yield指令提供了任务中断自身的一种方法, 然后把控制交回给任务调度器, 因此协程可以运行多个任务; 更进一步, yield还可以用来在任务和调度器之间进行通信 ;</li><li>可以这么理解 :<br>调度器在调度任务的时候, 是通过模拟一个队列, 然后将使用调度器创建任务(其实就是将多个任务压栈), 之后由于每个任务执行一次就会执行<code>出栈</code>, <strong>并且就任务会通过yield中断当前任务并将控制权交给调度器</strong>, 调度器就可以通过这样就实现了轮询的方式执行多个任务 ; </li></ul></li><li><p>小疑问:</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">gen</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'foo'</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'bar'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$gen = gen();</div><div class="line">var_dump($gen-&gt;send(<span class="string">'something'</span>));</div></pre></td></tr></table></figure><p> // 鸟哥博客相关讨论小结:<br> // 在send之前, 如果没有显示地调用current, 那么当$gen迭代器被创建的时候一个rewind()方法已经被隐式调用<br> // 所以实际上发生的应该类似:</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">gen</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'foo'</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'bar'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$gen = gen();</div><div class="line">var_dump($gen-&gt;rewind());       <span class="comment">//不过可惜的是, rewind的执行将虽然会导致第一个yield被执行, 但是却会忽略他的返回值.</span></div><div class="line">var_dump($gen-&gt;send(<span class="string">'something'</span>));   <span class="comment">// 真正当我们调用yield的时候, 我们得到的是第二个yield的值! 导致第一个yield的值被忽略.</span></div></pre></td></tr></table></figure></li><li><p>先看一个简单的任务调度程序: 通过模拟cpu轮询来调度两个 循环打印的任务</p><ul><li><p>任务类: 主要作用是在其内部将<code>一个用轻量级的包装的协程函数</code>手动进行迭代</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> $taskId;</div><div class="line">    <span class="keyword">protected</span> $coroutine;</div><div class="line">    <span class="keyword">protected</span> $sendValue = <span class="keyword">null</span>;   <span class="comment">//在此处暂时还没有用</span></div><div class="line"> </div><div class="line">    <span class="comment">//通过添加 firstYieldTag 我们可以保证第一处 yield 的值能被正确返回, 因为之前我们已经了解到:</span></div><div class="line">    <span class="comment">//对生成器生成的迭代器进行手动迭代的话, 如果在send之前, 没有显示地调用current, 那么当迭代器被创建的时候一个rewind会默认执行, 但是不会有返回;</span></div><div class="line">    <span class="comment">//所以针对第一处yield, 要想看到返回值, 我们需要手动调用current</span></div><div class="line">    <span class="keyword">protected</span> $firstYieldTag = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($taskId, Generator $coroutine)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;taskId = $taskId;</div><div class="line">        <span class="keyword">$this</span>-&gt;coroutine = $coroutine;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTaskId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;taskId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 使用setSendValue()方法, 你可以指定哪些值将被发送到下次的恢复(现在暂时不会用到, 在之后会用到)</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setSendValue</span><span class="params">($sendValue)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;sendValue = $sendValue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//其实就是在这个run方法中做的手动迭代</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;firstYieldTag) &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;firstYieldTag = <span class="keyword">false</span>;  <span class="comment">// 第一次调用之后就进行标识</span></div><div class="line">            <span class="keyword">$this</span>-&gt;coroutine-&gt;current();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;coroutine-&gt;send(<span class="keyword">$this</span>-&gt;sendValue);</div><div class="line">            <span class="keyword">$this</span>-&gt;sendValue = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isFinished</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> !<span class="keyword">$this</span>-&gt;coroutine-&gt;valid();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>调度器类:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scheduler</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> $taskId = <span class="number">0</span>;</div><div class="line">    <span class="comment">//protected $taskMap = []; // taskId =&gt; task</span></div><div class="line">    <span class="keyword">protected</span> $taskQueue;</div><div class="line"></div><div class="line">    <span class="comment">//调度器初始化其实就是简单创建了一个队列</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;taskQueue = <span class="keyword">new</span> SplQueue();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">newTask</span><span class="params">(Generator $coroutine)</span> </span>&#123;</div><div class="line">        $taskId = ++<span class="keyword">$this</span>-&gt;taskId;<span class="comment">//简单通过递增的方法来设置 任务的唯一标识 任务id</span></div><div class="line">        $task = <span class="keyword">new</span> Task($taskId, $coroutine);<span class="comment">//通过 任务id 和 迭代器的生成器 来创建任务</span></div><div class="line">        <span class="comment">//将创建好的任务和任务id对应起来 存入数组</span></div><div class="line">        <span class="comment">//$this-&gt;taskMap[$taskId] = $task;</span></div><div class="line">        <span class="keyword">$this</span>-&gt;schedule($task);</div><div class="line">        <span class="keyword">return</span> $taskId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//添加任务到队列</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">schedule</span><span class="params">(Task $task)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;taskQueue-&gt;enqueue($task);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//运行调度器, 这里是模拟cpu并发 轮询执行任务的关键 (通过不断地将任务出栈和压栈)</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//如果任务队列不为空</span></div><div class="line">        <span class="keyword">while</span> (!<span class="keyword">$this</span>-&gt;taskQueue-&gt;isEmpty()) &#123;</div><div class="line">            <span class="comment">//将任务弹出队列 准备运行任务</span></div><div class="line">            $currentTask = <span class="keyword">$this</span>-&gt;taskQueue-&gt;dequeue();</div><div class="line">            <span class="comment">//然后运行任务 (其实每个任务就是 迭代器生成器 生成的 迭代器)</span></div><div class="line">            <span class="comment">//这里run其实就是对队列中的任务进行了 '一次' 迭代</span></div><div class="line">            $currentTask-&gt;run();</div><div class="line"></div><div class="line">            <span class="comment">// 如果弹出队列的任务(迭代器)如果运行结束(即 迭代器对象循环结束), 则从任务数组中删除任务</span></div><div class="line">            <span class="keyword">if</span> ($currentTask-&gt;isFinished()) &#123; </div><div class="line">                <span class="comment">//unset($this-&gt;taskMap[$task-&gt;getTaskId()]);</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//如果任务没有运行结束则继续将任务压入队列</span></div><div class="line">                <span class="keyword">$this</span>-&gt;schedule($currentTask);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>测试:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">require_once</span> <span class="string">"task.php"</span>;</div><div class="line"><span class="keyword">require_once</span> <span class="string">"scheduler.php"</span>;</div><div class="line"> </div><div class="line"><span class="comment">//第一个任务(一个`迭代器生成器`):</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">task1</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt;= <span class="number">10</span>; ++$i) &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"This is task 1 iteration $i.\n"</span>;</div><div class="line">        <span class="keyword">yield</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//第二个任务(一个`迭代器生成器`):</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">task2</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt;= <span class="number">5</span>; ++$i) &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"This is task 2 iteration $i.\n"</span>;</div><div class="line">        <span class="keyword">yield</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">$scheduler = <span class="keyword">new</span> Scheduler;</div><div class="line"><span class="comment">//创建两个任务到调度器的队列中</span></div><div class="line">$scheduler-&gt;newTask(task1());</div><div class="line">$scheduler-&gt;newTask(task2());</div><div class="line"><span class="comment">//运行调度器</span></div><div class="line">$scheduler-&gt;run();</div></pre></td></tr></table></figure></li><li><p>结果: 果然是两个任务交替执行各自的循环</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">renyimin$ php index.php</div><div class="line">This is task <span class="number">1</span> iteration <span class="number">1.</span></div><div class="line">This is task <span class="number">2</span> iteration <span class="number">1.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">2.</span></div><div class="line">This is task <span class="number">2</span> iteration <span class="number">2.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">3.</span></div><div class="line">This is task <span class="number">2</span> iteration <span class="number">3.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">4.</span></div><div class="line">This is task <span class="number">2</span> iteration <span class="number">4.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">5.</span></div><div class="line">This is task <span class="number">2</span> iteration <span class="number">5.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">6.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">7.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">8.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">9.</span></div><div class="line">This is task <span class="number">1</span> iteration <span class="number">10.</span></div></pre></td></tr></table></figure></li></ul></li></ol><blockquote><p>参考: <a href="http://www.laruence.com/2015/05/28/3038.html" target="_blank" rel="external">http://www.laruence.com/2015/05/28/3038.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;从之前的知识可以了解到, 其实&lt;code&gt;(迭代器)生成器&lt;/code&gt; 也只不过是一个函数, &lt;strong&gt;不同的是这个函数的返回值是依次返回, 而不是只返回一个单独的值&lt;/strong&gt;; (也就是说, 生成器使你更方便的实现了迭代器) ;&lt;/p&gt;

      
    
    </summary>
    
      <category term="PHP高级" scheme="http://blog.renyimin.com/categories/PHP%E9%AB%98%E7%BA%A7/"/>
    
      <category term="Coroutine" scheme="http://blog.renyimin.com/categories/PHP%E9%AB%98%E7%BA%A7/Coroutine/"/>
    
    
      <category term="PHP高级" scheme="http://blog.renyimin.com/tags/PHP%E9%AB%98%E7%BA%A7/"/>
    
      <category term="Coroutine" scheme="http://blog.renyimin.com/tags/Coroutine/"/>
    
  </entry>
  
  <entry>
    <title>02.PHP - Generator (迭代)生成器</title>
    <link href="http://blog.renyimin.com/2017/05/13/2017-05-13-Iterator-generator-yield-02/"/>
    <id>http://blog.renyimin.com/2017/05/13/2017-05-13-Iterator-generator-yield-02/</id>
    <published>2017-05-13T04:15:00.000Z</published>
    <updated>2017-11-29T18:56:50.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>Generator (迭代)生成器<br> 之所以叫 <code>迭代生成器</code>, 是因为这个生成器(就是一个包含yield关键字的函数)生成的东西是个<code>迭代器对象</code>;( <a href="http://php.net/manual/zh/class.generator.php" target="_blank" rel="external">参考PHP: 生成器类的结构</a>, 会发现生成器这个类也确实实现了<code>迭代器</code>接口);</p></li><li><p><code>生成器函数</code> 的核心是 <code>yield</code> 关键字</p><ul><li>它最简单的调用形式看起来像 return 的用法, 但普通 return 会返回值并<strong>终止</strong>函数的执行;</li><li>而 yield 会返回一个值给<code>循环调用此生成器的代码</code>, 并且只是<strong>暂停</strong> <code>生成器函数</code>的运行;</li><li>暂停当前过程，意味着将处理权转交由上一级继续进行，直至上一级再次调用<strong>被暂停的</strong> <code>生成器函数</code>，则<code>生成器函数</code>会从上一次暂停的位置继续执行;</li></ul></li><li><p>当然, <code>yield</code> 更重要的特性是除了可以返回一个值以外, 还能够接收一个值</p><ul><li><a href="http://php.net/manual/zh/class.generator.php" target="_blank" rel="external">参考PHP: 生成器类的结构</a>, 可以看到 Generator 类除了实现 Iterator 接口中的必要方法以外, 还有一个 <code>send</code> 方法, 这个方法就是向 yield 语句处传递一个值, 同时从 yield 语句处继续执行, 直至再次遇到 yield 后控制权回到外部 ;</li><li>当然, 此时是<strong>先返回yield处的值, 然后再将接收到的外部值作用于另一个表达式(可能直接打印或者赋值给另一个变量)</strong>;</li><li><p>测试代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">printer</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    $i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="number">123</span> . <span class="string">"\n"</span>;</div><div class="line">        <span class="comment">//同时进行接收和发送 （先返回 yield 后面的值, 然后才将 接收到的值 作用于 printf函数）</span></div><div class="line">        printf(<span class="string">"receive: %s\n"</span>, (<span class="keyword">yield</span> ++$i));</div><div class="line">        <span class="keyword">echo</span> <span class="number">456</span> . <span class="string">"\n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$printer = printer();</div><div class="line">printf(<span class="string">"%d\n"</span>, $printer-&gt;current());    <span class="comment">//123</span></div><div class="line">                                        <span class="comment">//1  碰到yield则中断, 将$i发出, 并将控制权交给外部的调度器</span></div><div class="line"></div><div class="line">var_dump($printer-&gt;send(<span class="string">'hello'</span>));  <span class="comment">//receive: hello    调度器再次调度,继续开始</span></div><div class="line">                                    <span class="comment">//456</span></div><div class="line">                                    <span class="comment">//123</span></div><div class="line">                                    <span class="comment">//int(2) 碰到yield则中断, 将$i发出, 并将控制权交给外部的调度器</span></div><div class="line">printf(<span class="string">"%d\n"</span>, $printer-&gt;current());    <span class="comment">//yield发出的当前值果然是2</span></div><div class="line"></div><div class="line">var_dump($printer-&gt;send(<span class="string">'world'</span>));  <span class="comment">//receive: world    调度器再次调度,继续开始</span></div><div class="line">                                    <span class="comment">//456</span></div><div class="line">                                    <span class="comment">//123</span></div><div class="line">                                    <span class="comment">//int(3)碰到yield则中断, 将$i发出, 并将控制权交给外部的调度器</span></div><div class="line"></div><div class="line">printf(<span class="string">"%d\n"</span>, $printer-&gt;current());<span class="comment">//yield发出的当前值果然是3</span></div></pre></td></tr></table></figure></li><li><p>这儿yield没有作为一个语句来使用, 而是用作一个表达式, <strong>这样, 这个yield表达式 能被演化成一个值, 这个值就是调用者传递给send()方法的值</strong>;</p></li></ul></li><li><p><strong>到这里, 我们看到 <code>yield</code> 可以在其位置同时进行 <code>接收</code> 和 <code>返回</code> (双向传递), 当然, 这是实现 <code>协程</code> 的根本</strong>;</p></li><li><p>补充 ：</p><ul><li>另外, 我们可以使用生成器来重新实现 range() 函数, 标准的 range() 函数需要在内存中生成一个数组包含每一个在它范围内的值，然后返回该数组, 结果就是会产生多个很大的数组。 比如, 调用 range(0, 1000000) 将导致内存占用超过 100 MB ;</li><li>做为一种替代方法, 我们可以实现一个 xrange() 生成器, 只需要足够的内存来创建 Iterator 对象并在内部跟踪生成器的当前状态，这样只需要不到1K字节的内存;</li><li>例子:  即使你打印100W个键值对, 也不一次性将这些简直对放入变量中导致内存爆掉  <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">xrange</span><span class="params">($start, $limit, $step = <span class="number">1</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> ($i = $start; $i &lt;= $limit; $i += $step) &#123;</div><div class="line">        <span class="keyword">yield</span> $i + <span class="number">1</span> =&gt; $i;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">foreach</span> (xrange(<span class="number">0</span>, <span class="number">10000000000</span>, <span class="number">2</span>) <span class="keyword">as</span> $key =&gt; $value) &#123;</div><div class="line">    printf(<span class="string">"%d =&gt; %d"</span> . PHP_EOL, $key, $value);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul></li></ol><blockquote><p>参考: <a href="https://www.insp.top/article/php-knowledge-completion-generator-and-the-realization-of-coroutine" target="_blank" rel="external">https://www.insp.top/article/php-knowledge-completion-generator-and-the-realization-of-coroutine</a>    </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;Generator (迭代)生成器&lt;br&gt; 之所以叫 &lt;code&gt;迭代生成器&lt;/code&gt;, 是因为这个生成器(就是一个包含yield关键字的函数)生成的东西是个&lt;code&gt;迭代器对象&lt;/code&gt;;( &lt;a href=&quot;http://php.net/ma
      
    
    </summary>
    
      <category term="PHP高级" scheme="http://blog.renyimin.com/categories/PHP%E9%AB%98%E7%BA%A7/"/>
    
      <category term="Coroutine" scheme="http://blog.renyimin.com/categories/PHP%E9%AB%98%E7%BA%A7/Coroutine/"/>
    
    
      <category term="PHP高级" scheme="http://blog.renyimin.com/tags/PHP%E9%AB%98%E7%BA%A7/"/>
    
      <category term="Coroutine" scheme="http://blog.renyimin.com/tags/Coroutine/"/>
    
  </entry>
  
  <entry>
    <title>01.PHP - Iterator (迭代器) 接口简介</title>
    <link href="http://blog.renyimin.com/2017/05/13/2017-05-13-Iterator-generator-yield-01/"/>
    <id>http://blog.renyimin.com/2017/05/13/2017-05-13-Iterator-generator-yield-01/</id>
    <published>2017-05-13T03:05:00.000Z</published>
    <updated>2017-11-15T02:38:25.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>迭代: 可以理解为是指反复执行一个过程, 每执行一次叫做一次迭代;</p><ul><li><p>在php中我们经常做迭代, 如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$mapping  =  [</div><div class="line"><span class="string">'red'</span> =&gt; <span class="string">'#FF0000'</span>,</div><div class="line"><span class="string">'green'</span> =&gt; <span class="string">'#00FF00'</span>,</div><div class="line"><span class="string">'blue'</span> =&gt; <span class="string">'##0000FF'</span></div><div class="line">];</div><div class="line"></div><div class="line"><span class="keyword">foreach</span>  ($mapping  <span class="keyword">as</span>  $key  =&gt;  $value)  &#123;</div><div class="line">printf(<span class="string">"key:  %d  -  value:  %s  \n"</span>,  $key,  $value);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>上述代码通过foreach对数组遍历并迭代输出其内容, 在foreach内部, 每次迭代都会将当前的元素的值赋给$value并将数组的指针移动指向下一个元素为下一次迭代做准备,从而实现顺序遍历;<br>像这样能够让外部的迭代自己内部数据的接口就是<code>迭代器接口</code>;<br>对应的那个被迭代的对象(这里是数组), 其实就是<code>迭代器对象</code>;</p></li></ul></li><li>PHP中提供的迭代器接口和类<ul><li>PHP提供了统一的迭代器接口<a href="http://php.net/manual/en/class.appenditerator.php" target="_blank" rel="external">预定义接口中</a>;</li><li>SPL标准库中也提供了多种<a href="http://php.net/manual/zh/book.spl.php" target="_blank" rel="external">迭代器类</a>;</li></ul></li><li><p>简单实现一个迭代器</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Xrange</span> <span class="keyword">implements</span> <span class="title">Iterator</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">protected</span> $start;</div><div class="line">    <span class="keyword">protected</span> $limit;</div><div class="line">    <span class="keyword">protected</span> $step;</div><div class="line">    <span class="keyword">protected</span> $i;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($start, $limit, $step = <span class="number">0</span>)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;start = $start;</div><div class="line">        <span class="keyword">$this</span>-&gt;limit = $limit;</div><div class="line">        <span class="keyword">$this</span>-&gt;step  = $step;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rewind</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;i = <span class="keyword">$this</span>-&gt;start;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">next</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;i += <span class="keyword">$this</span>-&gt;step;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">current</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">key</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">valid</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;i &lt;= <span class="keyword">$this</span>-&gt;limit;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">foreach</span> (<span class="keyword">new</span> Xrange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>) <span class="keyword">as</span> $key =&gt; $value) &#123;</div><div class="line">    printf(<span class="string">"%d %d"</span> . PHP_EOL, $key, $value);</div><div class="line">&#125;</div></pre></td></tr></table></figure> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ php Iterator.php </div><div class="line"><span class="number">0</span> <span class="number">0</span></div><div class="line"><span class="number">2</span> <span class="number">2</span></div><div class="line"><span class="number">4</span> <span class="number">4</span></div><div class="line"><span class="number">6</span> <span class="number">6</span></div><div class="line"><span class="number">8</span> <span class="number">8</span></div><div class="line"><span class="number">10</span> <span class="number">10</span></div></pre></td></tr></table></figure></li><li><p>补充:</p></li></ol><ul><li><p>可以将一个普通对象变成一个可被遍历的对象, 场景: 如一个StudentsContact对象, 这个对象是用于处理学生联系方式的, 通过 addStudent 方法注册学生, 通过 getAllStudent 获取全部注册的学生联系方式数组(比如获取一页学生联系方式列表), 我们以往是通过 StudentsContact::getAllStudent() 获取一个数组然后遍历该数组, 但是现在有了迭代器, 只要这个类继承这个接口, 就可以直接遍历该对象获取学生数组, 并且可以在获取之前在类的内部就对输出的数据做好处理工作;</p></li><li><p>PHP的迭代器可以让你利用 面向对象 实现常见的数据结构, 例如列表, 堆栈, 队列与图<strong><em> ; (有助于你使用纯面向对象的思想来设计你的程序)<br>特别说明一下 </em></strong>对对象的遍历<strong><em>,   一般人觉得所谓的</em></strong>遍历对象<em>*</em>就是对一个对象里的属性或者方法一个一个的取出来, 然后做输出或者处理; 实际上, 这里的迭代器对对象的遍历并不是这个意思, 可能这句话本身的描述有问题, 比如, 可以使用迭代器模拟一个<code>字符串对象的迭代器</code>类, 让PHP可以对这个字符串对象进行遍历;</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span> <span class="keyword">implements</span> <span class="title">Iterator</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">private</span> $string;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($string)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;string = <span class="keyword">$this</span>-&gt;strToArray($string);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">strToArray</span><span class="params">($string, $l = <span class="number">0</span>)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="comment">//if ($l &gt; 0) &#123;</span></div><div class="line">            <span class="comment">//$ret = array();</span></div><div class="line">            <span class="comment">//$len = mb_strlen($string, "UTF-8");</span></div><div class="line">            <span class="comment">//for ($i = 0; $i &lt; $len; $i += $l) &#123;</span></div><div class="line">                <span class="comment">//$ret[] = mb_substr($string, $i, $l, "UTF-8");</span></div><div class="line">            <span class="comment">//&#125;</span></div><div class="line">            <span class="comment">//return $ret;</span></div><div class="line">        <span class="comment">//&#125;</span></div><div class="line">        <span class="keyword">return</span> preg_split(<span class="string">"//u"</span>, $string, <span class="number">-1</span>, PREG_SPLIT_NO_EMPTY);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">current</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> current(<span class="keyword">$this</span>-&gt;string);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">next</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> next(<span class="keyword">$this</span>-&gt;string);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">key</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> key(<span class="keyword">$this</span>-&gt;string);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">valid</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span> (key(<span class="keyword">$this</span>-&gt;string) === <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rewind</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        reset(<span class="keyword">$this</span>-&gt;string);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$string = <span class="keyword">new</span> String(<span class="string">'这个是什么213jdjlf'</span>);</div><div class="line"><span class="keyword">foreach</span> ($string <span class="keyword">as</span> $k =&gt; $v) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"&#123;$k&#125; =&gt; &#123;$v&#125;"</span> . <span class="string">"&lt;br/&gt;"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">结果:</div><div class="line"><span class="number">0</span> =&gt; 这</div><div class="line"><span class="number">1</span> =&gt; 个</div><div class="line"><span class="number">2</span> =&gt; 是</div><div class="line"><span class="number">3</span> =&gt; 什</div><div class="line"><span class="number">4</span> =&gt; 么</div><div class="line"><span class="number">5</span> =&gt; <span class="number">2</span></div><div class="line"><span class="number">6</span> =&gt; <span class="number">1</span></div><div class="line"><span class="number">7</span> =&gt; <span class="number">3</span></div><div class="line"><span class="number">8</span> =&gt; j</div><div class="line"><span class="number">9</span> =&gt; d</div><div class="line"><span class="number">10</span> =&gt; j</div><div class="line"><span class="number">11</span> =&gt; l</div><div class="line"><span class="number">12</span> =&gt; f</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;迭代: 可以理解为是指反复执行一个过程, 每执行一次叫做一次迭代;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在php中我们经常做迭代, 如下:&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
      <category term="PHP高级" scheme="http://blog.renyimin.com/categories/PHP%E9%AB%98%E7%BA%A7/"/>
    
      <category term="Coroutine" scheme="http://blog.renyimin.com/categories/PHP%E9%AB%98%E7%BA%A7/Coroutine/"/>
    
    
      <category term="PHP高级" scheme="http://blog.renyimin.com/tags/PHP%E9%AB%98%E7%BA%A7/"/>
    
      <category term="Coroutine" scheme="http://blog.renyimin.com/tags/Coroutine/"/>
    
  </entry>
  
  <entry>
    <title>02 - 分布式锁</title>
    <link href="http://blog.renyimin.com/2017/04/13/2017-04-13-distributed-02/"/>
    <id>http://blog.renyimin.com/2017/04/13/2017-04-13-distributed-02/</id>
    <published>2017-04-13T12:03:09.000Z</published>
    <updated>2017-12-07T13:07:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;分布式锁&quot;&gt;&lt;a href=&quot;#分布式锁&quot; class=&quot;headerlink&quot; title=&quot;分布式锁&quot;&gt;&lt;/a&gt;分布式锁&lt;/h3&gt;
      
    
    </summary>
    
      <category term="分布式" scheme="http://blog.renyimin.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="http://blog.renyimin.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>05 - 分布式</title>
    <link href="http://blog.renyimin.com/2017/04/13/2017-04-17-distributed-05/"/>
    <id>http://blog.renyimin.com/2017/04/13/2017-04-17-distributed-05/</id>
    <published>2017-04-13T12:03:09.000Z</published>
    <updated>2017-12-07T13:07:56.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="分布式" scheme="http://blog.renyimin.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="http://blog.renyimin.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>01 - 分布式</title>
    <link href="http://blog.renyimin.com/2017/04/13/2017-04-13-distributed-01/"/>
    <id>http://blog.renyimin.com/2017/04/13/2017-04-13-distributed-01/</id>
    <published>2017-04-13T05:20:31.000Z</published>
    <updated>2017-12-07T13:07:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据一致性问题"><a href="#数据一致性问题" class="headerlink" title="数据一致性问题"></a>数据一致性问题</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数据一致性问题&quot;&gt;&lt;a href=&quot;#数据一致性问题&quot; class=&quot;headerlink&quot; title=&quot;数据一致性问题&quot;&gt;&lt;/a&gt;数据一致性问题&lt;/h3&gt;
      
    
    </summary>
    
      <category term="分布式" scheme="http://blog.renyimin.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="http://blog.renyimin.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>07.小结 &quot;Jsonp&quot; 对比 &quot;CORS简单/非简单请求&quot;</title>
    <link href="http://blog.renyimin.com/2016/09/21/2016-09-21-sameoriginpolicy-07/"/>
    <id>http://blog.renyimin.com/2016/09/21/2016-09-21-sameoriginpolicy-07/</id>
    <published>2016-09-21T13:20:16.000Z</published>
    <updated>2017-10-28T02:30:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Jsonp-对比-CORS简单-非简单请求"><a href="#Jsonp-对比-CORS简单-非简单请求" class="headerlink" title="Jsonp 对比 CORS简单/非简单请求"></a>Jsonp 对比 CORS简单/非简单请求</h3><p>都可以方便实现跨域;</p><h4 id="Jsonp"><a href="#Jsonp" class="headerlink" title="Jsonp"></a>Jsonp</h4><p>简单适用, 老式浏览器全部支持, 服务器端改动很小;</p><p>但是JSONP只能发GET请求;</p><p>JSONP跨域发送Cookie的话, 只用设置好<code>cookie的domain属性</code>为顶级域名即可 ;</p><h3 id="CORS简单请求"><a href="#CORS简单请求" class="headerlink" title="CORS简单请求"></a>CORS简单请求</h3><p>服务端需要设置一些允许选项;</p><p>发送请求为 GET, POST, HEAD ;</p><p>跨域发送cookie的话, 不仅需要设置<code>cookie的domain属性</code>, 服务端和客户端都要对<code>Credentials</code> header属性进行设置;<br>跨域发送cookie的话, 服务端 <code>Access-Control-Allow-Origin</code> 不能设置为 * , 否则会提示 :<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Failed to load http:<span class="comment">//test.test.com/index.php?sex=renyimin&amp;age=100: </span></div><div class="line">The value of the <span class="string">'Access-Control-Allow-Origin'</span> header in the response must not be the wildcard <span class="string">'*'</span> when the request<span class="string">'s credentials mode is '</span><span class="keyword">include</span><span class="string">'. </span></div><div class="line"><span class="string">Origin '</span>http:<span class="comment">//www.test.com' is therefore not allowed access. The credentials mode of requests initiated by the XMLHttpRequest is controlled by the withCredentials attribute.</span></div></pre></td></tr></table></figure></p><h3 id="CORS非简单请求"><a href="#CORS非简单请求" class="headerlink" title="CORS非简单请求"></a>CORS非简单请求</h3><p>服务端需要设置一些允许选项;</p><p>发送其他请求 (PUT) ..</p><p>可以设置自定义header头</p><p>cookie方面和 CORS简单请求一样</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Jsonp-对比-CORS简单-非简单请求&quot;&gt;&lt;a href=&quot;#Jsonp-对比-CORS简单-非简单请求&quot; class=&quot;headerlink&quot; title=&quot;Jsonp 对比 CORS简单/非简单请求&quot;&gt;&lt;/a&gt;Jsonp 对比 CORS简单/非简单请求&lt;/
      
    
    </summary>
    
      <category term="CrossDomain" scheme="http://blog.renyimin.com/categories/CrossDomain/"/>
    
    
      <category term="CrossDomain" scheme="http://blog.renyimin.com/tags/CrossDomain/"/>
    
  </entry>
  
  <entry>
    <title>06.Ajax请求不能发送 之 &quot;CORS方案 -- (not-so-simple request)&quot;</title>
    <link href="http://blog.renyimin.com/2016/09/18/2016-09-18-sameoriginpolicy-06/"/>
    <id>http://blog.renyimin.com/2016/09/18/2016-09-18-sameoriginpolicy-06/</id>
    <published>2016-09-18T12:10:16.000Z</published>
    <updated>2017-10-27T10:15:27.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="预检请求-preflight-说明"><a href="#预检请求-preflight-说明" class="headerlink" title="预检请求 preflight 说明"></a>预检请求 <code>preflight</code> 说明</h4><p>1.非简单请求是那种对服务器有特殊要求的请求, 比如请求方法是 <code>PUT</code> 或 <code>DELETE</code>, 或者 <code>Content-Type</code> 字段的类型是 <code>application/json</code> ;</p><p>2.非简单请求的CORS请求, 会在正式通信之前, 增加一次HTTP查询请求, 称为 <code>&quot;预检&quot;请求(preflight)</code> ;</p><ul><li>浏览器先询问服务器, 当前网页所在的域名是否在服务器的许可名单之中, 以及可以使用哪些HTTP动词和头信息字段;</li><li>只有得到肯定答复, 浏览器才会发出正式的XMLHttpRequest请求, 否则就报错 ;</li></ul><p>3.非简单请求会导致原先的一次请求变成两次, 第一次请求是 <code>预检请求</code> ;</p><p>4.”预检”请求用的请求方法是 <code>OPTIONS</code>，表示这个请求是用来<code>询问</code>的，头信息里面关键字段是Origin，表示请求来自哪个源 ;</p><h4 id="非简单请求的例子"><a href="#非简单请求的例子" class="headerlink" title="非简单请求的例子"></a>非简单请求的例子</h4><p>1.www.test.com/index.php</p><ul><li>本例子使用 <code>PUT</code> 来进行ajax请求, 满足 <code>非简单请求</code> 的条件 ;</li><li><p>另外, 本例还<code>自定义了请求时的 header 首部字段</code>, 也满足 <code>非简单请求</code> 的条件 ;</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="meta">?&gt;</span></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">    &lt;title&gt;Title&lt;/title&gt;</div><div class="line">    &lt;script src=<span class="string">"https://cdn.staticfile.org/jquery/3.1.1/jquery.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;script type=<span class="string">"text/javascript"</span> &gt;</div><div class="line">        $(document).ready(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">            $(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">//序列化name/value</span></div><div class="line">                <span class="keyword">var</span> data = $(<span class="string">"form"</span>).serializeArray();</div><div class="line">                $.ajax(&#123;</div><div class="line">                    <span class="comment">//这里用PUT, 则为 `非简单` 请求</span></div><div class="line">                    type: <span class="string">'PUT'</span>,</div><div class="line">                    url: <span class="string">'http://test.test.com/index.php'</span>,</div><div class="line">                    dataType: <span class="string">'json'</span>,</div><div class="line">                    data: data,</div><div class="line">                    <span class="comment">//或者如果你自定义了一些请求时的 header 首部字段, 那么请求就也是 复杂请求</span></div><div class="line">                    headers: &#123;<span class="string">"custom-header-field"</span> : <span class="string">"test"</span>&#125;,</div><div class="line">                    success: <span class="function"><span class="keyword">function</span> <span class="params">(result)</span> </span>&#123;</div><div class="line">                        console.log(result);</div><div class="line">                    &#125;,</div><div class="line">                    timeout: <span class="number">3000</span></div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;form name=<span class="string">"form"</span>&gt;</div><div class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"sex"</span>&gt;</div><div class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>&gt;</div><div class="line">    &lt;input type=<span class="string">"button"</span> id=<span class="string">"btn"</span> value=<span class="string">"button"</span> /&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></li></ul><p>2.test.test.com/index.php<br>    <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//服务器允许的 Origin</span></div><div class="line">header(<span class="string">"Access-Control-Allow-Origin: http://www.test.com"</span>);</div><div class="line"><span class="comment">//服务器允许的 methods</span></div><div class="line">header(<span class="string">"Access-Control-Allow-Methods: PUT, GET, POST"</span>);</div><div class="line"><span class="comment">//服务器允许设置的头部字段</span></div><div class="line">header(<span class="string">"Access-Control-Allow-Headers: custom-header-field"</span>);</div><div class="line"></div><div class="line">$arguments = file_get_contents(<span class="string">'php://input'</span>);</div><div class="line"><span class="keyword">echo</span> json_encode([<span class="string">'arguments'</span> =&gt; $arguments]);</div></pre></td></tr></table></figure></p><p>3.注意: 像上面例子的复杂跨域请求</p><ul><li><p>必须: 首先和简单请求一样, 服务器端的 <code>Access-Control-Allow-Origin</code> 是必须设置的, 不然首先就跨不了域;</p></li><li><p>必须: 其次, 是使用了 <code>get</code>, <code>post</code>, <code>head</code> 之外方法的 <code>复杂请求</code>, 那么就必须在服务端有对应的 <code>Access-Control-Allow-Method</code>, 否则:<br><img src="/img/cross-domain/not-simple-error01.png" width="597" height="133" alt="not-simple-error01" align="center"></p></li><li><p>可选: 如果你自定义了 <code>自定义首部字段</code> 的 <code>复杂请求</code>, 那么也要在服务端有对应的 <code>Access-Control-Allow-Headers</code>, 否则:<br><img src="/img/cross-domain/not-simple-error02.png" width="598" height="150" alt="not-simple-error02" align="center"></p></li></ul><p>4.另外需要关注的是: 如果你设置了自定义的首部字段, 那么即使你的请求类型是get, post, head, 自然也是复杂请求, 此时的HTTP请求方法显示的仍然如下:</p><pre><code>Request Method:OPTIONS</code></pre><h4 id="分析预检请求"><a href="#分析预检请求" class="headerlink" title="分析预检请求"></a>分析预检请求</h4><p>1.上面<code>www.test.com/index.php</code>代码进行ajax请求的时候, HTTP请求的方法是<code>PUT</code>, 所以浏览器会发现, 这是一个非简单请求, 就自动发出一个”预检”请求, 要求服务器确认可以这样请求 ;</p><p>2.所以请求应该是包括<code>预检请求</code>和<code>真正的请求</code>两个请求的:<br><img src="/img/cross-domain/2times_request.png" width="600" height="360" alt="2times_request" align="center"></p><p>3.下面是这个”预检”请求的HTTP头信息 和 回应信息:<br><img src="/img/cross-domain/preflight01.png" width="700" height="500" alt="preflight01" align="center"></p><p>4.可以看到, “预检”请求用的请求方法是OPTIONS, 表示这个请求是用来询问的, 头信息里面, 关键字段是Origin, 表示请求来自哪个源;</p><ul><li>除了Origin字段，”预检”请求的头信息包括两个特殊字段:<br>(1)<code>Access-Control-Request-Method</code> ：该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是PUT ;<br>(2)<code>Access-Control-Request-Headers</code>：该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段, 上例是X-Custom-Header ;</li></ul><h4 id="分析预检响应"><a href="#分析预检响应" class="headerlink" title="分析预检响应"></a>分析预检响应</h4><p>1.从下面预检请求的截图中，可以看到预检请求的回应中, 服务器收到”预检”请求以后, 检查了 <code>Origin</code>、<code>Access-Control-Request-Method</code> 和 <code>Access-Control-Request-Headers</code> 字段以后，确认允许跨源请求，就可以做出回应 ;<br><img src="/img/cross-domain/preflight01.png" width="700" height="500" alt="preflight01" align="center"></p><ul><li>并且预检请求部分是不会真的发送数据的:<br><img src="/img/cross-domain/preflight02.png" width="400" height="150" alt="preflight02" align="center"></li></ul><p>2.上面的HTTP回应中，关键的是 <code>Access-Control-Allow-Origin</code> 字段，表示 <code>http://www.test.com</code> 可以请求数据, <strong>该字段也可以设为星号</strong>，表示同意任意跨源请求 ;<br>    <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Access-Control-Allow-Origin: http:<span class="comment">//www.test.com</span></div><div class="line">或者</div><div class="line">Access-Control-Allow-Origin: *</div></pre></td></tr></table></figure></p><p>3.如果浏览器否定了”预检”请求，会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段 ; 这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被 <code>XMLHttpRequest</code> 对象的 <code>onerror</code> 回调函数捕获;</p><ul><li>控制台会打印出如下的报错信息 ;<br><img src="/img/cross-domain/no-simple-error01.png" width="650" height="150" alt="no-simple-error01" align="center"></li></ul><p>4.服务器还可能回应的其他CORS相关字段如下:</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Access-Control-Allow-Methods: GET, POST, PUT</div><div class="line">Access-Control-Allow-Headers: X-Custom-Header</div><div class="line">Access-Control-Allow-Credentials: true</div><div class="line">Access-Control-Max-Age: 1728000</div></pre></td></tr></table></figure>（1）Access-Control-Allow-Methods该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次&quot;预检&quot;请求。（2）Access-Control-Allow-Headers如果浏览器请求包括Access-Control-Request-Headers字段，则Access-Control-Allow-Headers字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在&quot;预检&quot;中请求的字段。（3）Access-Control-Allow-Credentials该字段与简单请求时的含义相同。（4）Access-Control-Max-Age该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是20天（1728000秒），即允许缓存该条回应1728000秒（即20天），在此期间，不用发出另一条预检请求。</code></pre><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><p>cors请求是否允许包含cookie?(和CORS简单请求是一样的要求)</p><ul><li>www.test.com/index.php  <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">setcookie(<span class="string">'address'</span>, json_encode([<span class="string">'city'</span> =&gt; <span class="string">'yuncheng'</span>, <span class="string">'town'</span> =&gt; <span class="string">'xiaoliang'</span>]), <span class="number">0</span>, <span class="string">'/'</span>, <span class="string">'.test.com'</span>);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">    &lt;title&gt;Title&lt;/title&gt;</div><div class="line">    &lt;script src=<span class="string">"https://cdn.staticfile.org/jquery/3.1.1/jquery.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;script type=<span class="string">"text/javascript"</span> &gt;</div><div class="line">        $(document).ready(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">            $.ajaxSetup(&#123;crossDomain: <span class="keyword">true</span>, xhrFields: &#123;withCredentials: <span class="keyword">true</span>&#125;&#125;);</div><div class="line">            $(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">//序列化name/value</span></div><div class="line">                <span class="keyword">var</span> data = $(<span class="string">"form"</span>).serializeArray();</div><div class="line">                $.ajax(&#123;</div><div class="line">                    <span class="comment">//这里用PUT, 则为 `非简单` 请求</span></div><div class="line">                    type: <span class="string">'PUT'</span>,</div><div class="line">                    url: <span class="string">'http://test.test.com/index.php'</span>,</div><div class="line">                    dataType: <span class="string">'json'</span>,</div><div class="line">                    data: data,</div><div class="line">                    <span class="comment">//或者如果你自定义了一些请求时的 header 首部字段, 那么请求就也是 复杂请求</span></div><div class="line">                    headers: &#123;<span class="string">"custom-header-field"</span> : <span class="string">"test"</span>&#125;,</div><div class="line">                    success: <span class="function"><span class="keyword">function</span> <span class="params">(result)</span> </span>&#123;</div><div class="line">                        console.log(result);</div><div class="line">                    &#125;,</div><div class="line">                    timeout: <span class="number">3000</span></div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;form name=<span class="string">"form"</span>&gt;</div><div class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"sex"</span>&gt;</div><div class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>&gt;</div><div class="line">    &lt;input type=<span class="string">"button"</span> id=<span class="string">"btn"</span> value=<span class="string">"button"</span> /&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></li></ul><ul><li>test.test.com  <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//服务器允许的 Origin (如果要发送cookie的话复杂请求也不能为*)</span></div><div class="line">header(<span class="string">"Access-Control-Allow-Origin: http://www.test.com"</span>);</div><div class="line"><span class="comment">//服务器允许的 methods</span></div><div class="line">header(<span class="string">"Access-Control-Allow-Methods: PUT, GET, POST"</span>);</div><div class="line"><span class="comment">//服务器允许设置的头部字段</span></div><div class="line">header(<span class="string">"Access-Control-Allow-Headers: custom-header-field"</span>);</div><div class="line"><span class="comment">//要跨子域发cookie, 这个自然不能少</span></div><div class="line">header(<span class="string">"Access-Control-Allow-Credentials: true"</span>);</div><div class="line"></div><div class="line">$arguments = file_get_contents(<span class="string">'php://input'</span>);</div><div class="line">$address = $_COOKIE[<span class="string">'address'</span>];</div><div class="line"><span class="keyword">echo</span> json_encode([<span class="string">'arguments'</span> =&gt; $arguments, <span class="string">'cookie'</span> =&gt; $address]);</div></pre></td></tr></table></figure></li></ul><blockquote><p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">参考 CORS</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;预检请求-preflight-说明&quot;&gt;&lt;a href=&quot;#预检请求-preflight-说明&quot; class=&quot;headerlink&quot; title=&quot;预检请求 preflight 说明&quot;&gt;&lt;/a&gt;预检请求 &lt;code&gt;preflight&lt;/code&gt; 说明&lt;/h4&gt;
      
    
    </summary>
    
      <category term="CrossDomain" scheme="http://blog.renyimin.com/categories/CrossDomain/"/>
    
    
      <category term="CrossDomain" scheme="http://blog.renyimin.com/tags/CrossDomain/"/>
    
  </entry>
  
  <entry>
    <title>05.Ajax请求不能发送 之 &quot;CORS方案 -- (simple request)&quot;</title>
    <link href="http://blog.renyimin.com/2016/09/18/2016-09-18-sameoriginpolicy-05/"/>
    <id>http://blog.renyimin.com/2016/09/18/2016-09-18-sameoriginpolicy-05/</id>
    <published>2016-09-18T04:45:07.000Z</published>
    <updated>2017-10-27T10:03:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CORS说明"><a href="#CORS说明" class="headerlink" title="CORS说明"></a>CORS说明</h3><p>1.CORS是一个W3C标准, 全称是 “跨域资源共享 “(Cross-origin resource sharing), 通俗说就是我们所熟知的跨域请求 ;</p><ul><li>众所周知，在以前，跨域可以采用 <code>代理</code>、<code>JSONP</code> 等方式，而在Modern浏览器面前，这些终将成为过去式，因为有了CORS ;</li><li>CORS在最初接触的时候只大概了解到，通过服务器端设置Access-Control-Allow-Origin响应头，即可使指定来源像访问同源接口一样访问跨域接口，但其实CORS的规范定义远不止这些 ;</li></ul><p>2.它允许浏览器向<strong>跨源</strong>服务器发出XMLHttpRequest请求, 也就是克服了AJAX只能同源使用的限制 ;</p><p>3.CORS需要浏览器和服务器同时支持 (目前, 所有浏览器都支持该功能, IE浏览器不能低于IE10) ;</p><p>4.整个CORS通信过程都是浏览器自动完成, 不需要用户参与 ;</p><ul><li><p>对于开发者来说, CORS通信与同源的AJAX通信没有差别, 代码完全一样, 浏览器一旦发现AJAX的请求是跨源的, 就会自动添加一些附加的头信息, 有时还会多出一次附加的请求, 但用户不会有感觉;</p></li><li><p>之所以<code>CORS通信与同源的AJAX通信的代码没有差别</code>, 是因为: <strong>其实实现CORS通信的关键是服务器, 只要服务器实现了CORS接口，就可以跨源通信 </strong></p></li></ul><h3 id="CORS的两类请求"><a href="#CORS的两类请求" class="headerlink" title="CORS的两类请求"></a>CORS的两类请求</h3><p>1.浏览器将CORS请求分成两类: 简单请求(simple request) 和 非简单请求(not-so-simple request)</p><p>2.以下情况会被归类为 <code>非简单请求</code> :</p><ul><li>请求以 GET, HEAD 或者 POST 以外的方法发起请求 ;</li><li>虽然使用 POST，但请求数据为 application/x-www-form-urlencoded, multipart/form-data 或者 text/plain 以外的数据类型, 比如说，用 POST 发送数据类型为 application/xml 或者 text/xml 的 XML 数据的请求 ;</li><li>使用自定义请求头（比如添加诸如 X-PINGOTHER）</li></ul><h3 id="简单请求代码案例"><a href="#简单请求代码案例" class="headerlink" title="简单请求代码案例"></a>简单请求代码案例</h3><p>1.客户端代码<br>    www.test.com/index.html :<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">   &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">   &lt;title&gt;Title&lt;/title&gt;</div><div class="line">   &lt;script src=&quot;https://cdn.staticfile.org/jquery/3.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">   &lt;script type=&quot;text/javascript&quot; &gt;</div><div class="line">       $(document).ready(function()&#123;</div><div class="line">           $(&quot;#btn&quot;).click(function(k) &#123;</div><div class="line">               var data = $(&quot;form&quot;).serializeArray();//序列化name/value</div><div class="line">               $.ajax(&#123;</div><div class="line">                   type: &apos;GET&apos;,  //这里用GET</div><div class="line">                   url: &apos;http://test.test.com/index.php&apos;,</div><div class="line">                   dataType: &apos;json&apos;,  //类型</div><div class="line">                   data: data,</div><div class="line">                   success: function (result) &#123;//返回的json数据</div><div class="line">                       console.log(result); //回调输出</div><div class="line">                   &#125;,</div><div class="line">                   timeout: 3000</div><div class="line">               &#125;);</div><div class="line">           &#125;);</div><div class="line">       &#125;);</div><div class="line">   &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;form name=&quot;form&quot;&gt;</div><div class="line">   &lt;input type=&quot;text&quot; name=&quot;sex&quot;&gt;</div><div class="line">   &lt;input type=&quot;text&quot; name=&quot;age&quot;&gt;</div><div class="line">   &lt;input type=&quot;button&quot; id=&quot;btn&quot; value=&quot;button&quot; /&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p><p>2.服务端代码<br>test.test.com/index.php :<br>    <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">header(<span class="string">"Access-Control-Allow-Origin: http://www.test.com"</span>);</div><div class="line"><span class="keyword">echo</span> json_encode([<span class="string">'name'</span> =&gt; <span class="string">'lant'</span>, <span class="string">'age'</span> =&gt; <span class="number">100</span>]);</div></pre></td></tr></table></figure></p><h3 id="基本流程分析"><a href="#基本流程分析" class="headerlink" title="基本流程分析"></a>基本流程分析</h3><p>1.对于简单请求，浏览器直接发出CORS请求, 具体来说, 就是在头信息之中, 自动增加一个Origin字段 ;</p><ul><li>浏览器发现这次跨源AJAX请求是简单请求, 就自动在头信息之中, 添加一个Origin字段:<br><img src="/img/cross-domain/ajax-simple-cors.png" width="670" height="420" alt="ajax-simple-cors" align="center"></li><li><strong>上面的头信息中, <code>Origin字段</code> 用来说明本次请求来自哪个源(协议 + 域名 + 端口), 服务器根据这个值, 决定是否同意这次请求 </strong>;</li></ul><p>2.如果Origin源不在服务器的许可范围内</p><ul><li>服务器仍然会返回一个正常的HTTP回应, 不过浏览器会发现, 这个回应的头信息并没有包含 <code>Access-Control-Allow-Origin</code> 字段(详见下文), 就知道出错了, 从而抛出一个错误, 被XMLHttpRequest的onerror回调函数捕获; </li><li><strong>注意, 这种错误无法通过状态码识别, 因为HTTP回应的状态码有可能是200</strong> ;<br><img src="/img/cross-domain/ajax-simple-cors02.png" width="590" height="260" alt="ajax-simple-cors02" align="center"></li></ul><p>3.当然, 如果Origin源在服务器设置的许可范围内</p><ul><li>服务器的响应就会多出如下几个头信息字段(当然也不一定是所有都包含, <strong>具体还得看服务器如何进行设置</strong>):  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Access-Control-Allow-Origin: http://api.bob.com</div><div class="line">Access-Control-Allow-Credentials: true</div><div class="line">Access-Control-Expose-Headers: FooBar</div><div class="line">Content-Type: text/html; charset=utf-8</div></pre></td></tr></table></figure></li></ul><ul><li>重点分析 :<br>上面的头信息之中，有三个与CORS请求相关的字段，都以<code>Access-Control-</code>开头:<br>(1) <code>Access-Control-Allow-Origin</code><br>服务器要设置ajax请求可以跨域, 该字段是必须的, 它的值要么是请求时Origin字段的值，要么是一个<em>，表示接受任意域名的请求;<br>(2) <code>Access-Control-Allow-Credentials</code><br>该字段可选, 它的值是一个布尔值，表示是否允许发送Cookie, <em>*默认情况下，Cookie不包括在CORS请求之中</em></em>, 设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器;<br>注意, 这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。<br>(3) <code>Access-Control-Expose-Headers</code><br>该字段可选, CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma;<br>如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定;<br>上面的例子指定，getResponseHeader(‘FooBar’)可以返回FooBar字段的值。</li></ul><h3 id="服务器端的具体设置"><a href="#服务器端的具体设置" class="headerlink" title="服务器端的具体设置"></a>服务器端的具体设置</h3><ol><li>服务器在设置的时候, 其实就是通过header函数设置上面的三个选项!</li><li><p>比如之前的例子中, 如果服务器只是简单的为了实现跨域, 直接设置如下选项即可:</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">header(<span class="string">"Access-Control-Allow-Origin: http://www.test1.com"</span>);</div><div class="line"><span class="keyword">echo</span> json_encode([<span class="string">'name'</span> =&gt; <span class="string">'lant'</span>, <span class="string">'age'</span> =&gt; <span class="number">100</span>]);</div></pre></td></tr></table></figure></li></ol><h3 id="withCredentials-属性"><a href="#withCredentials-属性" class="headerlink" title="withCredentials 属性"></a>withCredentials 属性</h3><p><strong>CORS请求默认不发送<code>Cookie</code>和<code>HTTP认证信息</code> (Jsonp是会发送cookie信息的)</strong></p><p>1.之前在介绍<code>Access-Control-Allow-Credentials</code>选项的时候提到, CORS请求默认不发送Cookie和HTTP认证信息; 如果要把Cookie发到服务器:</p><ul><li><p>一方面要 <strong>服务器同意指定Access-Control-Allow-Credentials字段</strong> :</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Access-Control-Allow-Credentials: <span class="keyword">true</span></div><div class="line"><span class="comment">//php中设置如下:</span></div><div class="line">header(<span class="string">"Access-Control-Allow-Credentials: true"</span>);</div></pre></td></tr></table></figure></li><li><p>另一方面, 开发者必须在AJAX请求中打开 <code>withCredentials</code> 属性:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var xhr = new XMLHttpRequest();</div><div class="line">xhr.withCredentials = true;</div><div class="line">//jquery中设置withCredentials的代码如下:</div><div class="line">$.ajaxSetup(&#123;crossDomain: true, xhrFields: &#123;withCredentials: true&#125;&#125;);</div></pre></td></tr></table></figure></li></ul><p>2.需要以上两方面都做到才可以</p><ul><li>否则，即使服务器同意发送Cookie，浏览器也不会发送 ;</li><li>但是, 如果省略 <code>withCredentials</code> 设置, 有的浏览器还是会一起发送Cookie, 这时, 可以显式关闭 <code>withCredentials</code> ;<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xhr.withCredentials = <span class="keyword">false</span>;</div></pre></td></tr></table></figure></li></ul><p>3.<strong>需要注意的是</strong>:</p><ul><li><strong>如果要发送Cookie, <code>Access-Control-Allow-Origin</code> 就不能设为星号<code>*</code>, 必须指定明确的、与请求网页一致的域名</strong> ; </li><li><strong>同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传, 其他域名的Cookie并不会上传, 且(跨源)原网页代码中的document.cookie也无法读取服务器域名下的Cookie ;</strong></li></ul><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><p>1.域1中的代码(www.test.com/index.php)：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传, 其他域名的Cookie并不会上传, 且(跨源)原网页代码中的document.cookie也无法读取服务器域名下的Cookie</span></div><div class="line">setcookie(<span class="string">'address'</span>, json_encode([<span class="string">'city'</span> =&gt; <span class="string">'yuncheng'</span>, <span class="string">'town'</span> =&gt; <span class="string">'xiaoliang'</span>]), <span class="number">0</span>, <span class="string">'/'</span>, <span class="string">'.test.com'</span>);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">    &lt;title&gt;Title&lt;/title&gt;</div><div class="line">    &lt;script src=<span class="string">"https://cdn.staticfile.org/jquery/3.1.1/jquery.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;script type=<span class="string">"text/javascript"</span> &gt;</div><div class="line">        $(document).ready(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="comment">//要在跨域请求服务器时在cors请求中包含cookie, 需要开启withCredentials属性</span></div><div class="line">            $.ajaxSetup(&#123;crossDomain: <span class="keyword">true</span>, xhrFields: &#123;withCredentials: <span class="keyword">true</span>&#125;&#125;);</div><div class="line"></div><div class="line">            $(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span><span class="params">(k)</span> </span>&#123;</div><div class="line">                <span class="keyword">var</span> data = $(<span class="string">"form"</span>).serializeArray();<span class="comment">//序列化name/value</span></div><div class="line">                $.ajax(&#123;</div><div class="line">                    type: <span class="string">'GET'</span>,  <span class="comment">//这里用GET</span></div><div class="line">                    url: <span class="string">'http://test.test.com/index.php'</span>,</div><div class="line">                    dataType: <span class="string">'json'</span>,  <span class="comment">//类型</span></div><div class="line">                    data: data,</div><div class="line">                    success: <span class="function"><span class="keyword">function</span> <span class="params">(result)</span> </span>&#123;<span class="comment">//返回的json数据</span></div><div class="line">                        console.log(result); <span class="comment">//回调输出</span></div><div class="line">                    &#125;,</div><div class="line">                    timeout: <span class="number">3000</span></div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;form name=<span class="string">"form"</span>&gt;</div><div class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"sex"</span>&gt;</div><div class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>&gt;</div><div class="line">    &lt;input type=<span class="string">"button"</span> id=<span class="string">"btn"</span> value=<span class="string">"button"</span> /&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p><p>2.域2中的代码(test.test.comindex.php):<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">header(<span class="string">"Access-Control-Allow-Origin: http://www.test.com"</span>);</div><div class="line"><span class="comment">//服务器允许前端在跨域cors请求时包含cookie</span></div><div class="line">header(<span class="string">"Access-Control-Allow-Credentials: true"</span>);</div><div class="line">$address = $_COOKIE[<span class="string">'address'</span>];</div><div class="line"><span class="keyword">echo</span> json_encode([<span class="string">'name'</span> =&gt; <span class="string">'lant'</span>, <span class="string">'age'</span> =&gt; <span class="number">100</span>, <span class="string">'address'</span> =&gt; $address]);</div></pre></td></tr></table></figure></p><p>3.效果:<br><img src="/img/cross-domain/cors-cookie.png" width="590" height="260" alt="cors-cookie" align="center"></p><p>4.两个注意点</p><ul><li><p>如果域1中在html中设置了 <code>withCredentials</code> 为 true :</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.ajaxSetup(&#123;crossDomain: true, xhrFields: &#123;withCredentials: true&#125;&#125;);</div></pre></td></tr></table></figure><p>  那么在对应的ajax请求的域2中必须设置</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">header(<span class="string">"Access-Control-Allow-Credentials: true"</span>);</div></pre></td></tr></table></figure><p>  否则, 报错如下:<br>  <img src="/img/cross-domain/haha-server-withCredentials.png" width="500" height="160" alt="haha-server-withCredentials" align="center"></p></li><li><p>如果两边都不设置 <code>withCredentials</code> 属性的话, 也就是默认请求不带cookie, 那么即使请求方域1中设置了domain属性为 <code>.test.com</code> 的cookie值, 服务方(test.test.com)中也获取不到cookie, 因为域1默认请求就没有带cookie ;</p></li></ul><blockquote><p><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="external">参考 阮一峰</a><br><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">参考 阮一峰 CORS</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CORS说明&quot;&gt;&lt;a href=&quot;#CORS说明&quot; class=&quot;headerlink&quot; title=&quot;CORS说明&quot;&gt;&lt;/a&gt;CORS说明&lt;/h3&gt;&lt;p&gt;1.CORS是一个W3C标准, 全称是 “跨域资源共享 “(Cross-origin resource sh
      
    
    </summary>
    
      <category term="CrossDomain" scheme="http://blog.renyimin.com/categories/CrossDomain/"/>
    
    
      <category term="CrossDomain" scheme="http://blog.renyimin.com/tags/CrossDomain/"/>
    
  </entry>
  
  <entry>
    <title>04. Ajax请求不能发送 之 &quot;JSONP方案&quot;</title>
    <link href="http://blog.renyimin.com/2016/09/17/2016-09-17-sameoriginpolicy-04/"/>
    <id>http://blog.renyimin.com/2016/09/17/2016-09-17-sameoriginpolicy-04/</id>
    <published>2016-09-17T11:27:31.000Z</published>
    <updated>2017-10-27T09:32:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>1.JSONP是服务器与客户端 <strong>跨源通信</strong> 的常用方法, 最大特点就是<code>简单适用</code>, <code>老式浏览器全部支持</code>, <code>服务器端改造非常小</code> ;</p><p>2.但是，<strong>JSONP只能发GET请求</strong> ;</p><p>3.<strong>注意:</strong> JSONP跨子域发送Cookie的话, 只用设置好<code>cookie的domain属性</code>为顶级域名即可 ;</p><ul><li><p>ajax使用jsonp跨域的时候是可以轻松像上面这样带上cookie给所跨的域 ;</p></li><li><p>而下一篇介绍的ajax使用cors方案跨域的话, 除了设置了cookie的 <code>document.domain</code> 为两个地址的顶级域名, 却也不能带上cookie, 还需要注意 前端和服务端的 <code>withCredentials</code> 头字段 ;</p></li></ul><h3 id="jsonp跨域请求案例"><a href="#jsonp跨域请求案例" class="headerlink" title="jsonp跨域请求案例"></a>jsonp跨域请求案例</h3><p>www.test.com/index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;Title&lt;/title&gt;</div><div class="line">    &lt;script src=&quot;https://cdn.staticfile.org/jquery/3.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script type=&quot;text/javascript&quot; &gt;</div><div class="line">        $(document).ready(function()&#123;</div><div class="line">            //注意, 此时jsonp是会带上cookie的(当然, 如果你不设置cookie的domain, test.test.com自然获取不到www.test.com域的cookie)</div><div class="line">            document.cookie = &quot;name=value; domain=test.com&quot;;</div><div class="line">            $(&quot;#btn&quot;).click(function() &#123;</div><div class="line">                var data = $(&quot;form&quot;).serializeArray();//序列化name/value</div><div class="line">                $.ajax(&#123;</div><div class="line">                    type: &apos;GET&apos;,  //这里用GET</div><div class="line">                    url: &apos;http://test.test.com/index.php&apos;,</div><div class="line">                    dataType: &apos;jsonp&apos;,  //类型</div><div class="line">                    data: data,</div><div class="line">                    jsonp: &apos;callback&apos;, //jsonp回调参数，必需</div><div class="line">                    async: false,</div><div class="line">                    success: function (result) &#123;//返回的json数据</div><div class="line">                        console.log(result); //回调输出</div><div class="line">                    &#125;,</div><div class="line">                    timeout: 3000</div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;form name=&quot;form&quot;&gt;</div><div class="line">    &lt;input type=&quot;text&quot; name=&quot;sex&quot;&gt;</div><div class="line">    &lt;input type=&quot;text&quot; name=&quot;age&quot;&gt;</div><div class="line">    &lt;input type=&quot;button&quot; id=&quot;btn&quot; value=&quot;button&quot; /&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p><p>test.test.com/index.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//jsonp回调参数，必需</span></div><div class="line">$callback = <span class="keyword">isset</span>($_GET[<span class="string">'callback'</span>]) ? trim($_GET[<span class="string">'callback'</span>]) : <span class="string">''</span>;</div><div class="line"></div><div class="line">$sex = <span class="keyword">isset</span>($_GET[<span class="string">'sex'</span>]) ? trim($_GET[<span class="string">'sex'</span>]) : <span class="string">''</span>;</div><div class="line">$age = <span class="keyword">isset</span>($_GET[<span class="string">'age'</span>]) ? trim($_GET[<span class="string">'age'</span>]) : <span class="string">''</span>;</div><div class="line"></div><div class="line">$data = [<span class="string">"sex"</span> =&gt; $sex, <span class="string">"age"</span> =&gt; $age];</div><div class="line">$res = json_encode($data); <span class="comment">//json 数据</span></div><div class="line"><span class="comment">// 不能用return</span></div><div class="line"><span class="keyword">echo</span> $callback . <span class="string">'('</span> . $res . <span class="string">')'</span>;  <span class="comment">//返回格式，必需</span></div></pre></td></tr></table></figure></p><p><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="external">参考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JSONP&quot;&gt;&lt;a href=&quot;#JSONP&quot; class=&quot;headerlink&quot; title=&quot;JSONP&quot;&gt;&lt;/a&gt;JSONP&lt;/h3&gt;&lt;p&gt;1.JSONP是服务器与客户端 &lt;strong&gt;跨源通信&lt;/strong&gt; 的常用方法, 最大特点就是&lt;code&gt;简
      
    
    </summary>
    
      <category term="CrossDomain" scheme="http://blog.renyimin.com/categories/CrossDomain/"/>
    
    
      <category term="CrossDomain" scheme="http://blog.renyimin.com/tags/CrossDomain/"/>
    
  </entry>
  
</feed>
